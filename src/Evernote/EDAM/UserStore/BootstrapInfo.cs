/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap profiles.
  /// <dl>
  ///  <dt>profiles:</dt>
  ///    <dd>
  ///    List of one or more bootstrap profiles, in descending
  ///    preference order.
  ///    </dd>
  ///  </dl>
  /// </summary>
  public partial class BootstrapInfo : TBase
  {

    public List<global::Evernote.EDAM.UserStore.BootstrapProfile> Profiles { get; set; }

    public BootstrapInfo()
    {
    }

    public BootstrapInfo(List<global::Evernote.EDAM.UserStore.BootstrapProfile> profiles) : this()
    {
      this.Profiles = profiles;
    }

    public BootstrapInfo DeepCopy()
    {
      var tmp25 = new BootstrapInfo();
      if((Profiles != null))
      {
        tmp25.Profiles = this.Profiles.DeepCopy();
      }
      return tmp25;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_profiles = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list26 = await iprot.ReadListBeginAsync(cancellationToken);
                  Profiles = new List<global::Evernote.EDAM.UserStore.BootstrapProfile>(_list26.Count);
                  for(int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    global::Evernote.EDAM.UserStore.BootstrapProfile _elem28;
                    _elem28 = new global::Evernote.EDAM.UserStore.BootstrapProfile();
                    await _elem28.ReadAsync(iprot, cancellationToken);
                    Profiles.Add(_elem28);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_profiles = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_profiles)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp29 = new TStruct("BootstrapInfo");
        await oprot.WriteStructBeginAsync(tmp29, cancellationToken);
        var tmp30 = new TField();
        if((Profiles != null))
        {
          tmp30.Name = "profiles";
          tmp30.Type = TType.List;
          tmp30.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Profiles.Count), cancellationToken);
            foreach (global::Evernote.EDAM.UserStore.BootstrapProfile _iter31 in Profiles)
            {
              await _iter31.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BootstrapInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Profiles, other.Profiles);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Profiles != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Profiles);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp32 = new StringBuilder("BootstrapInfo(");
      if((Profiles != null))
      {
        tmp32.Append(", Profiles: ");
        Profiles.ToString(tmp32);
      }
      tmp32.Append(')');
      return tmp32.ToString();
    }
  }

}

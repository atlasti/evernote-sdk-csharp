/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap settings.
  /// <dl>
  ///  <dt>name:</dt>
  ///    <dd>
  ///    The unique name of the profile, which is guaranteed to remain consistent across
  ///    calls to getBootstrapInfo.
  ///    </dd>
  ///  <dt>settings:</dt>
  ///    <dd>
  ///    The settings for this profile.
  ///    </dd>
  ///  </dl>
  /// </summary>
  public partial class BootstrapProfile : TBase
  {

    public string Name { get; set; }

    public global::Evernote.EDAM.UserStore.BootstrapSettings Settings { get; set; }

    public BootstrapProfile()
    {
    }

    public BootstrapProfile(string name, global::Evernote.EDAM.UserStore.BootstrapSettings settings) : this()
    {
      this.Name = name;
      this.Settings = settings;
    }

    public BootstrapProfile DeepCopy()
    {
      var tmp20 = new BootstrapProfile();
      if((Name != null))
      {
        tmp20.Name = this.Name;
      }
      if((Settings != null))
      {
        tmp20.Settings = (global::Evernote.EDAM.UserStore.BootstrapSettings)this.Settings.DeepCopy();
      }
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_settings = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Settings = new global::Evernote.EDAM.UserStore.BootstrapSettings();
                await Settings.ReadAsync(iprot, cancellationToken);
                isset_settings = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_settings)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp21 = new TStruct("BootstrapProfile");
        await oprot.WriteStructBeginAsync(tmp21, cancellationToken);
        var tmp22 = new TField();
        if((Name != null))
        {
          tmp22.Name = "name";
          tmp22.Type = TType.String;
          tmp22.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Settings != null))
        {
          tmp22.Name = "settings";
          tmp22.Type = TType.Struct;
          tmp22.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await Settings.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BootstrapProfile other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Name, other.Name)
        && global::System.Object.Equals(Settings, other.Settings);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null))
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Settings != null))
        {
          hashcode = (hashcode * 397) + Settings.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp23 = new StringBuilder("BootstrapProfile(");
      if((Name != null))
      {
        tmp23.Append(", Name: ");
        Name.ToString(tmp23);
      }
      if((Settings != null))
      {
        tmp23.Append(", Settings: ");
        Settings.ToString(tmp23);
      }
      tmp23.Append(')');
      return tmp23.ToString();
    }
  }

}

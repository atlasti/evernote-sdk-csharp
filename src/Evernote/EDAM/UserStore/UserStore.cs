/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.UserStore
{
  public partial class UserStore
  {
    /// <summary>
    /// Service:  UserStore
    /// <p>
    /// The UserStore service is primarily used by EDAM clients to establish
    /// authentication via username and password over a trusted connection (e.g.
    /// SSL).  A client's first call to this interface should be checkVersion() to
    /// ensure that the client's software is up to date.
    /// </p>
    /// All calls which require an authenticationToken may throw an
    /// EDAMUserException for the following reasons:
    ///  <ul>
    ///   <li> AUTH_EXPIRED "authenticationToken" - token has expired
    ///   <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
    ///   <li> DATA_REQUIRED "authenticationToken" - token is empty
    ///   <li> INVALID_AUTH "authenticationToken" - token signature is invalid
    ///   <li> PERMISSION_DENIED "authenticationToken" - token does not convey sufficient
    ///     privileges
    /// </ul>
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// This should be the first call made by a client to the EDAM service.  It
      /// tells the service what protocol version is used by the client.  The
      /// service will then return true if the client is capable of talking to
      /// the service, and false if the client's protocol version is incompatible
      /// with the service, so the client must upgrade.  If a client receives a
      /// false value, it should report the incompatibility to the user and not
      /// continue with any more EDAM requests (UserStore or NoteStore).
      /// 
      /// @param clientName
      ///   This string provides some information about the client for
      ///   tracking/logging on the service.  It should provide information about
      ///   the client's software and platform. The structure should be:
      ///   application/version; platform/version; [ device/version ]
      ///   E.g. "Evernote Windows/3.0.1; Windows/XP SP3".
      /// 
      /// @param edamVersionMajor
      ///   This should be the major protocol version that was compiled by the
      ///   client.  This should be the current value of the EDAM_VERSION_MAJOR
      ///   constant for the client.
      /// 
      /// @param edamVersionMinor
      ///   This should be the major protocol version that was compiled by the
      ///   client.  This should be the current value of the EDAM_VERSION_MINOR
      ///   constant for the client.
      /// </summary>
      /// <param name="clientName"></param>
      /// <param name="edamVersionMajor"></param>
      /// <param name="edamVersionMinor"></param>
      global::System.Threading.Tasks.Task<bool> checkVersion(string clientName, short edamVersionMajor, short edamVersionMinor, CancellationToken cancellationToken = default);

      /// <summary>
      /// This provides bootstrap information to the client. Various bootstrap
      /// profiles and settings may be used by the client to configure itself.
      /// 
      /// @param locale
      ///   The client's current locale, expressed in language[_country]
      ///   format. E.g., "en_US". See ISO-639 and ISO-3166 for valid
      ///   language and country codes.
      /// 
      /// @return
      ///   The bootstrap information suitable for this client.
      /// </summary>
      /// <param name="locale"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.BootstrapInfo> getBootstrapInfo(string locale, CancellationToken cancellationToken = default);

      /// <summary>
      /// This is used to check a username and password in order to create a
      /// long-lived authentication token that can be used for further actions.
      /// 
      /// This function is not available to most third party applications,
      /// which typically authenticate using OAuth as
      /// described at
      /// <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
      /// If you believe that your application requires permission to authenticate
      /// using username and password instead of OAuth, please contact Evernote
      /// developer support by visiting
      /// <a href="http://dev.evernote.com">dev.evernote.com</a>.
      /// 
      /// @param username
      ///   The username or registered email address of the account to
      ///   authenticate against.
      /// 
      /// @param password
      ///   The plaintext password to check against the account.  Since
      ///   this is not protected by the EDAM protocol, this information must be
      ///   provided over a protected transport (i.e. SSL).
      /// 
      /// @param consumerKey
      ///   The "consumer key" portion of the API key issued to the client application
      ///   by Evernote.
      /// 
      /// @param consumerSecret
      ///   The "consumer secret" portion of the API key issued to the client application
      ///   by Evernote.
      /// 
      /// @param deviceIdentifier
      ///   An optional string that uniquely identifies the device from which the
      ///   authentication is being performed. This string allows the service to return the
      ///   same authentication token when a given application requests authentication
      ///   repeatedly from the same device. This may happen when the user logs out of an
      ///   application and then logs back in, or when the application is uninstalled
      ///   and later reinstalled. If no reliable device identifier can be created,
      ///   this value should be omitted. If set, the device identifier must be between
      ///   1 and EDAM_DEVICE_ID_LEN_MAX characters long and must match the regular expression
      ///   EDAM_DEVICE_ID_REGEX.
      /// 
      /// @param deviceDescription
      ///   A description of the device from which the authentication is being performed.
      ///   This field is displayed to the user in a list of authorized applications to
      ///   allow them to distinguish between multiple tokens issued to the same client
      ///   application on different devices. For example, the Evernote iOS client on
      ///   a user's iPhone and iPad might pass the iOS device names "Bob's iPhone" and
      ///   "Bob's iPad". The device description must be between 1 and
      ///   EDAM_DEVICE_DESCRIPTION_LEN_MAX characters long and must match the regular
      ///   expression EDAM_DEVICE_DESCRIPTION_REGEX.
      /// 
      /// @param supportsTwoFactor
      ///   Whether the calling application supports two-factor authentication. If this
      ///   parameter is false, this method will fail with the error code INVALID_AUTH and the
      ///   parameter "password" when called for a user who has enabled two-factor
      ///   authentication.
      /// 
      /// @return
      ///   <p>The result of the authentication. The level of detail provided in the returned
      ///   AuthenticationResult.User structure depends on the access level granted by
      ///   calling application's API key.</p>
      ///   <p>If the user has two-factor authentication enabled,
      ///   AuthenticationResult.secondFactorRequired will be set and
      ///   AuthenticationResult.authenticationToken will contain a short-lived token
      ///   that may only be used to complete the two-factor authentication process by calling
      ///   UserStore.completeTwoFactorAuthentication.</p>
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "username" - username is empty
      ///   <li> DATA_REQUIRED "password" - password is empty
      ///   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
      ///   <li> DATA_REQUIRED "consumerSecret" - consumerSecret is empty
      ///   <li> DATA_REQUIRED "deviceDescription" - deviceDescription is empty
      ///   <li> BAD_DATA_FORMAT "deviceDescription" - deviceDescription is not valid.
      ///   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid.
      ///   <li> INVALID_AUTH "username" - username not found
      ///   <li> INVALID_AUTH "password" - password did not match
      ///   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
      ///   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
      ///   <li> INVALID_AUTH "businessOnly" - the user is a business-only account
      ///   <li> PERMISSION_DENIED "User.active" - user account is closed
      ///   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
      ///     failed authentication too often
      ///   <li> AUTH_EXPIRED "password" - user password is expired
      /// </ul>
      /// </summary>
      /// <param name="username"></param>
      /// <param name="password"></param>
      /// <param name="consumerKey"></param>
      /// <param name="consumerSecret"></param>
      /// <param name="deviceIdentifier"></param>
      /// <param name="deviceDescription"></param>
      /// <param name="supportsTwoFactor"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateLongSession(string username, string password, string consumerKey, string consumerSecret, string deviceIdentifier, string deviceDescription, bool supportsTwoFactor, CancellationToken cancellationToken = default);

      /// <summary>
      /// Complete the authentication process when a second factor is required. This
      /// call is made after a successful call to authenticate or authenticateLongSession
      /// when the authenticating user has enabled two-factor authentication.
      /// 
      /// @param authenticationToken An authentication token returned by a previous
      ///   call to UserStore.authenticate or UserStore.authenticateLongSession that
      ///   could not be completed in a single call because a second factor was required.
      /// 
      /// @param oneTimeCode The one time code entered by the user. This value is delivered
      ///   out-of-band, typically via SMS or an authenticator application.
      /// 
      /// @param deviceIdentifier See the corresponding parameter in authenticateLongSession.
      /// 
      /// @param deviceDescription See the corresponding parameter in authenticateLongSession.
      /// 
      /// @return
      ///   The result of the authentication. The level of detail provided in the returned
      ///   AuthenticationResult.User structure depends on the access level granted by the
      ///   calling application's API key. If the initial authentication call was made to
      ///   authenticateLongSession, the AuthenticationResult will contain a long-lived
      ///   authentication token.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "authenticationToken" - authenticationToken is empty
      ///   <li> DATA_REQUIRED "oneTimeCode" - oneTimeCode is empty
      ///   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid
      ///   <li> BAD_DATA_FORMAT "authenticationToken" - authenticationToken is not well formed
      ///   <li> INVALID_AUTH "oneTimeCode" - oneTimeCode did not match
      ///   <li> AUTH_EXPIRED "authenticationToken" - authenticationToken has expired
      ///   <li> PERMISSION_DENIED "authenticationToken" - authenticationToken is not valid
      ///   <li> PERMISSION_DENIED "User.active" - user account is closed
      ///   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
      ///     failed authentication too often
      ///   <li> DATA_CONFLICT "User.twoFactorAuthentication" - The user has not enabled
      ///      two-factor authentication.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="oneTimeCode"></param>
      /// <param name="deviceIdentifier"></param>
      /// <param name="deviceDescription"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> completeTwoFactorAuthentication(string authenticationToken, string oneTimeCode, string deviceIdentifier, string deviceDescription, CancellationToken cancellationToken = default);

      /// <summary>
      /// Revoke an existing long lived authentication token. This can be used to
      /// revoke OAuth tokens or tokens created by calling authenticateLongSession,
      /// and allows a user to effectively log out of Evernote from the perspective
      /// of the application that holds the token. The authentication token that is
      /// passed is immediately revoked and may not be used to call any authenticated
      /// EDAM function.
      /// 
      /// @param authenticationToken the authentication token to revoke.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "authenticationToken" - no authentication token provided
      ///   <li> BAD_DATA_FORMAT "authenticationToken" - the authentication token is not well formed
      ///   <li> INVALID_AUTH "authenticationToken" - the authentication token is invalid
      ///   <li> AUTH_EXPIRED "authenticationToken" - the authentication token is expired or
      ///     is already revoked.
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task revokeLongSession(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// This is used to take an existing authentication token that grants access
      /// to an individual user account (returned from 'authenticate',
      /// 'authenticateLongSession' or an OAuth authorization) and obtain an additional
      /// authentication token that may be used to access business notebooks if the user
      /// is a member of an Evernote Business account.
      /// 
      /// The resulting authentication token may be used to make NoteStore API calls
      /// against the business using the NoteStore URL returned in the result.
      /// 
      /// @param authenticationToken
      ///   The authentication token for the user. This may not be a shared authentication
      ///   token (returned by NoteStore.authenticateToSharedNotebook or
      ///   NoteStore.authenticateToSharedNote) or a business authentication token.
      /// 
      /// @return
      ///   The result of the authentication, with the token granting access to the
      ///   business in the result's 'authenticationToken' field. The URL that must
      ///   be used to access the business account NoteStore will be returned in the
      ///   result's 'noteStoreUrl' field.  The 'User' field will
      ///   not be set in the result.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> PERMISSION_DENIED "authenticationToken" - the provided authentication token
      ///        is a shared or business authentication token. </li>
      ///   <li> PERMISSION_DENIED "Business" - the user identified by the provided
      ///        authentication token is not currently a member of a business. </li>
      ///   <li> PERMISSION_DENIED "Business.status" - the business that the user is a
      ///        member of is not currently in an active status. </li>
      ///   <li> BUSINESS_SECURITY_LOGIN_REQUIRED "sso" - the user must complete single
      ///        sign-on before authenticating to the business.
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToBusiness(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the User corresponding to the provided authentication token,
      /// or throws an exception if this token is not valid.
      /// The level of detail provided in the returned User structure depends on
      /// the access level granted by the token, so a web service client may receive
      /// fewer fields than an integrated desktop client.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.User> getUser(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the UserStore about the publicly available location information for
      /// a particular username.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "username" - username is empty
      /// </ul>
      /// </summary>
      /// <param name="username"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.PublicUserInfo> getPublicUserInfo(string username, CancellationToken cancellationToken = default);

      /// <summary>
      /// <p>Returns the URLs that should be used when sending requests to the service on
      /// behalf of the account represented by the provided authenticationToken.</p>
      /// 
      /// <p>This method isn't needed by most clients, who can retreive the correct set of
      /// UserUrls from the AuthenticationResult returned from
      /// UserStore#authenticateLongSession(). This method is typically only needed to look up
      /// the correct URLs for an existing long-lived authentication token.</p>
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.UserUrls> getUserUrls(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Invite a user to join an Evernote Business account.
      /// 
      /// Behavior will depend on the auth token. <ol>
      ///   <li>
      ///     auth token with privileges to manage Evernote Business membership.
      ///       "External Provisioning" - The user will receive an email inviting
      ///       them to join the business. They do not need to have an existing Evernote
      ///       account. If the user has already been invited, a new invitation email
      ///       will be sent.
      ///   </li>
      ///   <li>
      ///     business auth token issued to an admin user. Only for first-party clients:
      ///       "Approve Invitation" - If there has been a request to invite the email,
      ///       approve it. Invited user will receive email with a link to join business.
      ///       "Invite User" - If no invitation for the email exists, create an approved
      ///       invitation for the email. An email will be sent to the emailAddress with
      ///       a link to join the caller's business.
      ///   </li>
      ///   </li>
      ///     business auth token:
      ///       "Request Invitation" - If no invitation exists, create a request to
      ///       invite the user to the business. These requests do not count towards a
      ///       business' max active user limit.
      ///   </li>
      /// </ol>
      /// 
      /// @param authenticationToken
      ///   the authentication token with sufficient privileges to manage Evernote Business
      ///   membership or a business auth token.
      /// 
      /// @param emailAddress
      ///   the email address of the user to invite to join the Evernote Business account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "email" - if no email address was provided </li>
      ///   <li> BAD_DATA_FORMAT "email" - if the email address is not well formed </li>
      ///   <li> DATA_CONFLICT "BusinessUser.email" - if there is already a user in the business
      ///     whose business email address matches the specified email address. </li>
      ///   <li> LIMIT_REACHED "Business.maxActiveUsers" - if the business has reached its
      ///     user limit. </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="emailAddress"></param>
      global::System.Threading.Tasks.Task inviteToBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default);

      /// <summary>
      /// Remove a user from an Evernote Business account. Once removed, the user will no
      /// longer be able to access content within the Evernote Business account.
      /// 
      /// <p>The email address of the user to remove from the business must match the email
      /// address used to invite a user to join the business via UserStore.inviteToBusiness.
      /// This function will only remove users who were invited by external provisioning</p>
      /// 
      /// @param authenticationToken
      ///   An authentication token with sufficient privileges to manage Evernote Business
      ///   membership.
      /// 
      /// @param emailAddress
      ///   The email address of the user to remove from the Evernote Business account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "email" - if no email address was provided </li>
      ///   <li> BAD_DATA_FORMAT "email" - The email address is not well formed </li>
      /// </ul>
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "email" - If there is no user with the specified email address in the
      ///     business or that user was not invited via external provisioning. </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="emailAddress"></param>
      global::System.Threading.Tasks.Task removeFromBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default);

      /// <summary>
      /// Update the email address used to uniquely identify an Evernote Business user.
      /// 
      /// This will update the identifier for a user who was previously invited using
      /// inviteToBusiness, ensuring that caller and the Evernote service maintain an
      /// agreed-upon identifier for a specific user.
      /// 
      /// For example, the following sequence of calls would invite a user to join
      /// a business, update their email address, and then remove the user
      /// from the business using the updated email address.
      /// 
      /// inviteToBusiness("foo@bar.com")
      /// updateBusinessUserIdentifier("foo@bar.com", "baz@bar.com")
      /// removeFromBusiness("baz@bar.com")
      /// 
      /// @param authenticationToken
      ///   An authentication token with sufficient privileges to manage Evernote Business
      ///   membership.
      /// 
      /// @param oldEmailAddress
      ///   The existing email address used to uniquely identify the user.
      /// 
      /// @param newEmailAddress
      ///   The new email address used to uniquely identify the user.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>DATA_REQUIRED "oldEmailAddress" - No old email address was provided</li>
      ///   <li>DATA_REQUIRED "newEmailAddress" - No new email address was provided</li>
      ///   <li>BAD_DATA_FORMAT "oldEmailAddress" - The old email address is not well formed</li>
      ///   <li>BAD_DATA_FORMAT "newEmailAddress" - The new email address is not well formed</li>
      ///   <li>DATA_CONFLICT "oldEmailAddress" - The old and new email addresses were the same</li>
      ///   <li>DATA_CONFLICT "newEmailAddress" - There is already an invitation or registered user with
      ///     the provided new email address.</li>
      ///   <li>DATA_CONFLICT "invitation.externallyProvisioned" - The user identified by
      ///     oldEmailAddress was not added via UserStore.inviteToBusiness and therefore cannot be
      ///     updated.</li>
      /// </ul>
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"oldEmailAddress" - If there is no user or invitation with the specified oldEmailAddress
      ///     in the business.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="oldEmailAddress"></param>
      /// <param name="newEmailAddress"></param>
      global::System.Threading.Tasks.Task updateBusinessUserIdentifier(string authenticationToken, string oldEmailAddress, string newEmailAddress, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of active business users in a given business.
      /// 
      /// Clients are required to cache this information and re-fetch no more than once per day
      /// or when they encountered a user ID or username that was not known to them.
      /// 
      /// To avoid excessive look ups, clients should also track user IDs and usernames that belong
      /// to users who are not in the business, since they will not be included in the result.
      /// 
      /// I.e., when a client encounters a previously unknown user ID as a note's creator, it may query
      /// listBusinessUsers to find information about this user. If the user is not in the resulting
      /// list, the client should track that fact and not re-query the service the next time that it sees
      /// this user on a note.
      /// 
      /// @param authenticationToken
      ///   A business authentication token returned by authenticateToBusiness or with sufficient
      ///   privileges to manage Evernote Business membership.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.UserProfile>> listBusinessUsers(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of outstanding invitations to join an Evernote Business account.
      /// 
      /// Only outstanding invitations are returned by this function. Users who have accepted an
      /// invitation and joined a business are listed using listBusinessUsers.
      /// 
      /// @param authenticationToken
      ///   An authentication token with sufficient privileges to manage Evernote Business membership.
      /// 
      /// @param includeRequestedInvitations
      ///   If true, invitations with a status of BusinessInvitationStatus.REQUESTED will be included
      ///   in the returned list. If false, only invitations with a status of
      ///   BusinessInvitationStatus.APPROVED will be included.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="includeRequestedInvitations"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.BusinessInvitation>> listBusinessInvitations(string authenticationToken, bool includeRequestedInvitations, CancellationToken cancellationToken = default);

      /// <summary>
      /// Retrieve the standard account limits for a given service level. This should only be
      /// called when necessary, e.g. to determine if a higher level is available should the
      /// user upgrade, and should be cached for long periods (e.g. 30 days) as the values are
      /// not expected to fluctuate frequently.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>DATA_REQUIRED "serviceLevel" - serviceLevel is null</li>
      /// </ul>
      /// </summary>
      /// <param name="serviceLevel"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.AccountLimits> getAccountLimits(global::Evernote.EDAM.Type.ServiceLevel serviceLevel, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Service:  UserStore
    /// <p>
    /// The UserStore service is primarily used by EDAM clients to establish
    /// authentication via username and password over a trusted connection (e.g.
    /// SSL).  A client's first call to this interface should be checkVersion() to
    /// ensure that the client's software is up to date.
    /// </p>
    /// All calls which require an authenticationToken may throw an
    /// EDAMUserException for the following reasons:
    ///  <ul>
    ///   <li> AUTH_EXPIRED "authenticationToken" - token has expired
    ///   <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
    ///   <li> DATA_REQUIRED "authenticationToken" - token is empty
    ///   <li> INVALID_AUTH "authenticationToken" - token signature is invalid
    ///   <li> PERMISSION_DENIED "authenticationToken" - token does not convey sufficient
    ///     privileges
    /// </ul>
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> checkVersion(string clientName, short edamVersionMajor, short edamVersionMinor, CancellationToken cancellationToken = default)
      {
        await send_checkVersion(clientName, edamVersionMajor, edamVersionMinor, cancellationToken);
        return await recv_checkVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_checkVersion(string clientName, short edamVersionMajor, short edamVersionMinor, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp34 = new InternalStructs.checkVersion_args() {
          ClientName = clientName,
          EdamVersionMajor = edamVersionMajor,
          EdamVersionMinor = edamVersionMinor,
        };
        
        await tmp34.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_checkVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp35 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp35.Type == TMessageType.Exception)
        {
          var tmp36 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp36;
        }

        var tmp37 = new InternalStructs.checkVersion_result();
        await tmp37.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp37.__isset.success)
        {
          return tmp37.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.BootstrapInfo> getBootstrapInfo(string locale, CancellationToken cancellationToken = default)
      {
        await send_getBootstrapInfo(locale, cancellationToken);
        return await recv_getBootstrapInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getBootstrapInfo(string locale, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBootstrapInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp38 = new InternalStructs.getBootstrapInfo_args() {
          Locale = locale,
        };
        
        await tmp38.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.BootstrapInfo> recv_getBootstrapInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp39 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp39.Type == TMessageType.Exception)
        {
          var tmp40 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp40;
        }

        var tmp41 = new InternalStructs.getBootstrapInfo_result();
        await tmp41.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp41.__isset.success)
        {
          return tmp41.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBootstrapInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateLongSession(string username, string password, string consumerKey, string consumerSecret, string deviceIdentifier, string deviceDescription, bool supportsTwoFactor, CancellationToken cancellationToken = default)
      {
        await send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor, cancellationToken);
        return await recv_authenticateLongSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticateLongSession(string username, string password, string consumerKey, string consumerSecret, string deviceIdentifier, string deviceDescription, bool supportsTwoFactor, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticateLongSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp42 = new InternalStructs.authenticateLongSession_args() {
          Username = username,
          Password = password,
          ConsumerKey = consumerKey,
          ConsumerSecret = consumerSecret,
          DeviceIdentifier = deviceIdentifier,
          DeviceDescription = deviceDescription,
          SupportsTwoFactor = supportsTwoFactor,
        };
        
        await tmp42.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> recv_authenticateLongSession(CancellationToken cancellationToken = default)
      {
        
        var tmp43 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp43.Type == TMessageType.Exception)
        {
          var tmp44 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp44;
        }

        var tmp45 = new InternalStructs.authenticateLongSession_result();
        await tmp45.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp45.__isset.success)
        {
          return tmp45.Success;
        }
        if (tmp45.__isset.userException)
        {
          throw tmp45.UserException;
        }
        if (tmp45.__isset.systemException)
        {
          throw tmp45.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateLongSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> completeTwoFactorAuthentication(string authenticationToken, string oneTimeCode, string deviceIdentifier, string deviceDescription, CancellationToken cancellationToken = default)
      {
        await send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription, cancellationToken);
        return await recv_completeTwoFactorAuthentication(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_completeTwoFactorAuthentication(string authenticationToken, string oneTimeCode, string deviceIdentifier, string deviceDescription, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("completeTwoFactorAuthentication", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp46 = new InternalStructs.completeTwoFactorAuthentication_args() {
          AuthenticationToken = authenticationToken,
          OneTimeCode = oneTimeCode,
          DeviceIdentifier = deviceIdentifier,
          DeviceDescription = deviceDescription,
        };
        
        await tmp46.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> recv_completeTwoFactorAuthentication(CancellationToken cancellationToken = default)
      {
        
        var tmp47 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp47.Type == TMessageType.Exception)
        {
          var tmp48 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp48;
        }

        var tmp49 = new InternalStructs.completeTwoFactorAuthentication_result();
        await tmp49.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp49.__isset.success)
        {
          return tmp49.Success;
        }
        if (tmp49.__isset.userException)
        {
          throw tmp49.UserException;
        }
        if (tmp49.__isset.systemException)
        {
          throw tmp49.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "completeTwoFactorAuthentication failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task revokeLongSession(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_revokeLongSession(authenticationToken, cancellationToken);
        await recv_revokeLongSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_revokeLongSession(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("revokeLongSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp50 = new InternalStructs.revokeLongSession_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp50.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_revokeLongSession(CancellationToken cancellationToken = default)
      {
        
        var tmp51 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp51.Type == TMessageType.Exception)
        {
          var tmp52 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp52;
        }

        var tmp53 = new InternalStructs.revokeLongSession_result();
        await tmp53.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp53.__isset.userException)
        {
          throw tmp53.UserException;
        }
        if (tmp53.__isset.systemException)
        {
          throw tmp53.SystemException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToBusiness(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_authenticateToBusiness(authenticationToken, cancellationToken);
        return await recv_authenticateToBusiness(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticateToBusiness(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticateToBusiness", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp54 = new InternalStructs.authenticateToBusiness_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp54.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> recv_authenticateToBusiness(CancellationToken cancellationToken = default)
      {
        
        var tmp55 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp55.Type == TMessageType.Exception)
        {
          var tmp56 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp56;
        }

        var tmp57 = new InternalStructs.authenticateToBusiness_result();
        await tmp57.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp57.__isset.success)
        {
          return tmp57.Success;
        }
        if (tmp57.__isset.userException)
        {
          throw tmp57.UserException;
        }
        if (tmp57.__isset.systemException)
        {
          throw tmp57.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateToBusiness failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.User> getUser(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_getUser(authenticationToken, cancellationToken);
        return await recv_getUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getUser(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp58 = new InternalStructs.getUser_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp58.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.User> recv_getUser(CancellationToken cancellationToken = default)
      {
        
        var tmp59 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp59.Type == TMessageType.Exception)
        {
          var tmp60 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp60;
        }

        var tmp61 = new InternalStructs.getUser_result();
        await tmp61.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp61.__isset.success)
        {
          return tmp61.Success;
        }
        if (tmp61.__isset.userException)
        {
          throw tmp61.UserException;
        }
        if (tmp61.__isset.systemException)
        {
          throw tmp61.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.PublicUserInfo> getPublicUserInfo(string username, CancellationToken cancellationToken = default)
      {
        await send_getPublicUserInfo(username, cancellationToken);
        return await recv_getPublicUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getPublicUserInfo(string username, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPublicUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp62 = new InternalStructs.getPublicUserInfo_args() {
          Username = username,
        };
        
        await tmp62.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.PublicUserInfo> recv_getPublicUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp63 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp63.Type == TMessageType.Exception)
        {
          var tmp64 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp64;
        }

        var tmp65 = new InternalStructs.getPublicUserInfo_result();
        await tmp65.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp65.__isset.success)
        {
          return tmp65.Success;
        }
        if (tmp65.__isset.notFoundException)
        {
          throw tmp65.NotFoundException;
        }
        if (tmp65.__isset.systemException)
        {
          throw tmp65.SystemException;
        }
        if (tmp65.__isset.userException)
        {
          throw tmp65.UserException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.UserUrls> getUserUrls(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_getUserUrls(authenticationToken, cancellationToken);
        return await recv_getUserUrls(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getUserUrls(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUserUrls", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp66 = new InternalStructs.getUserUrls_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp66.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.UserUrls> recv_getUserUrls(CancellationToken cancellationToken = default)
      {
        
        var tmp67 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp67.Type == TMessageType.Exception)
        {
          var tmp68 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp68;
        }

        var tmp69 = new InternalStructs.getUserUrls_result();
        await tmp69.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp69.__isset.success)
        {
          return tmp69.Success;
        }
        if (tmp69.__isset.userException)
        {
          throw tmp69.UserException;
        }
        if (tmp69.__isset.systemException)
        {
          throw tmp69.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserUrls failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task inviteToBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default)
      {
        await send_inviteToBusiness(authenticationToken, emailAddress, cancellationToken);
        await recv_inviteToBusiness(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_inviteToBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("inviteToBusiness", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp70 = new InternalStructs.inviteToBusiness_args() {
          AuthenticationToken = authenticationToken,
          EmailAddress = emailAddress,
        };
        
        await tmp70.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_inviteToBusiness(CancellationToken cancellationToken = default)
      {
        
        var tmp71 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp71.Type == TMessageType.Exception)
        {
          var tmp72 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp72;
        }

        var tmp73 = new InternalStructs.inviteToBusiness_result();
        await tmp73.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp73.__isset.userException)
        {
          throw tmp73.UserException;
        }
        if (tmp73.__isset.systemException)
        {
          throw tmp73.SystemException;
        }
      }

      public async global::System.Threading.Tasks.Task removeFromBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default)
      {
        await send_removeFromBusiness(authenticationToken, emailAddress, cancellationToken);
        await recv_removeFromBusiness(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeFromBusiness(string authenticationToken, string emailAddress, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeFromBusiness", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp74 = new InternalStructs.removeFromBusiness_args() {
          AuthenticationToken = authenticationToken,
          EmailAddress = emailAddress,
        };
        
        await tmp74.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_removeFromBusiness(CancellationToken cancellationToken = default)
      {
        
        var tmp75 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp75.Type == TMessageType.Exception)
        {
          var tmp76 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp76;
        }

        var tmp77 = new InternalStructs.removeFromBusiness_result();
        await tmp77.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp77.__isset.userException)
        {
          throw tmp77.UserException;
        }
        if (tmp77.__isset.systemException)
        {
          throw tmp77.SystemException;
        }
        if (tmp77.__isset.notFoundException)
        {
          throw tmp77.NotFoundException;
        }
      }

      public async global::System.Threading.Tasks.Task updateBusinessUserIdentifier(string authenticationToken, string oldEmailAddress, string newEmailAddress, CancellationToken cancellationToken = default)
      {
        await send_updateBusinessUserIdentifier(authenticationToken, oldEmailAddress, newEmailAddress, cancellationToken);
        await recv_updateBusinessUserIdentifier(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateBusinessUserIdentifier(string authenticationToken, string oldEmailAddress, string newEmailAddress, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBusinessUserIdentifier", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp78 = new InternalStructs.updateBusinessUserIdentifier_args() {
          AuthenticationToken = authenticationToken,
          OldEmailAddress = oldEmailAddress,
          NewEmailAddress = newEmailAddress,
        };
        
        await tmp78.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_updateBusinessUserIdentifier(CancellationToken cancellationToken = default)
      {
        
        var tmp79 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp79.Type == TMessageType.Exception)
        {
          var tmp80 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp80;
        }

        var tmp81 = new InternalStructs.updateBusinessUserIdentifier_result();
        await tmp81.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp81.__isset.userException)
        {
          throw tmp81.UserException;
        }
        if (tmp81.__isset.systemException)
        {
          throw tmp81.SystemException;
        }
        if (tmp81.__isset.notFoundException)
        {
          throw tmp81.NotFoundException;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.UserProfile>> listBusinessUsers(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listBusinessUsers(authenticationToken, cancellationToken);
        return await recv_listBusinessUsers(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listBusinessUsers(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listBusinessUsers", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp82 = new InternalStructs.listBusinessUsers_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp82.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.UserProfile>> recv_listBusinessUsers(CancellationToken cancellationToken = default)
      {
        
        var tmp83 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp83.Type == TMessageType.Exception)
        {
          var tmp84 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp84;
        }

        var tmp85 = new InternalStructs.listBusinessUsers_result();
        await tmp85.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp85.__isset.success)
        {
          return tmp85.Success;
        }
        if (tmp85.__isset.userException)
        {
          throw tmp85.UserException;
        }
        if (tmp85.__isset.systemException)
        {
          throw tmp85.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listBusinessUsers failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.BusinessInvitation>> listBusinessInvitations(string authenticationToken, bool includeRequestedInvitations, CancellationToken cancellationToken = default)
      {
        await send_listBusinessInvitations(authenticationToken, includeRequestedInvitations, cancellationToken);
        return await recv_listBusinessInvitations(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listBusinessInvitations(string authenticationToken, bool includeRequestedInvitations, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listBusinessInvitations", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp86 = new InternalStructs.listBusinessInvitations_args() {
          AuthenticationToken = authenticationToken,
          IncludeRequestedInvitations = includeRequestedInvitations,
        };
        
        await tmp86.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.BusinessInvitation>> recv_listBusinessInvitations(CancellationToken cancellationToken = default)
      {
        
        var tmp87 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp87.Type == TMessageType.Exception)
        {
          var tmp88 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp88;
        }

        var tmp89 = new InternalStructs.listBusinessInvitations_result();
        await tmp89.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp89.__isset.success)
        {
          return tmp89.Success;
        }
        if (tmp89.__isset.userException)
        {
          throw tmp89.UserException;
        }
        if (tmp89.__isset.systemException)
        {
          throw tmp89.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listBusinessInvitations failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.AccountLimits> getAccountLimits(global::Evernote.EDAM.Type.ServiceLevel serviceLevel, CancellationToken cancellationToken = default)
      {
        await send_getAccountLimits(serviceLevel, cancellationToken);
        return await recv_getAccountLimits(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getAccountLimits(global::Evernote.EDAM.Type.ServiceLevel serviceLevel, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAccountLimits", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp90 = new InternalStructs.getAccountLimits_args() {
          ServiceLevel = serviceLevel,
        };
        
        await tmp90.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.AccountLimits> recv_getAccountLimits(CancellationToken cancellationToken = default)
      {
        
        var tmp91 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp91.Type == TMessageType.Exception)
        {
          var tmp92 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp92;
        }

        var tmp93 = new InternalStructs.getAccountLimits_result();
        await tmp93.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp93.__isset.success)
        {
          return tmp93.Success;
        }
        if (tmp93.__isset.userException)
        {
          throw tmp93.UserException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAccountLimits failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["checkVersion"] = checkVersion_ProcessAsync;
        processMap_["getBootstrapInfo"] = getBootstrapInfo_ProcessAsync;
        processMap_["authenticateLongSession"] = authenticateLongSession_ProcessAsync;
        processMap_["completeTwoFactorAuthentication"] = completeTwoFactorAuthentication_ProcessAsync;
        processMap_["revokeLongSession"] = revokeLongSession_ProcessAsync;
        processMap_["authenticateToBusiness"] = authenticateToBusiness_ProcessAsync;
        processMap_["getUser"] = getUser_ProcessAsync;
        processMap_["getPublicUserInfo"] = getPublicUserInfo_ProcessAsync;
        processMap_["getUserUrls"] = getUserUrls_ProcessAsync;
        processMap_["inviteToBusiness"] = inviteToBusiness_ProcessAsync;
        processMap_["removeFromBusiness"] = removeFromBusiness_ProcessAsync;
        processMap_["updateBusinessUserIdentifier"] = updateBusinessUserIdentifier_ProcessAsync;
        processMap_["listBusinessUsers"] = listBusinessUsers_ProcessAsync;
        processMap_["listBusinessInvitations"] = listBusinessInvitations_ProcessAsync;
        processMap_["getAccountLimits"] = getAccountLimits_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task checkVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp94 = new InternalStructs.checkVersion_args();
        await tmp94.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp95 = new InternalStructs.checkVersion_result();
        try
        {
          tmp95.Success = await _iAsync.checkVersion(tmp94.ClientName, tmp94.EdamVersionMajor, tmp94.EdamVersionMinor, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("checkVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp95.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp96)
        {
          var tmp97 = $"Error occurred in {GetType().FullName}: {tmp96.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp96, tmp97);
          else
            Console.Error.WriteLine(tmp97);
          var tmp98 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("checkVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp98.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getBootstrapInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp99 = new InternalStructs.getBootstrapInfo_args();
        await tmp99.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp100 = new InternalStructs.getBootstrapInfo_result();
        try
        {
          tmp100.Success = await _iAsync.getBootstrapInfo(tmp99.Locale, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getBootstrapInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp100.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp101)
        {
          var tmp102 = $"Error occurred in {GetType().FullName}: {tmp101.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp101, tmp102);
          else
            Console.Error.WriteLine(tmp102);
          var tmp103 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getBootstrapInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp103.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task authenticateLongSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp104 = new InternalStructs.authenticateLongSession_args();
        await tmp104.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp105 = new InternalStructs.authenticateLongSession_result();
        try
        {
          try
          {
            tmp105.Success = await _iAsync.authenticateLongSession(tmp104.Username, tmp104.Password, tmp104.ConsumerKey, tmp104.ConsumerSecret, tmp104.DeviceIdentifier, tmp104.DeviceDescription, tmp104.SupportsTwoFactor, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp106)
          {
            tmp105.UserException = tmp106;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp107)
          {
            tmp105.SystemException = tmp107;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateLongSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp105.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp108)
        {
          var tmp109 = $"Error occurred in {GetType().FullName}: {tmp108.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp108, tmp109);
          else
            Console.Error.WriteLine(tmp109);
          var tmp110 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateLongSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp110.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task completeTwoFactorAuthentication_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp111 = new InternalStructs.completeTwoFactorAuthentication_args();
        await tmp111.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp112 = new InternalStructs.completeTwoFactorAuthentication_result();
        try
        {
          try
          {
            tmp112.Success = await _iAsync.completeTwoFactorAuthentication(tmp111.AuthenticationToken, tmp111.OneTimeCode, tmp111.DeviceIdentifier, tmp111.DeviceDescription, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp113)
          {
            tmp112.UserException = tmp113;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp114)
          {
            tmp112.SystemException = tmp114;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("completeTwoFactorAuthentication", TMessageType.Reply, seqid), cancellationToken); 
          await tmp112.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp115)
        {
          var tmp116 = $"Error occurred in {GetType().FullName}: {tmp115.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp115, tmp116);
          else
            Console.Error.WriteLine(tmp116);
          var tmp117 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("completeTwoFactorAuthentication", TMessageType.Exception, seqid), cancellationToken);
          await tmp117.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task revokeLongSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp118 = new InternalStructs.revokeLongSession_args();
        await tmp118.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp119 = new InternalStructs.revokeLongSession_result();
        try
        {
          try
          {
            await _iAsync.revokeLongSession(tmp118.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp120)
          {
            tmp119.UserException = tmp120;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp121)
          {
            tmp119.SystemException = tmp121;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("revokeLongSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp119.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp122)
        {
          var tmp123 = $"Error occurred in {GetType().FullName}: {tmp122.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp122, tmp123);
          else
            Console.Error.WriteLine(tmp123);
          var tmp124 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("revokeLongSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp124.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task authenticateToBusiness_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp125 = new InternalStructs.authenticateToBusiness_args();
        await tmp125.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp126 = new InternalStructs.authenticateToBusiness_result();
        try
        {
          try
          {
            tmp126.Success = await _iAsync.authenticateToBusiness(tmp125.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp127)
          {
            tmp126.UserException = tmp127;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp128)
          {
            tmp126.SystemException = tmp128;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToBusiness", TMessageType.Reply, seqid), cancellationToken); 
          await tmp126.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp129)
        {
          var tmp130 = $"Error occurred in {GetType().FullName}: {tmp129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp129, tmp130);
          else
            Console.Error.WriteLine(tmp130);
          var tmp131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToBusiness", TMessageType.Exception, seqid), cancellationToken);
          await tmp131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp132 = new InternalStructs.getUser_args();
        await tmp132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp133 = new InternalStructs.getUser_result();
        try
        {
          try
          {
            tmp133.Success = await _iAsync.getUser(tmp132.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp134)
          {
            tmp133.UserException = tmp134;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp135)
          {
            tmp133.SystemException = tmp135;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp136)
        {
          var tmp137 = $"Error occurred in {GetType().FullName}: {tmp136.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp136, tmp137);
          else
            Console.Error.WriteLine(tmp137);
          var tmp138 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp138.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getPublicUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp139 = new InternalStructs.getPublicUserInfo_args();
        await tmp139.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp140 = new InternalStructs.getPublicUserInfo_result();
        try
        {
          try
          {
            tmp140.Success = await _iAsync.getPublicUserInfo(tmp139.Username, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp141)
          {
            tmp140.NotFoundException = tmp141;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp142)
          {
            tmp140.SystemException = tmp142;
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp143)
          {
            tmp140.UserException = tmp143;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getPublicUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp140.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp144)
        {
          var tmp145 = $"Error occurred in {GetType().FullName}: {tmp144.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp144, tmp145);
          else
            Console.Error.WriteLine(tmp145);
          var tmp146 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getPublicUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp146.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getUserUrls_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp147 = new InternalStructs.getUserUrls_args();
        await tmp147.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp148 = new InternalStructs.getUserUrls_result();
        try
        {
          try
          {
            tmp148.Success = await _iAsync.getUserUrls(tmp147.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp149)
          {
            tmp148.UserException = tmp149;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp150)
          {
            tmp148.SystemException = tmp150;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getUserUrls", TMessageType.Reply, seqid), cancellationToken); 
          await tmp148.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp151)
        {
          var tmp152 = $"Error occurred in {GetType().FullName}: {tmp151.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp151, tmp152);
          else
            Console.Error.WriteLine(tmp152);
          var tmp153 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getUserUrls", TMessageType.Exception, seqid), cancellationToken);
          await tmp153.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task inviteToBusiness_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp154 = new InternalStructs.inviteToBusiness_args();
        await tmp154.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp155 = new InternalStructs.inviteToBusiness_result();
        try
        {
          try
          {
            await _iAsync.inviteToBusiness(tmp154.AuthenticationToken, tmp154.EmailAddress, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp156)
          {
            tmp155.UserException = tmp156;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp157)
          {
            tmp155.SystemException = tmp157;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("inviteToBusiness", TMessageType.Reply, seqid), cancellationToken); 
          await tmp155.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp158)
        {
          var tmp159 = $"Error occurred in {GetType().FullName}: {tmp158.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp158, tmp159);
          else
            Console.Error.WriteLine(tmp159);
          var tmp160 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("inviteToBusiness", TMessageType.Exception, seqid), cancellationToken);
          await tmp160.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeFromBusiness_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp161 = new InternalStructs.removeFromBusiness_args();
        await tmp161.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp162 = new InternalStructs.removeFromBusiness_result();
        try
        {
          try
          {
            await _iAsync.removeFromBusiness(tmp161.AuthenticationToken, tmp161.EmailAddress, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp163)
          {
            tmp162.UserException = tmp163;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp164)
          {
            tmp162.SystemException = tmp164;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp165)
          {
            tmp162.NotFoundException = tmp165;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("removeFromBusiness", TMessageType.Reply, seqid), cancellationToken); 
          await tmp162.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp166)
        {
          var tmp167 = $"Error occurred in {GetType().FullName}: {tmp166.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp166, tmp167);
          else
            Console.Error.WriteLine(tmp167);
          var tmp168 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeFromBusiness", TMessageType.Exception, seqid), cancellationToken);
          await tmp168.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateBusinessUserIdentifier_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp169 = new InternalStructs.updateBusinessUserIdentifier_args();
        await tmp169.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp170 = new InternalStructs.updateBusinessUserIdentifier_result();
        try
        {
          try
          {
            await _iAsync.updateBusinessUserIdentifier(tmp169.AuthenticationToken, tmp169.OldEmailAddress, tmp169.NewEmailAddress, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp171)
          {
            tmp170.UserException = tmp171;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp172)
          {
            tmp170.SystemException = tmp172;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp173)
          {
            tmp170.NotFoundException = tmp173;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateBusinessUserIdentifier", TMessageType.Reply, seqid), cancellationToken); 
          await tmp170.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp174)
        {
          var tmp175 = $"Error occurred in {GetType().FullName}: {tmp174.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp174, tmp175);
          else
            Console.Error.WriteLine(tmp175);
          var tmp176 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateBusinessUserIdentifier", TMessageType.Exception, seqid), cancellationToken);
          await tmp176.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listBusinessUsers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp177 = new InternalStructs.listBusinessUsers_args();
        await tmp177.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp178 = new InternalStructs.listBusinessUsers_result();
        try
        {
          try
          {
            tmp178.Success = await _iAsync.listBusinessUsers(tmp177.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp179)
          {
            tmp178.UserException = tmp179;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp180)
          {
            tmp178.SystemException = tmp180;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listBusinessUsers", TMessageType.Reply, seqid), cancellationToken); 
          await tmp178.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp181)
        {
          var tmp182 = $"Error occurred in {GetType().FullName}: {tmp181.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp181, tmp182);
          else
            Console.Error.WriteLine(tmp182);
          var tmp183 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listBusinessUsers", TMessageType.Exception, seqid), cancellationToken);
          await tmp183.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listBusinessInvitations_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp184 = new InternalStructs.listBusinessInvitations_args();
        await tmp184.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp185 = new InternalStructs.listBusinessInvitations_result();
        try
        {
          try
          {
            tmp185.Success = await _iAsync.listBusinessInvitations(tmp184.AuthenticationToken, tmp184.IncludeRequestedInvitations, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp186)
          {
            tmp185.UserException = tmp186;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp187)
          {
            tmp185.SystemException = tmp187;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listBusinessInvitations", TMessageType.Reply, seqid), cancellationToken); 
          await tmp185.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp188)
        {
          var tmp189 = $"Error occurred in {GetType().FullName}: {tmp188.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp188, tmp189);
          else
            Console.Error.WriteLine(tmp189);
          var tmp190 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listBusinessInvitations", TMessageType.Exception, seqid), cancellationToken);
          await tmp190.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getAccountLimits_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp191 = new InternalStructs.getAccountLimits_args();
        await tmp191.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp192 = new InternalStructs.getAccountLimits_result();
        try
        {
          try
          {
            tmp192.Success = await _iAsync.getAccountLimits(tmp191.ServiceLevel, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp193)
          {
            tmp192.UserException = tmp193;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getAccountLimits", TMessageType.Reply, seqid), cancellationToken); 
          await tmp192.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp194)
        {
          var tmp195 = $"Error occurred in {GetType().FullName}: {tmp194.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp194, tmp195);
          else
            Console.Error.WriteLine(tmp195);
          var tmp196 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getAccountLimits", TMessageType.Exception, seqid), cancellationToken);
          await tmp196.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class checkVersion_args : TBase
      {
        private string _clientName;
        private short _edamVersionMajor;
        private short _edamVersionMinor;

        public string ClientName
        {
          get
          {
            return _clientName;
          }
          set
          {
            __isset.clientName = true;
            this._clientName = value;
          }
        }

        public short EdamVersionMajor
        {
          get
          {
            return _edamVersionMajor;
          }
          set
          {
            __isset.edamVersionMajor = true;
            this._edamVersionMajor = value;
          }
        }

        public short EdamVersionMinor
        {
          get
          {
            return _edamVersionMinor;
          }
          set
          {
            __isset.edamVersionMinor = true;
            this._edamVersionMinor = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clientName;
          public bool edamVersionMajor;
          public bool edamVersionMinor;
        }

        public checkVersion_args()
        {
          this._edamVersionMajor = 1;
          this.__isset.edamVersionMajor = true;
          this._edamVersionMinor = 28;
          this.__isset.edamVersionMinor = true;
        }

        public checkVersion_args DeepCopy()
        {
          var tmp197 = new checkVersion_args();
          if((ClientName != null) && __isset.clientName)
          {
            tmp197.ClientName = this.ClientName;
          }
          tmp197.__isset.clientName = this.__isset.clientName;
          if(__isset.edamVersionMajor)
          {
            tmp197.EdamVersionMajor = this.EdamVersionMajor;
          }
          tmp197.__isset.edamVersionMajor = this.__isset.edamVersionMajor;
          if(__isset.edamVersionMinor)
          {
            tmp197.EdamVersionMinor = this.EdamVersionMinor;
          }
          tmp197.__isset.edamVersionMinor = this.__isset.edamVersionMinor;
          return tmp197;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClientName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I16)
                  {
                    EdamVersionMajor = await iprot.ReadI16Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I16)
                  {
                    EdamVersionMinor = await iprot.ReadI16Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp198 = new TStruct("checkVersion_args");
            await oprot.WriteStructBeginAsync(tmp198, cancellationToken);
            var tmp199 = new TField();
            if((ClientName != null) && __isset.clientName)
            {
              tmp199.Name = "clientName";
              tmp199.Type = TType.String;
              tmp199.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
              await oprot.WriteStringAsync(ClientName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.edamVersionMajor)
            {
              tmp199.Name = "edamVersionMajor";
              tmp199.Type = TType.I16;
              tmp199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
              await oprot.WriteI16Async(EdamVersionMajor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.edamVersionMinor)
            {
              tmp199.Name = "edamVersionMinor";
              tmp199.Type = TType.I16;
              tmp199.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
              await oprot.WriteI16Async(EdamVersionMinor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is checkVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clientName == other.__isset.clientName) && ((!__isset.clientName) || (global::System.Object.Equals(ClientName, other.ClientName))))
            && ((__isset.edamVersionMajor == other.__isset.edamVersionMajor) && ((!__isset.edamVersionMajor) || (global::System.Object.Equals(EdamVersionMajor, other.EdamVersionMajor))))
            && ((__isset.edamVersionMinor == other.__isset.edamVersionMinor) && ((!__isset.edamVersionMinor) || (global::System.Object.Equals(EdamVersionMinor, other.EdamVersionMinor))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClientName != null) && __isset.clientName)
            {
              hashcode = (hashcode * 397) + ClientName.GetHashCode();
            }
            if(__isset.edamVersionMajor)
            {
              hashcode = (hashcode * 397) + EdamVersionMajor.GetHashCode();
            }
            if(__isset.edamVersionMinor)
            {
              hashcode = (hashcode * 397) + EdamVersionMinor.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp200 = new StringBuilder("checkVersion_args(");
          int tmp201 = 0;
          if((ClientName != null) && __isset.clientName)
          {
            if(0 < tmp201++) { tmp200.Append(", "); }
            tmp200.Append("ClientName: ");
            ClientName.ToString(tmp200);
          }
          if(__isset.edamVersionMajor)
          {
            if(0 < tmp201++) { tmp200.Append(", "); }
            tmp200.Append("EdamVersionMajor: ");
            EdamVersionMajor.ToString(tmp200);
          }
          if(__isset.edamVersionMinor)
          {
            if(0 < tmp201++) { tmp200.Append(", "); }
            tmp200.Append("EdamVersionMinor: ");
            EdamVersionMinor.ToString(tmp200);
          }
          tmp200.Append(')');
          return tmp200.ToString();
        }
      }


      public partial class checkVersion_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public checkVersion_result()
        {
        }

        public checkVersion_result DeepCopy()
        {
          var tmp202 = new checkVersion_result();
          if(__isset.success)
          {
            tmp202.Success = this.Success;
          }
          tmp202.__isset.success = this.__isset.success;
          return tmp202;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp203 = new TStruct("checkVersion_result");
            await oprot.WriteStructBeginAsync(tmp203, cancellationToken);
            var tmp204 = new TField();

            if(this.__isset.success)
            {
              tmp204.Name = "Success";
              tmp204.Type = TType.Bool;
              tmp204.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp204, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is checkVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp205 = new StringBuilder("checkVersion_result(");
          int tmp206 = 0;
          if(__isset.success)
          {
            if(0 < tmp206++) { tmp205.Append(", "); }
            tmp205.Append("Success: ");
            Success.ToString(tmp205);
          }
          tmp205.Append(')');
          return tmp205.ToString();
        }
      }


      public partial class getBootstrapInfo_args : TBase
      {
        private string _locale;

        public string Locale
        {
          get
          {
            return _locale;
          }
          set
          {
            __isset.locale = true;
            this._locale = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool locale;
        }

        public getBootstrapInfo_args()
        {
        }

        public getBootstrapInfo_args DeepCopy()
        {
          var tmp207 = new getBootstrapInfo_args();
          if((Locale != null) && __isset.locale)
          {
            tmp207.Locale = this.Locale;
          }
          tmp207.__isset.locale = this.__isset.locale;
          return tmp207;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Locale = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp208 = new TStruct("getBootstrapInfo_args");
            await oprot.WriteStructBeginAsync(tmp208, cancellationToken);
            var tmp209 = new TField();
            if((Locale != null) && __isset.locale)
            {
              tmp209.Name = "locale";
              tmp209.Type = TType.String;
              tmp209.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp209, cancellationToken);
              await oprot.WriteStringAsync(Locale, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBootstrapInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.locale == other.__isset.locale) && ((!__isset.locale) || (global::System.Object.Equals(Locale, other.Locale))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Locale != null) && __isset.locale)
            {
              hashcode = (hashcode * 397) + Locale.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp210 = new StringBuilder("getBootstrapInfo_args(");
          int tmp211 = 0;
          if((Locale != null) && __isset.locale)
          {
            if(0 < tmp211++) { tmp210.Append(", "); }
            tmp210.Append("Locale: ");
            Locale.ToString(tmp210);
          }
          tmp210.Append(')');
          return tmp210.ToString();
        }
      }


      public partial class getBootstrapInfo_result : TBase
      {
        private global::Evernote.EDAM.UserStore.BootstrapInfo _success;

        public global::Evernote.EDAM.UserStore.BootstrapInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getBootstrapInfo_result()
        {
        }

        public getBootstrapInfo_result DeepCopy()
        {
          var tmp212 = new getBootstrapInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp212.Success = (global::Evernote.EDAM.UserStore.BootstrapInfo)this.Success.DeepCopy();
          }
          tmp212.__isset.success = this.__isset.success;
          return tmp212;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.BootstrapInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp213 = new TStruct("getBootstrapInfo_result");
            await oprot.WriteStructBeginAsync(tmp213, cancellationToken);
            var tmp214 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp214.Name = "Success";
                tmp214.Type = TType.Struct;
                tmp214.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBootstrapInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp215 = new StringBuilder("getBootstrapInfo_result(");
          int tmp216 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp216++) { tmp215.Append(", "); }
            tmp215.Append("Success: ");
            Success.ToString(tmp215);
          }
          tmp215.Append(')');
          return tmp215.ToString();
        }
      }


      public partial class authenticateLongSession_args : TBase
      {
        private string _username;
        private string _password;
        private string _consumerKey;
        private string _consumerSecret;
        private string _deviceIdentifier;
        private string _deviceDescription;
        private bool _supportsTwoFactor;

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.username = true;
            this._username = value;
          }
        }

        public string Password
        {
          get
          {
            return _password;
          }
          set
          {
            __isset.password = true;
            this._password = value;
          }
        }

        public string ConsumerKey
        {
          get
          {
            return _consumerKey;
          }
          set
          {
            __isset.consumerKey = true;
            this._consumerKey = value;
          }
        }

        public string ConsumerSecret
        {
          get
          {
            return _consumerSecret;
          }
          set
          {
            __isset.consumerSecret = true;
            this._consumerSecret = value;
          }
        }

        public string DeviceIdentifier
        {
          get
          {
            return _deviceIdentifier;
          }
          set
          {
            __isset.deviceIdentifier = true;
            this._deviceIdentifier = value;
          }
        }

        public string DeviceDescription
        {
          get
          {
            return _deviceDescription;
          }
          set
          {
            __isset.deviceDescription = true;
            this._deviceDescription = value;
          }
        }

        public bool SupportsTwoFactor
        {
          get
          {
            return _supportsTwoFactor;
          }
          set
          {
            __isset.supportsTwoFactor = true;
            this._supportsTwoFactor = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool username;
          public bool password;
          public bool consumerKey;
          public bool consumerSecret;
          public bool deviceIdentifier;
          public bool deviceDescription;
          public bool supportsTwoFactor;
        }

        public authenticateLongSession_args()
        {
        }

        public authenticateLongSession_args DeepCopy()
        {
          var tmp217 = new authenticateLongSession_args();
          if((Username != null) && __isset.username)
          {
            tmp217.Username = this.Username;
          }
          tmp217.__isset.username = this.__isset.username;
          if((Password != null) && __isset.password)
          {
            tmp217.Password = this.Password;
          }
          tmp217.__isset.password = this.__isset.password;
          if((ConsumerKey != null) && __isset.consumerKey)
          {
            tmp217.ConsumerKey = this.ConsumerKey;
          }
          tmp217.__isset.consumerKey = this.__isset.consumerKey;
          if((ConsumerSecret != null) && __isset.consumerSecret)
          {
            tmp217.ConsumerSecret = this.ConsumerSecret;
          }
          tmp217.__isset.consumerSecret = this.__isset.consumerSecret;
          if((DeviceIdentifier != null) && __isset.deviceIdentifier)
          {
            tmp217.DeviceIdentifier = this.DeviceIdentifier;
          }
          tmp217.__isset.deviceIdentifier = this.__isset.deviceIdentifier;
          if((DeviceDescription != null) && __isset.deviceDescription)
          {
            tmp217.DeviceDescription = this.DeviceDescription;
          }
          tmp217.__isset.deviceDescription = this.__isset.deviceDescription;
          if(__isset.supportsTwoFactor)
          {
            tmp217.SupportsTwoFactor = this.SupportsTwoFactor;
          }
          tmp217.__isset.supportsTwoFactor = this.__isset.supportsTwoFactor;
          return tmp217;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Password = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ConsumerKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    ConsumerSecret = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.String)
                  {
                    DeviceIdentifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.String)
                  {
                    DeviceDescription = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 7:
                  if (field.Type == TType.Bool)
                  {
                    SupportsTwoFactor = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp218 = new TStruct("authenticateLongSession_args");
            await oprot.WriteStructBeginAsync(tmp218, cancellationToken);
            var tmp219 = new TField();
            if((Username != null) && __isset.username)
            {
              tmp219.Name = "username";
              tmp219.Type = TType.String;
              tmp219.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Password != null) && __isset.password)
            {
              tmp219.Name = "password";
              tmp219.Type = TType.String;
              tmp219.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(Password, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ConsumerKey != null) && __isset.consumerKey)
            {
              tmp219.Name = "consumerKey";
              tmp219.Type = TType.String;
              tmp219.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(ConsumerKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ConsumerSecret != null) && __isset.consumerSecret)
            {
              tmp219.Name = "consumerSecret";
              tmp219.Type = TType.String;
              tmp219.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(ConsumerSecret, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((DeviceIdentifier != null) && __isset.deviceIdentifier)
            {
              tmp219.Name = "deviceIdentifier";
              tmp219.Type = TType.String;
              tmp219.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(DeviceIdentifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((DeviceDescription != null) && __isset.deviceDescription)
            {
              tmp219.Name = "deviceDescription";
              tmp219.Type = TType.String;
              tmp219.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteStringAsync(DeviceDescription, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.supportsTwoFactor)
            {
              tmp219.Name = "supportsTwoFactor";
              tmp219.Type = TType.Bool;
              tmp219.ID = 7;
              await oprot.WriteFieldBeginAsync(tmp219, cancellationToken);
              await oprot.WriteBoolAsync(SupportsTwoFactor, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateLongSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
            && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))))
            && ((__isset.consumerKey == other.__isset.consumerKey) && ((!__isset.consumerKey) || (global::System.Object.Equals(ConsumerKey, other.ConsumerKey))))
            && ((__isset.consumerSecret == other.__isset.consumerSecret) && ((!__isset.consumerSecret) || (global::System.Object.Equals(ConsumerSecret, other.ConsumerSecret))))
            && ((__isset.deviceIdentifier == other.__isset.deviceIdentifier) && ((!__isset.deviceIdentifier) || (global::System.Object.Equals(DeviceIdentifier, other.DeviceIdentifier))))
            && ((__isset.deviceDescription == other.__isset.deviceDescription) && ((!__isset.deviceDescription) || (global::System.Object.Equals(DeviceDescription, other.DeviceDescription))))
            && ((__isset.supportsTwoFactor == other.__isset.supportsTwoFactor) && ((!__isset.supportsTwoFactor) || (global::System.Object.Equals(SupportsTwoFactor, other.SupportsTwoFactor))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
            if((Password != null) && __isset.password)
            {
              hashcode = (hashcode * 397) + Password.GetHashCode();
            }
            if((ConsumerKey != null) && __isset.consumerKey)
            {
              hashcode = (hashcode * 397) + ConsumerKey.GetHashCode();
            }
            if((ConsumerSecret != null) && __isset.consumerSecret)
            {
              hashcode = (hashcode * 397) + ConsumerSecret.GetHashCode();
            }
            if((DeviceIdentifier != null) && __isset.deviceIdentifier)
            {
              hashcode = (hashcode * 397) + DeviceIdentifier.GetHashCode();
            }
            if((DeviceDescription != null) && __isset.deviceDescription)
            {
              hashcode = (hashcode * 397) + DeviceDescription.GetHashCode();
            }
            if(__isset.supportsTwoFactor)
            {
              hashcode = (hashcode * 397) + SupportsTwoFactor.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp220 = new StringBuilder("authenticateLongSession_args(");
          int tmp221 = 0;
          if((Username != null) && __isset.username)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("Username: ");
            Username.ToString(tmp220);
          }
          if((Password != null) && __isset.password)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("Password: ");
            Password.ToString(tmp220);
          }
          if((ConsumerKey != null) && __isset.consumerKey)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("ConsumerKey: ");
            ConsumerKey.ToString(tmp220);
          }
          if((ConsumerSecret != null) && __isset.consumerSecret)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("ConsumerSecret: ");
            ConsumerSecret.ToString(tmp220);
          }
          if((DeviceIdentifier != null) && __isset.deviceIdentifier)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("DeviceIdentifier: ");
            DeviceIdentifier.ToString(tmp220);
          }
          if((DeviceDescription != null) && __isset.deviceDescription)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("DeviceDescription: ");
            DeviceDescription.ToString(tmp220);
          }
          if(__isset.supportsTwoFactor)
          {
            if(0 < tmp221++) { tmp220.Append(", "); }
            tmp220.Append("SupportsTwoFactor: ");
            SupportsTwoFactor.ToString(tmp220);
          }
          tmp220.Append(')');
          return tmp220.ToString();
        }
      }


      public partial class authenticateLongSession_result : TBase
      {
        private global::Evernote.EDAM.UserStore.AuthenticationResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.AuthenticationResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public authenticateLongSession_result()
        {
        }

        public authenticateLongSession_result DeepCopy()
        {
          var tmp222 = new authenticateLongSession_result();
          if((Success != null) && __isset.success)
          {
            tmp222.Success = (global::Evernote.EDAM.UserStore.AuthenticationResult)this.Success.DeepCopy();
          }
          tmp222.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp222.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp222.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp222.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp222.__isset.systemException = this.__isset.systemException;
          return tmp222;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.AuthenticationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp223 = new TStruct("authenticateLongSession_result");
            await oprot.WriteStructBeginAsync(tmp223, cancellationToken);
            var tmp224 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp224.Name = "Success";
                tmp224.Type = TType.Struct;
                tmp224.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp224, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp224.Name = "UserException";
                tmp224.Type = TType.Struct;
                tmp224.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp224, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp224.Name = "SystemException";
                tmp224.Type = TType.Struct;
                tmp224.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp224, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateLongSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp225 = new StringBuilder("authenticateLongSession_result(");
          int tmp226 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp226++) { tmp225.Append(", "); }
            tmp225.Append("Success: ");
            Success.ToString(tmp225);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp226++) { tmp225.Append(", "); }
            tmp225.Append("UserException: ");
            UserException.ToString(tmp225);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp226++) { tmp225.Append(", "); }
            tmp225.Append("SystemException: ");
            SystemException.ToString(tmp225);
          }
          tmp225.Append(')');
          return tmp225.ToString();
        }
      }


      public partial class completeTwoFactorAuthentication_args : TBase
      {
        private string _authenticationToken;
        private string _oneTimeCode;
        private string _deviceIdentifier;
        private string _deviceDescription;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string OneTimeCode
        {
          get
          {
            return _oneTimeCode;
          }
          set
          {
            __isset.oneTimeCode = true;
            this._oneTimeCode = value;
          }
        }

        public string DeviceIdentifier
        {
          get
          {
            return _deviceIdentifier;
          }
          set
          {
            __isset.deviceIdentifier = true;
            this._deviceIdentifier = value;
          }
        }

        public string DeviceDescription
        {
          get
          {
            return _deviceDescription;
          }
          set
          {
            __isset.deviceDescription = true;
            this._deviceDescription = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool oneTimeCode;
          public bool deviceIdentifier;
          public bool deviceDescription;
        }

        public completeTwoFactorAuthentication_args()
        {
        }

        public completeTwoFactorAuthentication_args DeepCopy()
        {
          var tmp227 = new completeTwoFactorAuthentication_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp227.AuthenticationToken = this.AuthenticationToken;
          }
          tmp227.__isset.authenticationToken = this.__isset.authenticationToken;
          if((OneTimeCode != null) && __isset.oneTimeCode)
          {
            tmp227.OneTimeCode = this.OneTimeCode;
          }
          tmp227.__isset.oneTimeCode = this.__isset.oneTimeCode;
          if((DeviceIdentifier != null) && __isset.deviceIdentifier)
          {
            tmp227.DeviceIdentifier = this.DeviceIdentifier;
          }
          tmp227.__isset.deviceIdentifier = this.__isset.deviceIdentifier;
          if((DeviceDescription != null) && __isset.deviceDescription)
          {
            tmp227.DeviceDescription = this.DeviceDescription;
          }
          tmp227.__isset.deviceDescription = this.__isset.deviceDescription;
          return tmp227;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OneTimeCode = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    DeviceIdentifier = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    DeviceDescription = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp228 = new TStruct("completeTwoFactorAuthentication_args");
            await oprot.WriteStructBeginAsync(tmp228, cancellationToken);
            var tmp229 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp229.Name = "authenticationToken";
              tmp229.Type = TType.String;
              tmp229.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OneTimeCode != null) && __isset.oneTimeCode)
            {
              tmp229.Name = "oneTimeCode";
              tmp229.Type = TType.String;
              tmp229.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
              await oprot.WriteStringAsync(OneTimeCode, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((DeviceIdentifier != null) && __isset.deviceIdentifier)
            {
              tmp229.Name = "deviceIdentifier";
              tmp229.Type = TType.String;
              tmp229.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
              await oprot.WriteStringAsync(DeviceIdentifier, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((DeviceDescription != null) && __isset.deviceDescription)
            {
              tmp229.Name = "deviceDescription";
              tmp229.Type = TType.String;
              tmp229.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
              await oprot.WriteStringAsync(DeviceDescription, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is completeTwoFactorAuthentication_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.oneTimeCode == other.__isset.oneTimeCode) && ((!__isset.oneTimeCode) || (global::System.Object.Equals(OneTimeCode, other.OneTimeCode))))
            && ((__isset.deviceIdentifier == other.__isset.deviceIdentifier) && ((!__isset.deviceIdentifier) || (global::System.Object.Equals(DeviceIdentifier, other.DeviceIdentifier))))
            && ((__isset.deviceDescription == other.__isset.deviceDescription) && ((!__isset.deviceDescription) || (global::System.Object.Equals(DeviceDescription, other.DeviceDescription))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((OneTimeCode != null) && __isset.oneTimeCode)
            {
              hashcode = (hashcode * 397) + OneTimeCode.GetHashCode();
            }
            if((DeviceIdentifier != null) && __isset.deviceIdentifier)
            {
              hashcode = (hashcode * 397) + DeviceIdentifier.GetHashCode();
            }
            if((DeviceDescription != null) && __isset.deviceDescription)
            {
              hashcode = (hashcode * 397) + DeviceDescription.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp230 = new StringBuilder("completeTwoFactorAuthentication_args(");
          int tmp231 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp231++) { tmp230.Append(", "); }
            tmp230.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp230);
          }
          if((OneTimeCode != null) && __isset.oneTimeCode)
          {
            if(0 < tmp231++) { tmp230.Append(", "); }
            tmp230.Append("OneTimeCode: ");
            OneTimeCode.ToString(tmp230);
          }
          if((DeviceIdentifier != null) && __isset.deviceIdentifier)
          {
            if(0 < tmp231++) { tmp230.Append(", "); }
            tmp230.Append("DeviceIdentifier: ");
            DeviceIdentifier.ToString(tmp230);
          }
          if((DeviceDescription != null) && __isset.deviceDescription)
          {
            if(0 < tmp231++) { tmp230.Append(", "); }
            tmp230.Append("DeviceDescription: ");
            DeviceDescription.ToString(tmp230);
          }
          tmp230.Append(')');
          return tmp230.ToString();
        }
      }


      public partial class completeTwoFactorAuthentication_result : TBase
      {
        private global::Evernote.EDAM.UserStore.AuthenticationResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.AuthenticationResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public completeTwoFactorAuthentication_result()
        {
        }

        public completeTwoFactorAuthentication_result DeepCopy()
        {
          var tmp232 = new completeTwoFactorAuthentication_result();
          if((Success != null) && __isset.success)
          {
            tmp232.Success = (global::Evernote.EDAM.UserStore.AuthenticationResult)this.Success.DeepCopy();
          }
          tmp232.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp232.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp232.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp232.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp232.__isset.systemException = this.__isset.systemException;
          return tmp232;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.AuthenticationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp233 = new TStruct("completeTwoFactorAuthentication_result");
            await oprot.WriteStructBeginAsync(tmp233, cancellationToken);
            var tmp234 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp234.Name = "Success";
                tmp234.Type = TType.Struct;
                tmp234.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp234, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp234.Name = "UserException";
                tmp234.Type = TType.Struct;
                tmp234.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp234, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp234.Name = "SystemException";
                tmp234.Type = TType.Struct;
                tmp234.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp234, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is completeTwoFactorAuthentication_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp235 = new StringBuilder("completeTwoFactorAuthentication_result(");
          int tmp236 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp236++) { tmp235.Append(", "); }
            tmp235.Append("Success: ");
            Success.ToString(tmp235);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp236++) { tmp235.Append(", "); }
            tmp235.Append("UserException: ");
            UserException.ToString(tmp235);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp236++) { tmp235.Append(", "); }
            tmp235.Append("SystemException: ");
            SystemException.ToString(tmp235);
          }
          tmp235.Append(')');
          return tmp235.ToString();
        }
      }


      public partial class revokeLongSession_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public revokeLongSession_args()
        {
        }

        public revokeLongSession_args DeepCopy()
        {
          var tmp237 = new revokeLongSession_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp237.AuthenticationToken = this.AuthenticationToken;
          }
          tmp237.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp237;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp238 = new TStruct("revokeLongSession_args");
            await oprot.WriteStructBeginAsync(tmp238, cancellationToken);
            var tmp239 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp239.Name = "authenticationToken";
              tmp239.Type = TType.String;
              tmp239.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is revokeLongSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp240 = new StringBuilder("revokeLongSession_args(");
          int tmp241 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp241++) { tmp240.Append(", "); }
            tmp240.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp240);
          }
          tmp240.Append(')');
          return tmp240.ToString();
        }
      }


      public partial class revokeLongSession_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool systemException;
        }

        public revokeLongSession_result()
        {
        }

        public revokeLongSession_result DeepCopy()
        {
          var tmp242 = new revokeLongSession_result();
          if((UserException != null) && __isset.userException)
          {
            tmp242.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp242.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp242.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp242.__isset.systemException = this.__isset.systemException;
          return tmp242;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp243 = new TStruct("revokeLongSession_result");
            await oprot.WriteStructBeginAsync(tmp243, cancellationToken);
            var tmp244 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp244.Name = "UserException";
                tmp244.Type = TType.Struct;
                tmp244.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp244, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp244.Name = "SystemException";
                tmp244.Type = TType.Struct;
                tmp244.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp244, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is revokeLongSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp245 = new StringBuilder("revokeLongSession_result(");
          int tmp246 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp246++) { tmp245.Append(", "); }
            tmp245.Append("UserException: ");
            UserException.ToString(tmp245);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp246++) { tmp245.Append(", "); }
            tmp245.Append("SystemException: ");
            SystemException.ToString(tmp245);
          }
          tmp245.Append(')');
          return tmp245.ToString();
        }
      }


      public partial class authenticateToBusiness_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public authenticateToBusiness_args()
        {
        }

        public authenticateToBusiness_args DeepCopy()
        {
          var tmp247 = new authenticateToBusiness_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp247.AuthenticationToken = this.AuthenticationToken;
          }
          tmp247.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp247;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp248 = new TStruct("authenticateToBusiness_args");
            await oprot.WriteStructBeginAsync(tmp248, cancellationToken);
            var tmp249 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp249.Name = "authenticationToken";
              tmp249.Type = TType.String;
              tmp249.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp249, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToBusiness_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp250 = new StringBuilder("authenticateToBusiness_args(");
          int tmp251 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp251++) { tmp250.Append(", "); }
            tmp250.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp250);
          }
          tmp250.Append(')');
          return tmp250.ToString();
        }
      }


      public partial class authenticateToBusiness_result : TBase
      {
        private global::Evernote.EDAM.UserStore.AuthenticationResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.AuthenticationResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public authenticateToBusiness_result()
        {
        }

        public authenticateToBusiness_result DeepCopy()
        {
          var tmp252 = new authenticateToBusiness_result();
          if((Success != null) && __isset.success)
          {
            tmp252.Success = (global::Evernote.EDAM.UserStore.AuthenticationResult)this.Success.DeepCopy();
          }
          tmp252.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp252.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp252.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp252.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp252.__isset.systemException = this.__isset.systemException;
          return tmp252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.AuthenticationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp253 = new TStruct("authenticateToBusiness_result");
            await oprot.WriteStructBeginAsync(tmp253, cancellationToken);
            var tmp254 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp254.Name = "Success";
                tmp254.Type = TType.Struct;
                tmp254.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp254.Name = "UserException";
                tmp254.Type = TType.Struct;
                tmp254.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp254.Name = "SystemException";
                tmp254.Type = TType.Struct;
                tmp254.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToBusiness_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp255 = new StringBuilder("authenticateToBusiness_result(");
          int tmp256 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp256++) { tmp255.Append(", "); }
            tmp255.Append("Success: ");
            Success.ToString(tmp255);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp256++) { tmp255.Append(", "); }
            tmp255.Append("UserException: ");
            UserException.ToString(tmp255);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp256++) { tmp255.Append(", "); }
            tmp255.Append("SystemException: ");
            SystemException.ToString(tmp255);
          }
          tmp255.Append(')');
          return tmp255.ToString();
        }
      }


      public partial class getUser_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public getUser_args()
        {
        }

        public getUser_args DeepCopy()
        {
          var tmp257 = new getUser_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp257.AuthenticationToken = this.AuthenticationToken;
          }
          tmp257.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp258 = new TStruct("getUser_args");
            await oprot.WriteStructBeginAsync(tmp258, cancellationToken);
            var tmp259 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp259.Name = "authenticationToken";
              tmp259.Type = TType.String;
              tmp259.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp259, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp260 = new StringBuilder("getUser_args(");
          int tmp261 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp261++) { tmp260.Append(", "); }
            tmp260.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp260);
          }
          tmp260.Append(')');
          return tmp260.ToString();
        }
      }


      public partial class getUser_result : TBase
      {
        private global::Evernote.EDAM.Type.User _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.User Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public getUser_result()
        {
        }

        public getUser_result DeepCopy()
        {
          var tmp262 = new getUser_result();
          if((Success != null) && __isset.success)
          {
            tmp262.Success = (global::Evernote.EDAM.Type.User)this.Success.DeepCopy();
          }
          tmp262.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp262.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp262.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp262.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp262.__isset.systemException = this.__isset.systemException;
          return tmp262;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.User();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp263 = new TStruct("getUser_result");
            await oprot.WriteStructBeginAsync(tmp263, cancellationToken);
            var tmp264 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp264.Name = "Success";
                tmp264.Type = TType.Struct;
                tmp264.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp264, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp264.Name = "UserException";
                tmp264.Type = TType.Struct;
                tmp264.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp264, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp264.Name = "SystemException";
                tmp264.Type = TType.Struct;
                tmp264.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp264, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp265 = new StringBuilder("getUser_result(");
          int tmp266 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp266++) { tmp265.Append(", "); }
            tmp265.Append("Success: ");
            Success.ToString(tmp265);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp266++) { tmp265.Append(", "); }
            tmp265.Append("UserException: ");
            UserException.ToString(tmp265);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp266++) { tmp265.Append(", "); }
            tmp265.Append("SystemException: ");
            SystemException.ToString(tmp265);
          }
          tmp265.Append(')');
          return tmp265.ToString();
        }
      }


      public partial class getPublicUserInfo_args : TBase
      {
        private string _username;

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.username = true;
            this._username = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool username;
        }

        public getPublicUserInfo_args()
        {
        }

        public getPublicUserInfo_args DeepCopy()
        {
          var tmp267 = new getPublicUserInfo_args();
          if((Username != null) && __isset.username)
          {
            tmp267.Username = this.Username;
          }
          tmp267.__isset.username = this.__isset.username;
          return tmp267;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp268 = new TStruct("getPublicUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp268, cancellationToken);
            var tmp269 = new TField();
            if((Username != null) && __isset.username)
            {
              tmp269.Name = "username";
              tmp269.Type = TType.String;
              tmp269.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPublicUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp270 = new StringBuilder("getPublicUserInfo_args(");
          int tmp271 = 0;
          if((Username != null) && __isset.username)
          {
            if(0 < tmp271++) { tmp270.Append(", "); }
            tmp270.Append("Username: ");
            Username.ToString(tmp270);
          }
          tmp270.Append(')');
          return tmp270.ToString();
        }
      }


      public partial class getPublicUserInfo_result : TBase
      {
        private global::Evernote.EDAM.UserStore.PublicUserInfo _success;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;

        public global::Evernote.EDAM.UserStore.PublicUserInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool notFoundException;
          public bool systemException;
          public bool userException;
        }

        public getPublicUserInfo_result()
        {
        }

        public getPublicUserInfo_result DeepCopy()
        {
          var tmp272 = new getPublicUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp272.Success = (global::Evernote.EDAM.UserStore.PublicUserInfo)this.Success.DeepCopy();
          }
          tmp272.__isset.success = this.__isset.success;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp272.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp272.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp272.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp272.__isset.systemException = this.__isset.systemException;
          if((UserException != null) && __isset.userException)
          {
            tmp272.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp272.__isset.userException = this.__isset.userException;
          return tmp272;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.PublicUserInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp273 = new TStruct("getPublicUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp273, cancellationToken);
            var tmp274 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp274.Name = "Success";
                tmp274.Type = TType.Struct;
                tmp274.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp274.Name = "NotFoundException";
                tmp274.Type = TType.Struct;
                tmp274.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp274.Name = "SystemException";
                tmp274.Type = TType.Struct;
                tmp274.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp274.Name = "UserException";
                tmp274.Type = TType.Struct;
                tmp274.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPublicUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp275 = new StringBuilder("getPublicUserInfo_result(");
          int tmp276 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("Success: ");
            Success.ToString(tmp275);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("NotFoundException: ");
            NotFoundException.ToString(tmp275);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("SystemException: ");
            SystemException.ToString(tmp275);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("UserException: ");
            UserException.ToString(tmp275);
          }
          tmp275.Append(')');
          return tmp275.ToString();
        }
      }


      public partial class getUserUrls_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public getUserUrls_args()
        {
        }

        public getUserUrls_args DeepCopy()
        {
          var tmp277 = new getUserUrls_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp277.AuthenticationToken = this.AuthenticationToken;
          }
          tmp277.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp277;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp278 = new TStruct("getUserUrls_args");
            await oprot.WriteStructBeginAsync(tmp278, cancellationToken);
            var tmp279 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp279.Name = "authenticationToken";
              tmp279.Type = TType.String;
              tmp279.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserUrls_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp280 = new StringBuilder("getUserUrls_args(");
          int tmp281 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp281++) { tmp280.Append(", "); }
            tmp280.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp280);
          }
          tmp280.Append(')');
          return tmp280.ToString();
        }
      }


      public partial class getUserUrls_result : TBase
      {
        private global::Evernote.EDAM.UserStore.UserUrls _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.UserUrls Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public getUserUrls_result()
        {
        }

        public getUserUrls_result DeepCopy()
        {
          var tmp282 = new getUserUrls_result();
          if((Success != null) && __isset.success)
          {
            tmp282.Success = (global::Evernote.EDAM.UserStore.UserUrls)this.Success.DeepCopy();
          }
          tmp282.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp282.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp282.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp282.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp282.__isset.systemException = this.__isset.systemException;
          return tmp282;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.UserUrls();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp283 = new TStruct("getUserUrls_result");
            await oprot.WriteStructBeginAsync(tmp283, cancellationToken);
            var tmp284 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp284.Name = "Success";
                tmp284.Type = TType.Struct;
                tmp284.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp284.Name = "UserException";
                tmp284.Type = TType.Struct;
                tmp284.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp284.Name = "SystemException";
                tmp284.Type = TType.Struct;
                tmp284.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserUrls_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp285 = new StringBuilder("getUserUrls_result(");
          int tmp286 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp286++) { tmp285.Append(", "); }
            tmp285.Append("Success: ");
            Success.ToString(tmp285);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp286++) { tmp285.Append(", "); }
            tmp285.Append("UserException: ");
            UserException.ToString(tmp285);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp286++) { tmp285.Append(", "); }
            tmp285.Append("SystemException: ");
            SystemException.ToString(tmp285);
          }
          tmp285.Append(')');
          return tmp285.ToString();
        }
      }


      public partial class inviteToBusiness_args : TBase
      {
        private string _authenticationToken;
        private string _emailAddress;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string EmailAddress
        {
          get
          {
            return _emailAddress;
          }
          set
          {
            __isset.emailAddress = true;
            this._emailAddress = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool emailAddress;
        }

        public inviteToBusiness_args()
        {
        }

        public inviteToBusiness_args DeepCopy()
        {
          var tmp287 = new inviteToBusiness_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp287.AuthenticationToken = this.AuthenticationToken;
          }
          tmp287.__isset.authenticationToken = this.__isset.authenticationToken;
          if((EmailAddress != null) && __isset.emailAddress)
          {
            tmp287.EmailAddress = this.EmailAddress;
          }
          tmp287.__isset.emailAddress = this.__isset.emailAddress;
          return tmp287;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    EmailAddress = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp288 = new TStruct("inviteToBusiness_args");
            await oprot.WriteStructBeginAsync(tmp288, cancellationToken);
            var tmp289 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp289.Name = "authenticationToken";
              tmp289.Type = TType.String;
              tmp289.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((EmailAddress != null) && __isset.emailAddress)
            {
              tmp289.Name = "emailAddress";
              tmp289.Type = TType.String;
              tmp289.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
              await oprot.WriteStringAsync(EmailAddress, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inviteToBusiness_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.emailAddress == other.__isset.emailAddress) && ((!__isset.emailAddress) || (global::System.Object.Equals(EmailAddress, other.EmailAddress))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((EmailAddress != null) && __isset.emailAddress)
            {
              hashcode = (hashcode * 397) + EmailAddress.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp290 = new StringBuilder("inviteToBusiness_args(");
          int tmp291 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp291++) { tmp290.Append(", "); }
            tmp290.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp290);
          }
          if((EmailAddress != null) && __isset.emailAddress)
          {
            if(0 < tmp291++) { tmp290.Append(", "); }
            tmp290.Append("EmailAddress: ");
            EmailAddress.ToString(tmp290);
          }
          tmp290.Append(')');
          return tmp290.ToString();
        }
      }


      public partial class inviteToBusiness_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool systemException;
        }

        public inviteToBusiness_result()
        {
        }

        public inviteToBusiness_result DeepCopy()
        {
          var tmp292 = new inviteToBusiness_result();
          if((UserException != null) && __isset.userException)
          {
            tmp292.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp292.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp292.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp292.__isset.systemException = this.__isset.systemException;
          return tmp292;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp293 = new TStruct("inviteToBusiness_result");
            await oprot.WriteStructBeginAsync(tmp293, cancellationToken);
            var tmp294 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp294.Name = "UserException";
                tmp294.Type = TType.Struct;
                tmp294.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp294.Name = "SystemException";
                tmp294.Type = TType.Struct;
                tmp294.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is inviteToBusiness_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp295 = new StringBuilder("inviteToBusiness_result(");
          int tmp296 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp296++) { tmp295.Append(", "); }
            tmp295.Append("UserException: ");
            UserException.ToString(tmp295);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp296++) { tmp295.Append(", "); }
            tmp295.Append("SystemException: ");
            SystemException.ToString(tmp295);
          }
          tmp295.Append(')');
          return tmp295.ToString();
        }
      }


      public partial class removeFromBusiness_args : TBase
      {
        private string _authenticationToken;
        private string _emailAddress;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string EmailAddress
        {
          get
          {
            return _emailAddress;
          }
          set
          {
            __isset.emailAddress = true;
            this._emailAddress = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool emailAddress;
        }

        public removeFromBusiness_args()
        {
        }

        public removeFromBusiness_args DeepCopy()
        {
          var tmp297 = new removeFromBusiness_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp297.AuthenticationToken = this.AuthenticationToken;
          }
          tmp297.__isset.authenticationToken = this.__isset.authenticationToken;
          if((EmailAddress != null) && __isset.emailAddress)
          {
            tmp297.EmailAddress = this.EmailAddress;
          }
          tmp297.__isset.emailAddress = this.__isset.emailAddress;
          return tmp297;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    EmailAddress = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp298 = new TStruct("removeFromBusiness_args");
            await oprot.WriteStructBeginAsync(tmp298, cancellationToken);
            var tmp299 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp299.Name = "authenticationToken";
              tmp299.Type = TType.String;
              tmp299.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((EmailAddress != null) && __isset.emailAddress)
            {
              tmp299.Name = "emailAddress";
              tmp299.Type = TType.String;
              tmp299.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
              await oprot.WriteStringAsync(EmailAddress, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeFromBusiness_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.emailAddress == other.__isset.emailAddress) && ((!__isset.emailAddress) || (global::System.Object.Equals(EmailAddress, other.EmailAddress))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((EmailAddress != null) && __isset.emailAddress)
            {
              hashcode = (hashcode * 397) + EmailAddress.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp300 = new StringBuilder("removeFromBusiness_args(");
          int tmp301 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp301++) { tmp300.Append(", "); }
            tmp300.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp300);
          }
          if((EmailAddress != null) && __isset.emailAddress)
          {
            if(0 < tmp301++) { tmp300.Append(", "); }
            tmp300.Append("EmailAddress: ");
            EmailAddress.ToString(tmp300);
          }
          tmp300.Append(')');
          return tmp300.ToString();
        }
      }


      public partial class removeFromBusiness_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public removeFromBusiness_result()
        {
        }

        public removeFromBusiness_result DeepCopy()
        {
          var tmp302 = new removeFromBusiness_result();
          if((UserException != null) && __isset.userException)
          {
            tmp302.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp302.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp302.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp302.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp302.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp302.__isset.notFoundException = this.__isset.notFoundException;
          return tmp302;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp303 = new TStruct("removeFromBusiness_result");
            await oprot.WriteStructBeginAsync(tmp303, cancellationToken);
            var tmp304 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp304.Name = "UserException";
                tmp304.Type = TType.Struct;
                tmp304.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp304.Name = "SystemException";
                tmp304.Type = TType.Struct;
                tmp304.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp304.Name = "NotFoundException";
                tmp304.Type = TType.Struct;
                tmp304.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeFromBusiness_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp305 = new StringBuilder("removeFromBusiness_result(");
          int tmp306 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("UserException: ");
            UserException.ToString(tmp305);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("SystemException: ");
            SystemException.ToString(tmp305);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("NotFoundException: ");
            NotFoundException.ToString(tmp305);
          }
          tmp305.Append(')');
          return tmp305.ToString();
        }
      }


      public partial class updateBusinessUserIdentifier_args : TBase
      {
        private string _authenticationToken;
        private string _oldEmailAddress;
        private string _newEmailAddress;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string OldEmailAddress
        {
          get
          {
            return _oldEmailAddress;
          }
          set
          {
            __isset.oldEmailAddress = true;
            this._oldEmailAddress = value;
          }
        }

        public string NewEmailAddress
        {
          get
          {
            return _newEmailAddress;
          }
          set
          {
            __isset.newEmailAddress = true;
            this._newEmailAddress = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool oldEmailAddress;
          public bool newEmailAddress;
        }

        public updateBusinessUserIdentifier_args()
        {
        }

        public updateBusinessUserIdentifier_args DeepCopy()
        {
          var tmp307 = new updateBusinessUserIdentifier_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp307.AuthenticationToken = this.AuthenticationToken;
          }
          tmp307.__isset.authenticationToken = this.__isset.authenticationToken;
          if((OldEmailAddress != null) && __isset.oldEmailAddress)
          {
            tmp307.OldEmailAddress = this.OldEmailAddress;
          }
          tmp307.__isset.oldEmailAddress = this.__isset.oldEmailAddress;
          if((NewEmailAddress != null) && __isset.newEmailAddress)
          {
            tmp307.NewEmailAddress = this.NewEmailAddress;
          }
          tmp307.__isset.newEmailAddress = this.__isset.newEmailAddress;
          return tmp307;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    OldEmailAddress = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NewEmailAddress = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp308 = new TStruct("updateBusinessUserIdentifier_args");
            await oprot.WriteStructBeginAsync(tmp308, cancellationToken);
            var tmp309 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp309.Name = "authenticationToken";
              tmp309.Type = TType.String;
              tmp309.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((OldEmailAddress != null) && __isset.oldEmailAddress)
            {
              tmp309.Name = "oldEmailAddress";
              tmp309.Type = TType.String;
              tmp309.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
              await oprot.WriteStringAsync(OldEmailAddress, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NewEmailAddress != null) && __isset.newEmailAddress)
            {
              tmp309.Name = "newEmailAddress";
              tmp309.Type = TType.String;
              tmp309.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
              await oprot.WriteStringAsync(NewEmailAddress, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateBusinessUserIdentifier_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.oldEmailAddress == other.__isset.oldEmailAddress) && ((!__isset.oldEmailAddress) || (global::System.Object.Equals(OldEmailAddress, other.OldEmailAddress))))
            && ((__isset.newEmailAddress == other.__isset.newEmailAddress) && ((!__isset.newEmailAddress) || (global::System.Object.Equals(NewEmailAddress, other.NewEmailAddress))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((OldEmailAddress != null) && __isset.oldEmailAddress)
            {
              hashcode = (hashcode * 397) + OldEmailAddress.GetHashCode();
            }
            if((NewEmailAddress != null) && __isset.newEmailAddress)
            {
              hashcode = (hashcode * 397) + NewEmailAddress.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp310 = new StringBuilder("updateBusinessUserIdentifier_args(");
          int tmp311 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp311++) { tmp310.Append(", "); }
            tmp310.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp310);
          }
          if((OldEmailAddress != null) && __isset.oldEmailAddress)
          {
            if(0 < tmp311++) { tmp310.Append(", "); }
            tmp310.Append("OldEmailAddress: ");
            OldEmailAddress.ToString(tmp310);
          }
          if((NewEmailAddress != null) && __isset.newEmailAddress)
          {
            if(0 < tmp311++) { tmp310.Append(", "); }
            tmp310.Append("NewEmailAddress: ");
            NewEmailAddress.ToString(tmp310);
          }
          tmp310.Append(')');
          return tmp310.ToString();
        }
      }


      public partial class updateBusinessUserIdentifier_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateBusinessUserIdentifier_result()
        {
        }

        public updateBusinessUserIdentifier_result DeepCopy()
        {
          var tmp312 = new updateBusinessUserIdentifier_result();
          if((UserException != null) && __isset.userException)
          {
            tmp312.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp312.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp312.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp312.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp312.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp312.__isset.notFoundException = this.__isset.notFoundException;
          return tmp312;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp313 = new TStruct("updateBusinessUserIdentifier_result");
            await oprot.WriteStructBeginAsync(tmp313, cancellationToken);
            var tmp314 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp314.Name = "UserException";
                tmp314.Type = TType.Struct;
                tmp314.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp314, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp314.Name = "SystemException";
                tmp314.Type = TType.Struct;
                tmp314.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp314, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp314.Name = "NotFoundException";
                tmp314.Type = TType.Struct;
                tmp314.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp314, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateBusinessUserIdentifier_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp315 = new StringBuilder("updateBusinessUserIdentifier_result(");
          int tmp316 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp316++) { tmp315.Append(", "); }
            tmp315.Append("UserException: ");
            UserException.ToString(tmp315);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp316++) { tmp315.Append(", "); }
            tmp315.Append("SystemException: ");
            SystemException.ToString(tmp315);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp316++) { tmp315.Append(", "); }
            tmp315.Append("NotFoundException: ");
            NotFoundException.ToString(tmp315);
          }
          tmp315.Append(')');
          return tmp315.ToString();
        }
      }


      public partial class listBusinessUsers_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listBusinessUsers_args()
        {
        }

        public listBusinessUsers_args DeepCopy()
        {
          var tmp317 = new listBusinessUsers_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp317.AuthenticationToken = this.AuthenticationToken;
          }
          tmp317.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp317;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp318 = new TStruct("listBusinessUsers_args");
            await oprot.WriteStructBeginAsync(tmp318, cancellationToken);
            var tmp319 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp319.Name = "authenticationToken";
              tmp319.Type = TType.String;
              tmp319.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp319, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBusinessUsers_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp320 = new StringBuilder("listBusinessUsers_args(");
          int tmp321 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp321++) { tmp320.Append(", "); }
            tmp320.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp320);
          }
          tmp320.Append(')');
          return tmp320.ToString();
        }
      }


      public partial class listBusinessUsers_result : TBase
      {
        private List<global::Evernote.EDAM.Type.UserProfile> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.UserProfile> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listBusinessUsers_result()
        {
        }

        public listBusinessUsers_result DeepCopy()
        {
          var tmp322 = new listBusinessUsers_result();
          if((Success != null) && __isset.success)
          {
            tmp322.Success = this.Success.DeepCopy();
          }
          tmp322.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp322.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp322.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp322.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp322.__isset.systemException = this.__isset.systemException;
          return tmp322;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list323 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.UserProfile>(_list323.Count);
                      for(int _i324 = 0; _i324 < _list323.Count; ++_i324)
                      {
                        global::Evernote.EDAM.Type.UserProfile _elem325;
                        _elem325 = new global::Evernote.EDAM.Type.UserProfile();
                        await _elem325.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem325);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp326 = new TStruct("listBusinessUsers_result");
            await oprot.WriteStructBeginAsync(tmp326, cancellationToken);
            var tmp327 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp327.Name = "Success";
                tmp327.Type = TType.List;
                tmp327.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.UserProfile _iter328 in Success)
                  {
                    await _iter328.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp327.Name = "UserException";
                tmp327.Type = TType.Struct;
                tmp327.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp327.Name = "SystemException";
                tmp327.Type = TType.Struct;
                tmp327.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBusinessUsers_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp329 = new StringBuilder("listBusinessUsers_result(");
          int tmp330 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp330++) { tmp329.Append(", "); }
            tmp329.Append("Success: ");
            Success.ToString(tmp329);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp330++) { tmp329.Append(", "); }
            tmp329.Append("UserException: ");
            UserException.ToString(tmp329);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp330++) { tmp329.Append(", "); }
            tmp329.Append("SystemException: ");
            SystemException.ToString(tmp329);
          }
          tmp329.Append(')');
          return tmp329.ToString();
        }
      }


      public partial class listBusinessInvitations_args : TBase
      {
        private string _authenticationToken;
        private bool _includeRequestedInvitations;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public bool IncludeRequestedInvitations
        {
          get
          {
            return _includeRequestedInvitations;
          }
          set
          {
            __isset.includeRequestedInvitations = true;
            this._includeRequestedInvitations = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool includeRequestedInvitations;
        }

        public listBusinessInvitations_args()
        {
        }

        public listBusinessInvitations_args DeepCopy()
        {
          var tmp331 = new listBusinessInvitations_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp331.AuthenticationToken = this.AuthenticationToken;
          }
          tmp331.__isset.authenticationToken = this.__isset.authenticationToken;
          if(__isset.includeRequestedInvitations)
          {
            tmp331.IncludeRequestedInvitations = this.IncludeRequestedInvitations;
          }
          tmp331.__isset.includeRequestedInvitations = this.__isset.includeRequestedInvitations;
          return tmp331;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Bool)
                  {
                    IncludeRequestedInvitations = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp332 = new TStruct("listBusinessInvitations_args");
            await oprot.WriteStructBeginAsync(tmp332, cancellationToken);
            var tmp333 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp333.Name = "authenticationToken";
              tmp333.Type = TType.String;
              tmp333.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.includeRequestedInvitations)
            {
              tmp333.Name = "includeRequestedInvitations";
              tmp333.Type = TType.Bool;
              tmp333.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
              await oprot.WriteBoolAsync(IncludeRequestedInvitations, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBusinessInvitations_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.includeRequestedInvitations == other.__isset.includeRequestedInvitations) && ((!__isset.includeRequestedInvitations) || (global::System.Object.Equals(IncludeRequestedInvitations, other.IncludeRequestedInvitations))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if(__isset.includeRequestedInvitations)
            {
              hashcode = (hashcode * 397) + IncludeRequestedInvitations.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp334 = new StringBuilder("listBusinessInvitations_args(");
          int tmp335 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp335++) { tmp334.Append(", "); }
            tmp334.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp334);
          }
          if(__isset.includeRequestedInvitations)
          {
            if(0 < tmp335++) { tmp334.Append(", "); }
            tmp334.Append("IncludeRequestedInvitations: ");
            IncludeRequestedInvitations.ToString(tmp334);
          }
          tmp334.Append(')');
          return tmp334.ToString();
        }
      }


      public partial class listBusinessInvitations_result : TBase
      {
        private List<global::Evernote.EDAM.Type.BusinessInvitation> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.BusinessInvitation> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listBusinessInvitations_result()
        {
        }

        public listBusinessInvitations_result DeepCopy()
        {
          var tmp336 = new listBusinessInvitations_result();
          if((Success != null) && __isset.success)
          {
            tmp336.Success = this.Success.DeepCopy();
          }
          tmp336.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp336.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp336.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp336.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp336.__isset.systemException = this.__isset.systemException;
          return tmp336;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list337 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.BusinessInvitation>(_list337.Count);
                      for(int _i338 = 0; _i338 < _list337.Count; ++_i338)
                      {
                        global::Evernote.EDAM.Type.BusinessInvitation _elem339;
                        _elem339 = new global::Evernote.EDAM.Type.BusinessInvitation();
                        await _elem339.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem339);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp340 = new TStruct("listBusinessInvitations_result");
            await oprot.WriteStructBeginAsync(tmp340, cancellationToken);
            var tmp341 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp341.Name = "Success";
                tmp341.Type = TType.List;
                tmp341.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.BusinessInvitation _iter342 in Success)
                  {
                    await _iter342.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp341.Name = "UserException";
                tmp341.Type = TType.Struct;
                tmp341.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp341.Name = "SystemException";
                tmp341.Type = TType.Struct;
                tmp341.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBusinessInvitations_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp343 = new StringBuilder("listBusinessInvitations_result(");
          int tmp344 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("Success: ");
            Success.ToString(tmp343);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("UserException: ");
            UserException.ToString(tmp343);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("SystemException: ");
            SystemException.ToString(tmp343);
          }
          tmp343.Append(')');
          return tmp343.ToString();
        }
      }


      public partial class getAccountLimits_args : TBase
      {
        private global::Evernote.EDAM.Type.ServiceLevel _serviceLevel;

        /// <summary>
        /// 
        /// <seealso cref="global::Evernote.EDAM.Type.ServiceLevel"/>
        /// </summary>
        public global::Evernote.EDAM.Type.ServiceLevel ServiceLevel
        {
          get
          {
            return _serviceLevel;
          }
          set
          {
            __isset.serviceLevel = true;
            this._serviceLevel = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool serviceLevel;
        }

        public getAccountLimits_args()
        {
        }

        public getAccountLimits_args DeepCopy()
        {
          var tmp345 = new getAccountLimits_args();
          if(__isset.serviceLevel)
          {
            tmp345.ServiceLevel = this.ServiceLevel;
          }
          tmp345.__isset.serviceLevel = this.__isset.serviceLevel;
          return tmp345;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ServiceLevel = (global::Evernote.EDAM.Type.ServiceLevel)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp346 = new TStruct("getAccountLimits_args");
            await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
            var tmp347 = new TField();
            if(__isset.serviceLevel)
            {
              tmp347.Name = "serviceLevel";
              tmp347.Type = TType.I32;
              tmp347.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
              await oprot.WriteI32Async((int)ServiceLevel, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getAccountLimits_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.serviceLevel == other.__isset.serviceLevel) && ((!__isset.serviceLevel) || (global::System.Object.Equals(ServiceLevel, other.ServiceLevel))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.serviceLevel)
            {
              hashcode = (hashcode * 397) + ServiceLevel.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp348 = new StringBuilder("getAccountLimits_args(");
          int tmp349 = 0;
          if(__isset.serviceLevel)
          {
            if(0 < tmp349++) { tmp348.Append(", "); }
            tmp348.Append("ServiceLevel: ");
            ServiceLevel.ToString(tmp348);
          }
          tmp348.Append(')');
          return tmp348.ToString();
        }
      }


      public partial class getAccountLimits_result : TBase
      {
        private global::Evernote.EDAM.Type.AccountLimits _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;

        public global::Evernote.EDAM.Type.AccountLimits Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
        }

        public getAccountLimits_result()
        {
        }

        public getAccountLimits_result DeepCopy()
        {
          var tmp350 = new getAccountLimits_result();
          if((Success != null) && __isset.success)
          {
            tmp350.Success = (global::Evernote.EDAM.Type.AccountLimits)this.Success.DeepCopy();
          }
          tmp350.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp350.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp350.__isset.userException = this.__isset.userException;
          return tmp350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.AccountLimits();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp351 = new TStruct("getAccountLimits_result");
            await oprot.WriteStructBeginAsync(tmp351, cancellationToken);
            var tmp352 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp352.Name = "Success";
                tmp352.Type = TType.Struct;
                tmp352.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp352, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp352.Name = "UserException";
                tmp352.Type = TType.Struct;
                tmp352.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp352, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getAccountLimits_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp353 = new StringBuilder("getAccountLimits_result(");
          int tmp354 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp354++) { tmp353.Append(", "); }
            tmp353.Append("Success: ");
            Success.ToString(tmp353);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp354++) { tmp353.Append(", "); }
            tmp353.Append("UserException: ");
            UserException.ToString(tmp353);
          }
          tmp353.Append(')');
          return tmp353.ToString();
        }
      }

    }

  }
}

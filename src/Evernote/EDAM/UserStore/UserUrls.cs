/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  /// <dl>
  /// <dt>noteStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make
  ///   NoteStore requests to the server shard that contains that user's data.
  ///   I.e. this is the URL that should be used to create the Thrift HTTP client
  ///   transport to send messages to the NoteStore service for the account.
  ///   </dd>
  /// <dt>webApiUrlPrefix:</dt>
  ///   <dd>
  ///   This field will contain the initial part of the URLs that should be used
  ///   to make requests to Evernote's thin client "web API", which provide
  ///   optimized operations for clients that aren't capable of manipulating
  ///   the full contents of accounts via the full Thrift data model. Clients
  ///   should concatenate the relative path for the various servlets onto the
  ///   end of this string to construct the full URL, as documented on our
  ///   developer web site.
  ///   </dd>
  /// <dt>userStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make UserStore
  ///   requests after successfully authenticating. I.e. this is the URL that should be used
  ///   to create the Thrift HTTP client transport to send messages to the UserStore service
  ///   for this account.
  ///   </dd>
  /// <dt>utilityUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make Utility requests
  ///   to the server shard that contains that user's data. I.e. this is the URL that should
  ///   be used to create the Thrift HTTP client transport to send messages to the Utility
  ///   service for the account.
  ///   </dd>
  /// <dt>messageStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make MessageStore
  ///   requests to the server. I.e. this is the URL that should be used to create the
  ///   Thrift HTTP client transport to send messages to the MessageStore service for the
  ///   account.
  ///   </dd>
  /// <dt>userWebSocketUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use when opening a
  ///   persistent web socket to recieve notification of events for the authenticated user.
  ///   </dd>
  /// </dl>
  /// </summary>
  public partial class UserUrls : TBase
  {
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;
    private string _userStoreUrl;
    private string _utilityUrl;
    private string _messageStoreUrl;
    private string _userWebSocketUrl;

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }

    public string UserStoreUrl
    {
      get
      {
        return _userStoreUrl;
      }
      set
      {
        __isset.userStoreUrl = true;
        this._userStoreUrl = value;
      }
    }

    public string UtilityUrl
    {
      get
      {
        return _utilityUrl;
      }
      set
      {
        __isset.utilityUrl = true;
        this._utilityUrl = value;
      }
    }

    public string MessageStoreUrl
    {
      get
      {
        return _messageStoreUrl;
      }
      set
      {
        __isset.messageStoreUrl = true;
        this._messageStoreUrl = value;
      }
    }

    public string UserWebSocketUrl
    {
      get
      {
        return _userWebSocketUrl;
      }
      set
      {
        __isset.userWebSocketUrl = true;
        this._userWebSocketUrl = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
      public bool userStoreUrl;
      public bool utilityUrl;
      public bool messageStoreUrl;
      public bool userWebSocketUrl;
    }

    public UserUrls()
    {
    }

    public UserUrls DeepCopy()
    {
      var tmp5 = new UserUrls();
      if((NoteStoreUrl != null) && __isset.noteStoreUrl)
      {
        tmp5.NoteStoreUrl = this.NoteStoreUrl;
      }
      tmp5.__isset.noteStoreUrl = this.__isset.noteStoreUrl;
      if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
      {
        tmp5.WebApiUrlPrefix = this.WebApiUrlPrefix;
      }
      tmp5.__isset.webApiUrlPrefix = this.__isset.webApiUrlPrefix;
      if((UserStoreUrl != null) && __isset.userStoreUrl)
      {
        tmp5.UserStoreUrl = this.UserStoreUrl;
      }
      tmp5.__isset.userStoreUrl = this.__isset.userStoreUrl;
      if((UtilityUrl != null) && __isset.utilityUrl)
      {
        tmp5.UtilityUrl = this.UtilityUrl;
      }
      tmp5.__isset.utilityUrl = this.__isset.utilityUrl;
      if((MessageStoreUrl != null) && __isset.messageStoreUrl)
      {
        tmp5.MessageStoreUrl = this.MessageStoreUrl;
      }
      tmp5.__isset.messageStoreUrl = this.__isset.messageStoreUrl;
      if((UserWebSocketUrl != null) && __isset.userWebSocketUrl)
      {
        tmp5.UserWebSocketUrl = this.UserWebSocketUrl;
      }
      tmp5.__isset.userWebSocketUrl = this.__isset.userWebSocketUrl;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                NoteStoreUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                WebApiUrlPrefix = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                UserStoreUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                UtilityUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                MessageStoreUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                UserWebSocketUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("UserUrls");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if((NoteStoreUrl != null) && __isset.noteStoreUrl)
        {
          tmp7.Name = "noteStoreUrl";
          tmp7.Type = TType.String;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(NoteStoreUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
        {
          tmp7.Name = "webApiUrlPrefix";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(WebApiUrlPrefix, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UserStoreUrl != null) && __isset.userStoreUrl)
        {
          tmp7.Name = "userStoreUrl";
          tmp7.Type = TType.String;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(UserStoreUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UtilityUrl != null) && __isset.utilityUrl)
        {
          tmp7.Name = "utilityUrl";
          tmp7.Type = TType.String;
          tmp7.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(UtilityUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MessageStoreUrl != null) && __isset.messageStoreUrl)
        {
          tmp7.Name = "messageStoreUrl";
          tmp7.Type = TType.String;
          tmp7.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(MessageStoreUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UserWebSocketUrl != null) && __isset.userWebSocketUrl)
        {
          tmp7.Name = "userWebSocketUrl";
          tmp7.Type = TType.String;
          tmp7.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(UserWebSocketUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserUrls other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.noteStoreUrl == other.__isset.noteStoreUrl) && ((!__isset.noteStoreUrl) || (global::System.Object.Equals(NoteStoreUrl, other.NoteStoreUrl))))
        && ((__isset.webApiUrlPrefix == other.__isset.webApiUrlPrefix) && ((!__isset.webApiUrlPrefix) || (global::System.Object.Equals(WebApiUrlPrefix, other.WebApiUrlPrefix))))
        && ((__isset.userStoreUrl == other.__isset.userStoreUrl) && ((!__isset.userStoreUrl) || (global::System.Object.Equals(UserStoreUrl, other.UserStoreUrl))))
        && ((__isset.utilityUrl == other.__isset.utilityUrl) && ((!__isset.utilityUrl) || (global::System.Object.Equals(UtilityUrl, other.UtilityUrl))))
        && ((__isset.messageStoreUrl == other.__isset.messageStoreUrl) && ((!__isset.messageStoreUrl) || (global::System.Object.Equals(MessageStoreUrl, other.MessageStoreUrl))))
        && ((__isset.userWebSocketUrl == other.__isset.userWebSocketUrl) && ((!__isset.userWebSocketUrl) || (global::System.Object.Equals(UserWebSocketUrl, other.UserWebSocketUrl))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NoteStoreUrl != null) && __isset.noteStoreUrl)
        {
          hashcode = (hashcode * 397) + NoteStoreUrl.GetHashCode();
        }
        if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
        {
          hashcode = (hashcode * 397) + WebApiUrlPrefix.GetHashCode();
        }
        if((UserStoreUrl != null) && __isset.userStoreUrl)
        {
          hashcode = (hashcode * 397) + UserStoreUrl.GetHashCode();
        }
        if((UtilityUrl != null) && __isset.utilityUrl)
        {
          hashcode = (hashcode * 397) + UtilityUrl.GetHashCode();
        }
        if((MessageStoreUrl != null) && __isset.messageStoreUrl)
        {
          hashcode = (hashcode * 397) + MessageStoreUrl.GetHashCode();
        }
        if((UserWebSocketUrl != null) && __isset.userWebSocketUrl)
        {
          hashcode = (hashcode * 397) + UserWebSocketUrl.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("UserUrls(");
      int tmp9 = 0;
      if((NoteStoreUrl != null) && __isset.noteStoreUrl)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("NoteStoreUrl: ");
        NoteStoreUrl.ToString(tmp8);
      }
      if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("WebApiUrlPrefix: ");
        WebApiUrlPrefix.ToString(tmp8);
      }
      if((UserStoreUrl != null) && __isset.userStoreUrl)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("UserStoreUrl: ");
        UserStoreUrl.ToString(tmp8);
      }
      if((UtilityUrl != null) && __isset.utilityUrl)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("UtilityUrl: ");
        UtilityUrl.ToString(tmp8);
      }
      if((MessageStoreUrl != null) && __isset.messageStoreUrl)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("MessageStoreUrl: ");
        MessageStoreUrl.ToString(tmp8);
      }
      if((UserWebSocketUrl != null) && __isset.userWebSocketUrl)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("UserWebSocketUrl: ");
        UserWebSocketUrl.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}

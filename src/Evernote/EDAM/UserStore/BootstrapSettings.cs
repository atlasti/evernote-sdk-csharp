/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap settings.
  /// <dl>
  ///  <dt>serviceHost:</dt>
  ///    <dd>
  ///    The hostname and optional port for composing Evernote web service URLs.
  ///    This URL can be used to access the UserStore and related services,
  ///    but must not be used to compose the NoteStore URL. Client applications
  ///    must handle serviceHost values that include only the hostname
  ///    (e.g. www.evernote.com) or both the hostname and port (e.g. www.evernote.com:8080).
  ///    If no port is specified, or if port 443 is specified, client applications must
  ///    use the scheme "https" when composing URLs. Otherwise, a client must use the
  ///    scheme "http".
  ///  </dd>
  ///  <dt>marketingUrl:</dt>
  ///    <dd>
  ///    The URL stem for the Evernote corporate marketing website, e.g. http://www.evernote.com.
  ///    This stem can be used to compose website URLs. For example, the URL of the Evernote
  ///    Trunk is composed by appending "/about/trunk/" to the value of marketingUrl.
  ///    </dd>
  ///  <dt>supportUrl:</dt>
  ///    <dd>
  ///    The full URL for the Evernote customer support website, e.g. https://support.evernote.com.
  ///    </dd>
  ///  <dt>accountEmailDomain:</dt>
  ///    <dd>
  ///    The domain used for an Evernote user's incoming email address, which allows notes to
  ///    be emailed into an account. E.g. m.evernote.com.
  ///    </dd>
  ///  <dt>enableFacebookSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable sharing of notes on Facebook.
  ///    </dd>
  ///  <dt>enableGiftSubscriptions:</dt>
  ///    <dd>
  ///    Whether the client application should enable gift subscriptions.
  ///    </dd>
  ///  <dt>enableSupportTickets:</dt>
  ///    <dd>
  ///    Whether the client application should enable in-client creation of support tickets.
  ///    </dd>
  ///  <dt>enableSharedNotebooks:</dt>
  ///    <dd>
  ///    Whether the client application should enable shared notebooks.
  ///    </dd>
  ///  <dt>enableSingleNoteSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable single note sharing.
  ///    </dd>
  ///  <dt>enableSponsoredAccounts:</dt>
  ///    <dd>
  ///    Whether the client application should enable sponsored accounts.
  ///    </dd>
  ///  <dt>enableTwitterSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable sharing of notes on Twitter.
  ///    </dd>
  ///  <dt>enableGoogle:</dt>
  ///    <dd>
  ///    Whether the client application should enable authentication with Google,
  ///    for example to allow integration with a user's Gmail contacts.
  ///  </dl>
  /// </summary>
  public partial class BootstrapSettings : TBase
  {
    private bool _enableFacebookSharing;
    private bool _enableGiftSubscriptions;
    private bool _enableSupportTickets;
    private bool _enableSharedNotebooks;
    private bool _enableSingleNoteSharing;
    private bool _enableSponsoredAccounts;
    private bool _enableTwitterSharing;
    private bool _enableLinkedInSharing;
    private bool _enablePublicNotebooks;
    private bool _enableGoogle;

    public string ServiceHost { get; set; }

    public string MarketingUrl { get; set; }

    public string SupportUrl { get; set; }

    public string AccountEmailDomain { get; set; }

    public bool EnableFacebookSharing
    {
      get
      {
        return _enableFacebookSharing;
      }
      set
      {
        __isset.enableFacebookSharing = true;
        this._enableFacebookSharing = value;
      }
    }

    public bool EnableGiftSubscriptions
    {
      get
      {
        return _enableGiftSubscriptions;
      }
      set
      {
        __isset.enableGiftSubscriptions = true;
        this._enableGiftSubscriptions = value;
      }
    }

    public bool EnableSupportTickets
    {
      get
      {
        return _enableSupportTickets;
      }
      set
      {
        __isset.enableSupportTickets = true;
        this._enableSupportTickets = value;
      }
    }

    public bool EnableSharedNotebooks
    {
      get
      {
        return _enableSharedNotebooks;
      }
      set
      {
        __isset.enableSharedNotebooks = true;
        this._enableSharedNotebooks = value;
      }
    }

    public bool EnableSingleNoteSharing
    {
      get
      {
        return _enableSingleNoteSharing;
      }
      set
      {
        __isset.enableSingleNoteSharing = true;
        this._enableSingleNoteSharing = value;
      }
    }

    public bool EnableSponsoredAccounts
    {
      get
      {
        return _enableSponsoredAccounts;
      }
      set
      {
        __isset.enableSponsoredAccounts = true;
        this._enableSponsoredAccounts = value;
      }
    }

    public bool EnableTwitterSharing
    {
      get
      {
        return _enableTwitterSharing;
      }
      set
      {
        __isset.enableTwitterSharing = true;
        this._enableTwitterSharing = value;
      }
    }

    public bool EnableLinkedInSharing
    {
      get
      {
        return _enableLinkedInSharing;
      }
      set
      {
        __isset.enableLinkedInSharing = true;
        this._enableLinkedInSharing = value;
      }
    }

    public bool EnablePublicNotebooks
    {
      get
      {
        return _enablePublicNotebooks;
      }
      set
      {
        __isset.enablePublicNotebooks = true;
        this._enablePublicNotebooks = value;
      }
    }

    public bool EnableGoogle
    {
      get
      {
        return _enableGoogle;
      }
      set
      {
        __isset.enableGoogle = true;
        this._enableGoogle = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool enableFacebookSharing;
      public bool enableGiftSubscriptions;
      public bool enableSupportTickets;
      public bool enableSharedNotebooks;
      public bool enableSingleNoteSharing;
      public bool enableSponsoredAccounts;
      public bool enableTwitterSharing;
      public bool enableLinkedInSharing;
      public bool enablePublicNotebooks;
      public bool enableGoogle;
    }

    public BootstrapSettings()
    {
    }

    public BootstrapSettings(string serviceHost, string marketingUrl, string supportUrl, string accountEmailDomain) : this()
    {
      this.ServiceHost = serviceHost;
      this.MarketingUrl = marketingUrl;
      this.SupportUrl = supportUrl;
      this.AccountEmailDomain = accountEmailDomain;
    }

    public BootstrapSettings DeepCopy()
    {
      var tmp15 = new BootstrapSettings();
      if((ServiceHost != null))
      {
        tmp15.ServiceHost = this.ServiceHost;
      }
      if((MarketingUrl != null))
      {
        tmp15.MarketingUrl = this.MarketingUrl;
      }
      if((SupportUrl != null))
      {
        tmp15.SupportUrl = this.SupportUrl;
      }
      if((AccountEmailDomain != null))
      {
        tmp15.AccountEmailDomain = this.AccountEmailDomain;
      }
      if(__isset.enableFacebookSharing)
      {
        tmp15.EnableFacebookSharing = this.EnableFacebookSharing;
      }
      tmp15.__isset.enableFacebookSharing = this.__isset.enableFacebookSharing;
      if(__isset.enableGiftSubscriptions)
      {
        tmp15.EnableGiftSubscriptions = this.EnableGiftSubscriptions;
      }
      tmp15.__isset.enableGiftSubscriptions = this.__isset.enableGiftSubscriptions;
      if(__isset.enableSupportTickets)
      {
        tmp15.EnableSupportTickets = this.EnableSupportTickets;
      }
      tmp15.__isset.enableSupportTickets = this.__isset.enableSupportTickets;
      if(__isset.enableSharedNotebooks)
      {
        tmp15.EnableSharedNotebooks = this.EnableSharedNotebooks;
      }
      tmp15.__isset.enableSharedNotebooks = this.__isset.enableSharedNotebooks;
      if(__isset.enableSingleNoteSharing)
      {
        tmp15.EnableSingleNoteSharing = this.EnableSingleNoteSharing;
      }
      tmp15.__isset.enableSingleNoteSharing = this.__isset.enableSingleNoteSharing;
      if(__isset.enableSponsoredAccounts)
      {
        tmp15.EnableSponsoredAccounts = this.EnableSponsoredAccounts;
      }
      tmp15.__isset.enableSponsoredAccounts = this.__isset.enableSponsoredAccounts;
      if(__isset.enableTwitterSharing)
      {
        tmp15.EnableTwitterSharing = this.EnableTwitterSharing;
      }
      tmp15.__isset.enableTwitterSharing = this.__isset.enableTwitterSharing;
      if(__isset.enableLinkedInSharing)
      {
        tmp15.EnableLinkedInSharing = this.EnableLinkedInSharing;
      }
      tmp15.__isset.enableLinkedInSharing = this.__isset.enableLinkedInSharing;
      if(__isset.enablePublicNotebooks)
      {
        tmp15.EnablePublicNotebooks = this.EnablePublicNotebooks;
      }
      tmp15.__isset.enablePublicNotebooks = this.__isset.enablePublicNotebooks;
      if(__isset.enableGoogle)
      {
        tmp15.EnableGoogle = this.EnableGoogle;
      }
      tmp15.__isset.enableGoogle = this.__isset.enableGoogle;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serviceHost = false;
        bool isset_marketingUrl = false;
        bool isset_supportUrl = false;
        bool isset_accountEmailDomain = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ServiceHost = await iprot.ReadStringAsync(cancellationToken);
                isset_serviceHost = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                MarketingUrl = await iprot.ReadStringAsync(cancellationToken);
                isset_marketingUrl = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SupportUrl = await iprot.ReadStringAsync(cancellationToken);
                isset_supportUrl = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                AccountEmailDomain = await iprot.ReadStringAsync(cancellationToken);
                isset_accountEmailDomain = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                EnableFacebookSharing = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                EnableGiftSubscriptions = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                EnableSupportTickets = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                EnableSharedNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                EnableSingleNoteSharing = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Bool)
              {
                EnableSponsoredAccounts = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Bool)
              {
                EnableTwitterSharing = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Bool)
              {
                EnableLinkedInSharing = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Bool)
              {
                EnablePublicNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Bool)
              {
                EnableGoogle = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_serviceHost)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_marketingUrl)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_supportUrl)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_accountEmailDomain)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("BootstrapSettings");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        if((ServiceHost != null))
        {
          tmp17.Name = "serviceHost";
          tmp17.Type = TType.String;
          tmp17.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(ServiceHost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MarketingUrl != null))
        {
          tmp17.Name = "marketingUrl";
          tmp17.Type = TType.String;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(MarketingUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SupportUrl != null))
        {
          tmp17.Name = "supportUrl";
          tmp17.Type = TType.String;
          tmp17.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(SupportUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((AccountEmailDomain != null))
        {
          tmp17.Name = "accountEmailDomain";
          tmp17.Type = TType.String;
          tmp17.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(AccountEmailDomain, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableFacebookSharing)
        {
          tmp17.Name = "enableFacebookSharing";
          tmp17.Type = TType.Bool;
          tmp17.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableFacebookSharing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableGiftSubscriptions)
        {
          tmp17.Name = "enableGiftSubscriptions";
          tmp17.Type = TType.Bool;
          tmp17.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableGiftSubscriptions, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableSupportTickets)
        {
          tmp17.Name = "enableSupportTickets";
          tmp17.Type = TType.Bool;
          tmp17.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableSupportTickets, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableSharedNotebooks)
        {
          tmp17.Name = "enableSharedNotebooks";
          tmp17.Type = TType.Bool;
          tmp17.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableSharedNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableSingleNoteSharing)
        {
          tmp17.Name = "enableSingleNoteSharing";
          tmp17.Type = TType.Bool;
          tmp17.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableSingleNoteSharing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableSponsoredAccounts)
        {
          tmp17.Name = "enableSponsoredAccounts";
          tmp17.Type = TType.Bool;
          tmp17.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableSponsoredAccounts, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableTwitterSharing)
        {
          tmp17.Name = "enableTwitterSharing";
          tmp17.Type = TType.Bool;
          tmp17.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableTwitterSharing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableLinkedInSharing)
        {
          tmp17.Name = "enableLinkedInSharing";
          tmp17.Type = TType.Bool;
          tmp17.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableLinkedInSharing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enablePublicNotebooks)
        {
          tmp17.Name = "enablePublicNotebooks";
          tmp17.Type = TType.Bool;
          tmp17.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnablePublicNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enableGoogle)
        {
          tmp17.Name = "enableGoogle";
          tmp17.Type = TType.Bool;
          tmp17.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBoolAsync(EnableGoogle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BootstrapSettings other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ServiceHost, other.ServiceHost)
        && global::System.Object.Equals(MarketingUrl, other.MarketingUrl)
        && global::System.Object.Equals(SupportUrl, other.SupportUrl)
        && global::System.Object.Equals(AccountEmailDomain, other.AccountEmailDomain)
        && ((__isset.enableFacebookSharing == other.__isset.enableFacebookSharing) && ((!__isset.enableFacebookSharing) || (global::System.Object.Equals(EnableFacebookSharing, other.EnableFacebookSharing))))
        && ((__isset.enableGiftSubscriptions == other.__isset.enableGiftSubscriptions) && ((!__isset.enableGiftSubscriptions) || (global::System.Object.Equals(EnableGiftSubscriptions, other.EnableGiftSubscriptions))))
        && ((__isset.enableSupportTickets == other.__isset.enableSupportTickets) && ((!__isset.enableSupportTickets) || (global::System.Object.Equals(EnableSupportTickets, other.EnableSupportTickets))))
        && ((__isset.enableSharedNotebooks == other.__isset.enableSharedNotebooks) && ((!__isset.enableSharedNotebooks) || (global::System.Object.Equals(EnableSharedNotebooks, other.EnableSharedNotebooks))))
        && ((__isset.enableSingleNoteSharing == other.__isset.enableSingleNoteSharing) && ((!__isset.enableSingleNoteSharing) || (global::System.Object.Equals(EnableSingleNoteSharing, other.EnableSingleNoteSharing))))
        && ((__isset.enableSponsoredAccounts == other.__isset.enableSponsoredAccounts) && ((!__isset.enableSponsoredAccounts) || (global::System.Object.Equals(EnableSponsoredAccounts, other.EnableSponsoredAccounts))))
        && ((__isset.enableTwitterSharing == other.__isset.enableTwitterSharing) && ((!__isset.enableTwitterSharing) || (global::System.Object.Equals(EnableTwitterSharing, other.EnableTwitterSharing))))
        && ((__isset.enableLinkedInSharing == other.__isset.enableLinkedInSharing) && ((!__isset.enableLinkedInSharing) || (global::System.Object.Equals(EnableLinkedInSharing, other.EnableLinkedInSharing))))
        && ((__isset.enablePublicNotebooks == other.__isset.enablePublicNotebooks) && ((!__isset.enablePublicNotebooks) || (global::System.Object.Equals(EnablePublicNotebooks, other.EnablePublicNotebooks))))
        && ((__isset.enableGoogle == other.__isset.enableGoogle) && ((!__isset.enableGoogle) || (global::System.Object.Equals(EnableGoogle, other.EnableGoogle))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ServiceHost != null))
        {
          hashcode = (hashcode * 397) + ServiceHost.GetHashCode();
        }
        if((MarketingUrl != null))
        {
          hashcode = (hashcode * 397) + MarketingUrl.GetHashCode();
        }
        if((SupportUrl != null))
        {
          hashcode = (hashcode * 397) + SupportUrl.GetHashCode();
        }
        if((AccountEmailDomain != null))
        {
          hashcode = (hashcode * 397) + AccountEmailDomain.GetHashCode();
        }
        if(__isset.enableFacebookSharing)
        {
          hashcode = (hashcode * 397) + EnableFacebookSharing.GetHashCode();
        }
        if(__isset.enableGiftSubscriptions)
        {
          hashcode = (hashcode * 397) + EnableGiftSubscriptions.GetHashCode();
        }
        if(__isset.enableSupportTickets)
        {
          hashcode = (hashcode * 397) + EnableSupportTickets.GetHashCode();
        }
        if(__isset.enableSharedNotebooks)
        {
          hashcode = (hashcode * 397) + EnableSharedNotebooks.GetHashCode();
        }
        if(__isset.enableSingleNoteSharing)
        {
          hashcode = (hashcode * 397) + EnableSingleNoteSharing.GetHashCode();
        }
        if(__isset.enableSponsoredAccounts)
        {
          hashcode = (hashcode * 397) + EnableSponsoredAccounts.GetHashCode();
        }
        if(__isset.enableTwitterSharing)
        {
          hashcode = (hashcode * 397) + EnableTwitterSharing.GetHashCode();
        }
        if(__isset.enableLinkedInSharing)
        {
          hashcode = (hashcode * 397) + EnableLinkedInSharing.GetHashCode();
        }
        if(__isset.enablePublicNotebooks)
        {
          hashcode = (hashcode * 397) + EnablePublicNotebooks.GetHashCode();
        }
        if(__isset.enableGoogle)
        {
          hashcode = (hashcode * 397) + EnableGoogle.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("BootstrapSettings(");
      if((ServiceHost != null))
      {
        tmp18.Append(", ServiceHost: ");
        ServiceHost.ToString(tmp18);
      }
      if((MarketingUrl != null))
      {
        tmp18.Append(", MarketingUrl: ");
        MarketingUrl.ToString(tmp18);
      }
      if((SupportUrl != null))
      {
        tmp18.Append(", SupportUrl: ");
        SupportUrl.ToString(tmp18);
      }
      if((AccountEmailDomain != null))
      {
        tmp18.Append(", AccountEmailDomain: ");
        AccountEmailDomain.ToString(tmp18);
      }
      if(__isset.enableFacebookSharing)
      {
        tmp18.Append(", EnableFacebookSharing: ");
        EnableFacebookSharing.ToString(tmp18);
      }
      if(__isset.enableGiftSubscriptions)
      {
        tmp18.Append(", EnableGiftSubscriptions: ");
        EnableGiftSubscriptions.ToString(tmp18);
      }
      if(__isset.enableSupportTickets)
      {
        tmp18.Append(", EnableSupportTickets: ");
        EnableSupportTickets.ToString(tmp18);
      }
      if(__isset.enableSharedNotebooks)
      {
        tmp18.Append(", EnableSharedNotebooks: ");
        EnableSharedNotebooks.ToString(tmp18);
      }
      if(__isset.enableSingleNoteSharing)
      {
        tmp18.Append(", EnableSingleNoteSharing: ");
        EnableSingleNoteSharing.ToString(tmp18);
      }
      if(__isset.enableSponsoredAccounts)
      {
        tmp18.Append(", EnableSponsoredAccounts: ");
        EnableSponsoredAccounts.ToString(tmp18);
      }
      if(__isset.enableTwitterSharing)
      {
        tmp18.Append(", EnableTwitterSharing: ");
        EnableTwitterSharing.ToString(tmp18);
      }
      if(__isset.enableLinkedInSharing)
      {
        tmp18.Append(", EnableLinkedInSharing: ");
        EnableLinkedInSharing.ToString(tmp18);
      }
      if(__isset.enablePublicNotebooks)
      {
        tmp18.Append(", EnablePublicNotebooks: ");
        EnablePublicNotebooks.ToString(tmp18);
      }
      if(__isset.enableGoogle)
      {
        tmp18.Append(", EnableGoogle: ");
        EnableGoogle.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Error
{

  /// <summary>
  /// This exception is thrown by EDAM procedures when a call fails as a result of
  /// a problem in the service that could not be changed through caller action.
  /// 
  /// errorCode:  The numeric code indicating the type of error that occurred.
  ///   must be one of the values of EDAMErrorCode.
  /// 
  /// message:  This may contain additional information about the error
  /// 
  /// rateLimitDuration:  Indicates the minimum number of seconds that an application should
  ///   expect subsequent API calls for this user to fail. The application should not retry
  ///   API requests for the user until at least this many seconds have passed. Present only
  ///   when errorCode is RATE_LIMIT_REACHED,
  /// </summary>
  public partial class EDAMSystemException : TException, TBase
  {
    private string _message;
    private int _rateLimitDuration;

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Error.EDAMErrorCode"/>
    /// </summary>
    public global::Evernote.EDAM.Error.EDAMErrorCode ErrorCode { get; set; }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public int RateLimitDuration
    {
      get
      {
        return _rateLimitDuration;
      }
      set
      {
        __isset.rateLimitDuration = true;
        this._rateLimitDuration = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool message;
      public bool rateLimitDuration;
    }

    public EDAMSystemException()
    {
    }

    public EDAMSystemException(global::Evernote.EDAM.Error.EDAMErrorCode errorCode) : this()
    {
      this.ErrorCode = errorCode;
    }

    public EDAMSystemException DeepCopy()
    {
      var tmp5 = new EDAMSystemException();
      tmp5.ErrorCode = this.ErrorCode;
      if((Message != null) && __isset.message)
      {
        tmp5.Message = this.Message;
      }
      tmp5.__isset.message = this.__isset.message;
      if(__isset.rateLimitDuration)
      {
        tmp5.RateLimitDuration = this.RateLimitDuration;
      }
      tmp5.__isset.rateLimitDuration = this.__isset.rateLimitDuration;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_errorCode = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                ErrorCode = (global::Evernote.EDAM.Error.EDAMErrorCode)await iprot.ReadI32Async(cancellationToken);
                isset_errorCode = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Message = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                RateLimitDuration = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_errorCode)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("EDAMSystemException");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        tmp7.Name = "errorCode";
        tmp7.Type = TType.I32;
        tmp7.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteI32Async((int)ErrorCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Message != null) && __isset.message)
        {
          tmp7.Name = "message";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Message, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.rateLimitDuration)
        {
          tmp7.Name = "rateLimitDuration";
          tmp7.Type = TType.I32;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async(RateLimitDuration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is EDAMSystemException other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ErrorCode, other.ErrorCode)
        && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))))
        && ((__isset.rateLimitDuration == other.__isset.rateLimitDuration) && ((!__isset.rateLimitDuration) || (global::System.Object.Equals(RateLimitDuration, other.RateLimitDuration))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        if((Message != null) && __isset.message)
        {
          hashcode = (hashcode * 397) + Message.GetHashCode();
        }
        if(__isset.rateLimitDuration)
        {
          hashcode = (hashcode * 397) + RateLimitDuration.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("EDAMSystemException(");
      tmp8.Append(", ErrorCode: ");
      ErrorCode.ToString(tmp8);
      if((Message != null) && __isset.message)
      {
        tmp8.Append(", Message: ");
        Message.ToString(tmp8);
      }
      if(__isset.rateLimitDuration)
      {
        tmp8.Append(", RateLimitDuration: ");
        RateLimitDuration.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}

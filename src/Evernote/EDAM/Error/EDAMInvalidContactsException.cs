/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Error
{

  /// <summary>
  /// An exception thrown when the provided Contacts fail validation. For instance,
  /// email domains could be invalid, phone numbers might not be valid for SMS,
  /// etc.
  /// 
  /// We will not provide individual reasons for each Contact's validation failure.
  /// The presence of the Contact in this exception means that the user must figure
  /// out how to take appropriate action to fix this Contact.
  /// 
  /// <dl>
  ///   <dt>contacts</dt>
  ///   <dd>The list of Contacts that are considered invalid by the service</dd>
  /// 
  ///   <dt>parameter</dt>
  ///   <dd>If the error applied to a particular input parameter, this will
  ///   indicate which parameter.</dd>
  /// 
  ///   <dt>reasons</dt>
  ///   <dd>If supplied, the list of reasons why the server considered a contact invalid,
  ///   matching, in order, the list returned in the contacts field.</dd>
  /// </dl>
  /// </summary>
  public partial class EDAMInvalidContactsException : TException, TBase
  {
    private string _parameter;
    private List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> _reasons;

    public List<global::Evernote.EDAM.Type.Contact> Contacts { get; set; }

    public string Parameter
    {
      get
      {
        return _parameter;
      }
      set
      {
        __isset.parameter = true;
        this._parameter = value;
      }
    }

    public List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> Reasons
    {
      get
      {
        return _reasons;
      }
      set
      {
        __isset.reasons = true;
        this._reasons = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool parameter;
      public bool reasons;
    }

    public EDAMInvalidContactsException()
    {
    }

    public EDAMInvalidContactsException(List<global::Evernote.EDAM.Type.Contact> contacts) : this()
    {
      this.Contacts = contacts;
    }

    public EDAMInvalidContactsException DeepCopy()
    {
      var tmp15 = new EDAMInvalidContactsException();
      if((Contacts != null))
      {
        tmp15.Contacts = this.Contacts.DeepCopy();
      }
      if((Parameter != null) && __isset.parameter)
      {
        tmp15.Parameter = this.Parameter;
      }
      tmp15.__isset.parameter = this.__isset.parameter;
      if((Reasons != null) && __isset.reasons)
      {
        tmp15.Reasons = this.Reasons.DeepCopy();
      }
      tmp15.__isset.reasons = this.__isset.reasons;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_contacts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list16 = await iprot.ReadListBeginAsync(cancellationToken);
                  Contacts = new List<global::Evernote.EDAM.Type.Contact>(_list16.Count);
                  for(int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    global::Evernote.EDAM.Type.Contact _elem18;
                    _elem18 = new global::Evernote.EDAM.Type.Contact();
                    await _elem18.ReadAsync(iprot, cancellationToken);
                    Contacts.Add(_elem18);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_contacts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Parameter = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list19 = await iprot.ReadListBeginAsync(cancellationToken);
                  Reasons = new List<global::Evernote.EDAM.Error.EDAMInvalidContactReason>(_list19.Count);
                  for(int _i20 = 0; _i20 < _list19.Count; ++_i20)
                  {
                    global::Evernote.EDAM.Error.EDAMInvalidContactReason _elem21;
                    _elem21 = (global::Evernote.EDAM.Error.EDAMInvalidContactReason)await iprot.ReadI32Async(cancellationToken);
                    Reasons.Add(_elem21);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_contacts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp22 = new TStruct("EDAMInvalidContactsException");
        await oprot.WriteStructBeginAsync(tmp22, cancellationToken);
        var tmp23 = new TField();
        if((Contacts != null))
        {
          tmp23.Name = "contacts";
          tmp23.Type = TType.List;
          tmp23.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp23, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Contacts.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Contact _iter24 in Contacts)
            {
              await _iter24.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parameter != null) && __isset.parameter)
        {
          tmp23.Name = "parameter";
          tmp23.Type = TType.String;
          tmp23.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp23, cancellationToken);
          await oprot.WriteStringAsync(Parameter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Reasons != null) && __isset.reasons)
        {
          tmp23.Name = "reasons";
          tmp23.Type = TType.List;
          tmp23.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp23, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Reasons.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Error.EDAMInvalidContactReason _iter25 in Reasons)
            {
              await oprot.WriteI32Async((int)_iter25, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is EDAMInvalidContactsException other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Contacts, other.Contacts)
        && ((__isset.parameter == other.__isset.parameter) && ((!__isset.parameter) || (global::System.Object.Equals(Parameter, other.Parameter))))
        && ((__isset.reasons == other.__isset.reasons) && ((!__isset.reasons) || (TCollections.Equals(Reasons, other.Reasons))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Contacts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Contacts);
        }
        if((Parameter != null) && __isset.parameter)
        {
          hashcode = (hashcode * 397) + Parameter.GetHashCode();
        }
        if((Reasons != null) && __isset.reasons)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Reasons);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp26 = new StringBuilder("EDAMInvalidContactsException(");
      if((Contacts != null))
      {
        tmp26.Append(", Contacts: ");
        Contacts.ToString(tmp26);
      }
      if((Parameter != null) && __isset.parameter)
      {
        tmp26.Append(", Parameter: ");
        Parameter.ToString(tmp26);
      }
      if((Reasons != null) && __isset.reasons)
      {
        tmp26.Append(", Reasons: ");
        Reasons.ToString(tmp26);
      }
      tmp26.Append(')');
      return tmp26.ToString();
    }
  }

}

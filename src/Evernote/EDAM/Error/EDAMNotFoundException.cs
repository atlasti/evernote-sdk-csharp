/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Error
{

  /// <summary>
  /// This exception is thrown by EDAM procedures when a caller asks to perform
  /// an operation on an object that does not exist.  This may be thrown based on an invalid
  /// primary identifier (e.g. a bad GUID), or when the caller refers to an object
  /// by another unique identifier (e.g. a User's email address).
  /// 
  /// identifier:  A description of the object that was not found on the server.
  ///   For example, "Note.notebookGuid" when a caller attempts to create a note in a
  ///   notebook that does not exist in the user's account.
  /// 
  /// key:  The value passed from the client in the identifier, which was not
  ///   found. For example, the GUID that was not found.
  /// </summary>
  public partial class EDAMNotFoundException : TException, TBase
  {
    private string _identifier;
    private string _key;

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool identifier;
      public bool key;
    }

    public EDAMNotFoundException()
    {
    }

    public EDAMNotFoundException DeepCopy()
    {
      var tmp10 = new EDAMNotFoundException();
      if((Identifier != null) && __isset.identifier)
      {
        tmp10.Identifier = this.Identifier;
      }
      tmp10.__isset.identifier = this.__isset.identifier;
      if((Key != null) && __isset.key)
      {
        tmp10.Key = this.Key;
      }
      tmp10.__isset.key = this.__isset.key;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Identifier = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Key = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp11 = new TStruct("EDAMNotFoundException");
        await oprot.WriteStructBeginAsync(tmp11, cancellationToken);
        var tmp12 = new TField();
        if((Identifier != null) && __isset.identifier)
        {
          tmp12.Name = "identifier";
          tmp12.Type = TType.String;
          tmp12.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
          await oprot.WriteStringAsync(Identifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Key != null) && __isset.key)
        {
          tmp12.Name = "key";
          tmp12.Type = TType.String;
          tmp12.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
          await oprot.WriteStringAsync(Key, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is EDAMNotFoundException other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.identifier == other.__isset.identifier) && ((!__isset.identifier) || (global::System.Object.Equals(Identifier, other.Identifier))))
        && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Identifier != null) && __isset.identifier)
        {
          hashcode = (hashcode * 397) + Identifier.GetHashCode();
        }
        if((Key != null) && __isset.key)
        {
          hashcode = (hashcode * 397) + Key.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp13 = new StringBuilder("EDAMNotFoundException(");
      int tmp14 = 0;
      if((Identifier != null) && __isset.identifier)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Identifier: ");
        Identifier.ToString(tmp13);
      }
      if((Key != null) && __isset.key)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Key: ");
        Key.ToString(tmp13);
      }
      tmp13.Append(')');
      return tmp13.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{
  public static class NoteStoreExtensions
  {
    public static bool Equals(this Dictionary<string, int> instance, object that)
    {
      if (!(that is Dictionary<string, int> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<string, int> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<string, int> DeepCopy(this Dictionary<string, int> source)
    {
      if (source == null)
        return null;

      var tmp2011 = new Dictionary<string, int>(source.Count);
      foreach (var pair in source)
        tmp2011.Add((pair.Key != null) ? pair.Key : null, pair.Value);
      return tmp2011;
    }


    public static bool Equals(this Dictionary<string, string> instance, object that)
    {
      if (!(that is Dictionary<string, string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<string, string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<string, string> DeepCopy(this Dictionary<string, string> source)
    {
      if (source == null)
        return null;

      var tmp2012 = new Dictionary<string, string>(source.Count);
      foreach (var pair in source)
        tmp2012.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value : null);
      return tmp2012;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> DeepCopy(this List<global::Evernote.EDAM.Error.EDAMInvalidContactReason> source)
    {
      if (source == null)
        return null;

      var tmp2013 = new List<global::Evernote.EDAM.Error.EDAMInvalidContactReason>(source.Count);
      foreach (var elem in source)
        tmp2013.Add(elem);
      return tmp2013;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> DeepCopy(this List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> source)
    {
      if (source == null)
        return null;

      var tmp2014 = new List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship>(source.Count);
      foreach (var elem in source)
        tmp2014.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2014;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError> DeepCopy(this List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError> source)
    {
      if (source == null)
        return null;

      var tmp2015 = new List<global::Evernote.EDAM.NoteStore.ManageNoteSharesError>(source.Count);
      foreach (var elem in source)
        tmp2015.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2015;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError> DeepCopy(this List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError> source)
    {
      if (source == null)
        return null;

      var tmp2016 = new List<global::Evernote.EDAM.NoteStore.ManageNotebookSharesError>(source.Count);
      foreach (var elem in source)
        tmp2016.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2016;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> DeepCopy(this List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> source)
    {
      if (source == null)
        return null;

      var tmp2017 = new List<global::Evernote.EDAM.NoteStore.MemberShareRelationship>(source.Count);
      foreach (var elem in source)
        tmp2017.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2017;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> DeepCopy(this List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> source)
    {
      if (source == null)
        return null;

      var tmp2018 = new List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship>(source.Count);
      foreach (var elem in source)
        tmp2018.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2018;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> DeepCopy(this List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> source)
    {
      if (source == null)
        return null;

      var tmp2019 = new List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship>(source.Count);
      foreach (var elem in source)
        tmp2019.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2019;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.NoteMetadata> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.NoteMetadata> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.NoteMetadata> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.NoteMetadata> DeepCopy(this List<global::Evernote.EDAM.NoteStore.NoteMetadata> source)
    {
      if (source == null)
        return null;

      var tmp2020 = new List<global::Evernote.EDAM.NoteStore.NoteMetadata>(source.Count);
      foreach (var elem in source)
        tmp2020.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2020;
    }


    public static bool Equals(this List<global::Evernote.EDAM.NoteStore.NoteVersionId> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.NoteStore.NoteVersionId> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.NoteStore.NoteVersionId> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.NoteStore.NoteVersionId> DeepCopy(this List<global::Evernote.EDAM.NoteStore.NoteVersionId> source)
    {
      if (source == null)
        return null;

      var tmp2021 = new List<global::Evernote.EDAM.NoteStore.NoteVersionId>(source.Count);
      foreach (var elem in source)
        tmp2021.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2021;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Contact> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Contact> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Contact> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Contact> DeepCopy(this List<global::Evernote.EDAM.Type.Contact> source)
    {
      if (source == null)
        return null;

      var tmp2022 = new List<global::Evernote.EDAM.Type.Contact>(source.Count);
      foreach (var elem in source)
        tmp2022.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2022;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.LinkedNotebook> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.LinkedNotebook> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.LinkedNotebook> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.LinkedNotebook> DeepCopy(this List<global::Evernote.EDAM.Type.LinkedNotebook> source)
    {
      if (source == null)
        return null;

      var tmp2023 = new List<global::Evernote.EDAM.Type.LinkedNotebook>(source.Count);
      foreach (var elem in source)
        tmp2023.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2023;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Note> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Note> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Note> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Note> DeepCopy(this List<global::Evernote.EDAM.Type.Note> source)
    {
      if (source == null)
        return null;

      var tmp2024 = new List<global::Evernote.EDAM.Type.Note>(source.Count);
      foreach (var elem in source)
        tmp2024.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2024;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Notebook> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Notebook> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Notebook> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Notebook> DeepCopy(this List<global::Evernote.EDAM.Type.Notebook> source)
    {
      if (source == null)
        return null;

      var tmp2025 = new List<global::Evernote.EDAM.Type.Notebook>(source.Count);
      foreach (var elem in source)
        tmp2025.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2025;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.NotebookDescriptor> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.NotebookDescriptor> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.NotebookDescriptor> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.NotebookDescriptor> DeepCopy(this List<global::Evernote.EDAM.Type.NotebookDescriptor> source)
    {
      if (source == null)
        return null;

      var tmp2026 = new List<global::Evernote.EDAM.Type.NotebookDescriptor>(source.Count);
      foreach (var elem in source)
        tmp2026.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2026;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.RelatedContent> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.RelatedContent> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.RelatedContent> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.RelatedContent> DeepCopy(this List<global::Evernote.EDAM.Type.RelatedContent> source)
    {
      if (source == null)
        return null;

      var tmp2027 = new List<global::Evernote.EDAM.Type.RelatedContent>(source.Count);
      foreach (var elem in source)
        tmp2027.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2027;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.RelatedContentImage> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.RelatedContentImage> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.RelatedContentImage> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.RelatedContentImage> DeepCopy(this List<global::Evernote.EDAM.Type.RelatedContentImage> source)
    {
      if (source == null)
        return null;

      var tmp2028 = new List<global::Evernote.EDAM.Type.RelatedContentImage>(source.Count);
      foreach (var elem in source)
        tmp2028.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2028;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Resource> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Resource> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Resource> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Resource> DeepCopy(this List<global::Evernote.EDAM.Type.Resource> source)
    {
      if (source == null)
        return null;

      var tmp2029 = new List<global::Evernote.EDAM.Type.Resource>(source.Count);
      foreach (var elem in source)
        tmp2029.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2029;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.SavedSearch> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.SavedSearch> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.SavedSearch> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.SavedSearch> DeepCopy(this List<global::Evernote.EDAM.Type.SavedSearch> source)
    {
      if (source == null)
        return null;

      var tmp2030 = new List<global::Evernote.EDAM.Type.SavedSearch>(source.Count);
      foreach (var elem in source)
        tmp2030.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2030;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.SharedNote> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.SharedNote> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.SharedNote> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.SharedNote> DeepCopy(this List<global::Evernote.EDAM.Type.SharedNote> source)
    {
      if (source == null)
        return null;

      var tmp2031 = new List<global::Evernote.EDAM.Type.SharedNote>(source.Count);
      foreach (var elem in source)
        tmp2031.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2031;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.SharedNotebook> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.SharedNotebook> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.SharedNotebook> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.SharedNotebook> DeepCopy(this List<global::Evernote.EDAM.Type.SharedNotebook> source)
    {
      if (source == null)
        return null;

      var tmp2032 = new List<global::Evernote.EDAM.Type.SharedNotebook>(source.Count);
      foreach (var elem in source)
        tmp2032.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2032;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Tag> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Tag> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Tag> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Tag> DeepCopy(this List<global::Evernote.EDAM.Type.Tag> source)
    {
      if (source == null)
        return null;

      var tmp2033 = new List<global::Evernote.EDAM.Type.Tag>(source.Count);
      foreach (var elem in source)
        tmp2033.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2033;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.UserIdentity> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.UserIdentity> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.UserIdentity> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.UserIdentity> DeepCopy(this List<global::Evernote.EDAM.Type.UserIdentity> source)
    {
      if (source == null)
        return null;

      var tmp2034 = new List<global::Evernote.EDAM.Type.UserIdentity>(source.Count);
      foreach (var elem in source)
        tmp2034.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2034;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.UserProfile> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.UserProfile> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.UserProfile> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.UserProfile> DeepCopy(this List<global::Evernote.EDAM.Type.UserProfile> source)
    {
      if (source == null)
        return null;

      var tmp2035 = new List<global::Evernote.EDAM.Type.UserProfile>(source.Count);
      foreach (var elem in source)
        tmp2035.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2035;
    }


    public static bool Equals(this List<int> instance, object that)
    {
      if (!(that is List<int> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<int> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<int> DeepCopy(this List<int> source)
    {
      if (source == null)
        return null;

      var tmp2036 = new List<int>(source.Count);
      foreach (var elem in source)
        tmp2036.Add(elem);
      return tmp2036;
    }


    public static bool Equals(this List<long> instance, object that)
    {
      if (!(that is List<long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<long> DeepCopy(this List<long> source)
    {
      if (source == null)
        return null;

      var tmp2037 = new List<long>(source.Count);
      foreach (var elem in source)
        tmp2037.Add(elem);
      return tmp2037;
    }


    public static bool Equals(this List<string> instance, object that)
    {
      if (!(that is List<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<string> DeepCopy(this List<string> source)
    {
      if (source == null)
        return null;

      var tmp2038 = new List<string>(source.Count);
      foreach (var elem in source)
        tmp2038.Add((elem != null) ? elem : null);
      return tmp2038;
    }


    public static bool Equals(this THashSet<global::Evernote.EDAM.Type.RelatedContentType> instance, object that)
    {
      if (!(that is THashSet<global::Evernote.EDAM.Type.RelatedContentType> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<global::Evernote.EDAM.Type.RelatedContentType> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<global::Evernote.EDAM.Type.RelatedContentType> DeepCopy(this THashSet<global::Evernote.EDAM.Type.RelatedContentType> source)
    {
      if (source == null)
        return null;

      var tmp2039 = new THashSet<global::Evernote.EDAM.Type.RelatedContentType>(source.Count);
      foreach (var elem in source)
        tmp2039.Add(elem);
      return tmp2039;
    }


    public static bool Equals(this THashSet<string> instance, object that)
    {
      if (!(that is THashSet<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<string> DeepCopy(this THashSet<string> source)
    {
      if (source == null)
        return null;

      var tmp2040 = new THashSet<string>(source.Count);
      foreach (var elem in source)
        tmp2040.Add((elem != null) ? elem : null);
      return tmp2040;
    }


  }
}

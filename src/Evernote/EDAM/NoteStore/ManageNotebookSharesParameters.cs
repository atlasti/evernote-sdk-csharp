/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A structure that captures parameters used by clients to manage the
  /// shares for a given notebook via the manageNotebookShares method.
  /// 
  /// <dl>
  /// <dt>notebookGuid</dt>
  /// <dd>The GUID of the notebook whose shares are being managed.</dd>
  /// 
  /// <dt>inviteMessage</dt>
  /// <dd>If the service sends a message to invitees, this parameter will
  /// be used to form the actual message that is sent.</dd>
  /// 
  /// <dt>membershipsToUpdate</dt>
  /// <dd>The list of existing memberships to update.  This field is not
  /// intended to be the full set of memberships for the notebook and
  /// should only include those already-existing memberships that you
  /// actually want to change.  If you want to remove shares, see the
  /// unshares fields.  If you want to create a membership,
  /// i.e. auto-join a business user, you can do this via the
  /// invitationsToCreateOrUpdate field using an Evernote UserID of a
  /// fellow business member (the created invitation is automatically
  /// joined by the service, so the client is creating an
  /// invitation, not a membership).</dd>
  /// 
  /// <dt>invitationsToCreateOrUpdate</dt>
  /// <dd>The list of invitations to update, as matched by the identity
  /// field of the InvitationShareRelationship instances, or to create if
  /// an existing invitation does not exist.  This field is not intended
  /// to be the full set of invitations on the notebook and should only
  /// include those invitations that you wish to create or update.  Note
  /// that your invitation could convert into a membership via a
  /// service-supported auto-join operation.  This happens, for example,
  /// when you use an invitation with an Evernote UserID type for a
  /// recipient who is a member of the business to which the notebook
  /// belongs.  Note that to discover the user IDs for business members,
  /// the sharer must also be part of the business.</dd>
  /// 
  /// <dt>unshares</dt>
  /// <dd>The list of share relationships to expunge from the service.
  /// If the user identity is for an Evernote UserID, then matching invitations or
  /// memberships will be removed. If it's an e-mail, then e-mail based shared notebook
  /// invitations will be removed. If it's for an Identity ID, then any invitations that
  /// match the identity (by identity ID or user ID or e-mail for legacy invitations) will be
  /// removed.</dd>
  /// </dl>
  /// </summary>
  public partial class ManageNotebookSharesParameters : TBase
  {
    private string _notebookGuid;
    private string _inviteMessage;
    private List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> _membershipsToUpdate;
    private List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> _invitationsToCreateOrUpdate;
    private List<global::Evernote.EDAM.Type.UserIdentity> _unshares;

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public string InviteMessage
    {
      get
      {
        return _inviteMessage;
      }
      set
      {
        __isset.inviteMessage = true;
        this._inviteMessage = value;
      }
    }

    public List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> MembershipsToUpdate
    {
      get
      {
        return _membershipsToUpdate;
      }
      set
      {
        __isset.membershipsToUpdate = true;
        this._membershipsToUpdate = value;
      }
    }

    public List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> InvitationsToCreateOrUpdate
    {
      get
      {
        return _invitationsToCreateOrUpdate;
      }
      set
      {
        __isset.invitationsToCreateOrUpdate = true;
        this._invitationsToCreateOrUpdate = value;
      }
    }

    public List<global::Evernote.EDAM.Type.UserIdentity> Unshares
    {
      get
      {
        return _unshares;
      }
      set
      {
        __isset.unshares = true;
        this._unshares = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool notebookGuid;
      public bool inviteMessage;
      public bool membershipsToUpdate;
      public bool invitationsToCreateOrUpdate;
      public bool unshares;
    }

    public ManageNotebookSharesParameters()
    {
    }

    public ManageNotebookSharesParameters DeepCopy()
    {
      var tmp234 = new ManageNotebookSharesParameters();
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        tmp234.NotebookGuid = this.NotebookGuid;
      }
      tmp234.__isset.notebookGuid = this.__isset.notebookGuid;
      if((InviteMessage != null) && __isset.inviteMessage)
      {
        tmp234.InviteMessage = this.InviteMessage;
      }
      tmp234.__isset.inviteMessage = this.__isset.inviteMessage;
      if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
      {
        tmp234.MembershipsToUpdate = this.MembershipsToUpdate.DeepCopy();
      }
      tmp234.__isset.membershipsToUpdate = this.__isset.membershipsToUpdate;
      if((InvitationsToCreateOrUpdate != null) && __isset.invitationsToCreateOrUpdate)
      {
        tmp234.InvitationsToCreateOrUpdate = this.InvitationsToCreateOrUpdate.DeepCopy();
      }
      tmp234.__isset.invitationsToCreateOrUpdate = this.__isset.invitationsToCreateOrUpdate;
      if((Unshares != null) && __isset.unshares)
      {
        tmp234.Unshares = this.Unshares.DeepCopy();
      }
      tmp234.__isset.unshares = this.__isset.unshares;
      return tmp234;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                InviteMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list235 = await iprot.ReadListBeginAsync(cancellationToken);
                  MembershipsToUpdate = new List<global::Evernote.EDAM.NoteStore.MemberShareRelationship>(_list235.Count);
                  for(int _i236 = 0; _i236 < _list235.Count; ++_i236)
                  {
                    global::Evernote.EDAM.NoteStore.MemberShareRelationship _elem237;
                    _elem237 = new global::Evernote.EDAM.NoteStore.MemberShareRelationship();
                    await _elem237.ReadAsync(iprot, cancellationToken);
                    MembershipsToUpdate.Add(_elem237);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list238 = await iprot.ReadListBeginAsync(cancellationToken);
                  InvitationsToCreateOrUpdate = new List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship>(_list238.Count);
                  for(int _i239 = 0; _i239 < _list238.Count; ++_i239)
                  {
                    global::Evernote.EDAM.NoteStore.InvitationShareRelationship _elem240;
                    _elem240 = new global::Evernote.EDAM.NoteStore.InvitationShareRelationship();
                    await _elem240.ReadAsync(iprot, cancellationToken);
                    InvitationsToCreateOrUpdate.Add(_elem240);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list241 = await iprot.ReadListBeginAsync(cancellationToken);
                  Unshares = new List<global::Evernote.EDAM.Type.UserIdentity>(_list241.Count);
                  for(int _i242 = 0; _i242 < _list241.Count; ++_i242)
                  {
                    global::Evernote.EDAM.Type.UserIdentity _elem243;
                    _elem243 = new global::Evernote.EDAM.Type.UserIdentity();
                    await _elem243.ReadAsync(iprot, cancellationToken);
                    Unshares.Add(_elem243);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp244 = new TStruct("ManageNotebookSharesParameters");
        await oprot.WriteStructBeginAsync(tmp244, cancellationToken);
        var tmp245 = new TField();
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          tmp245.Name = "notebookGuid";
          tmp245.Type = TType.String;
          tmp245.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
          await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InviteMessage != null) && __isset.inviteMessage)
        {
          tmp245.Name = "inviteMessage";
          tmp245.Type = TType.String;
          tmp245.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
          await oprot.WriteStringAsync(InviteMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
        {
          tmp245.Name = "membershipsToUpdate";
          tmp245.Type = TType.List;
          tmp245.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, MembershipsToUpdate.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.MemberShareRelationship _iter246 in MembershipsToUpdate)
            {
              await _iter246.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InvitationsToCreateOrUpdate != null) && __isset.invitationsToCreateOrUpdate)
        {
          tmp245.Name = "invitationsToCreateOrUpdate";
          tmp245.Type = TType.List;
          tmp245.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, InvitationsToCreateOrUpdate.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.InvitationShareRelationship _iter247 in InvitationsToCreateOrUpdate)
            {
              await _iter247.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Unshares != null) && __isset.unshares)
        {
          tmp245.Name = "unshares";
          tmp245.Type = TType.List;
          tmp245.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Unshares.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.UserIdentity _iter248 in Unshares)
            {
              await _iter248.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ManageNotebookSharesParameters other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))))
        && ((__isset.inviteMessage == other.__isset.inviteMessage) && ((!__isset.inviteMessage) || (global::System.Object.Equals(InviteMessage, other.InviteMessage))))
        && ((__isset.membershipsToUpdate == other.__isset.membershipsToUpdate) && ((!__isset.membershipsToUpdate) || (TCollections.Equals(MembershipsToUpdate, other.MembershipsToUpdate))))
        && ((__isset.invitationsToCreateOrUpdate == other.__isset.invitationsToCreateOrUpdate) && ((!__isset.invitationsToCreateOrUpdate) || (TCollections.Equals(InvitationsToCreateOrUpdate, other.InvitationsToCreateOrUpdate))))
        && ((__isset.unshares == other.__isset.unshares) && ((!__isset.unshares) || (TCollections.Equals(Unshares, other.Unshares))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
        }
        if((InviteMessage != null) && __isset.inviteMessage)
        {
          hashcode = (hashcode * 397) + InviteMessage.GetHashCode();
        }
        if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(MembershipsToUpdate);
        }
        if((InvitationsToCreateOrUpdate != null) && __isset.invitationsToCreateOrUpdate)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InvitationsToCreateOrUpdate);
        }
        if((Unshares != null) && __isset.unshares)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Unshares);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp249 = new StringBuilder("ManageNotebookSharesParameters(");
      int tmp250 = 0;
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        if(0 < tmp250++) { tmp249.Append(", "); }
        tmp249.Append("NotebookGuid: ");
        NotebookGuid.ToString(tmp249);
      }
      if((InviteMessage != null) && __isset.inviteMessage)
      {
        if(0 < tmp250++) { tmp249.Append(", "); }
        tmp249.Append("InviteMessage: ");
        InviteMessage.ToString(tmp249);
      }
      if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
      {
        if(0 < tmp250++) { tmp249.Append(", "); }
        tmp249.Append("MembershipsToUpdate: ");
        MembershipsToUpdate.ToString(tmp249);
      }
      if((InvitationsToCreateOrUpdate != null) && __isset.invitationsToCreateOrUpdate)
      {
        if(0 < tmp250++) { tmp249.Append(", "); }
        tmp249.Append("InvitationsToCreateOrUpdate: ");
        InvitationsToCreateOrUpdate.ToString(tmp249);
      }
      if((Unshares != null) && __isset.unshares)
      {
        if(0 < tmp250++) { tmp249.Append(", "); }
        tmp249.Append("Unshares: ");
        Unshares.ToString(tmp249);
      }
      tmp249.Append(')');
      return tmp249.ToString();
    }
  }

}

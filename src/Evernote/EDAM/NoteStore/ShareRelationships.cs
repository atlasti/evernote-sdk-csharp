/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures a collection of share relationships for a notebook, for
  /// example, as returned by the getNotebookShares method.  The share
  /// relationships fall into two broad categories: members, and
  /// invitations that can be used to become members.
  /// 
  /// <dl>
  /// <dt>invitations</dt>
  /// <dd>A list of open invitations that can be redeemed into
  /// memberships to the notebook.</dd>
  /// 
  /// <dt>memberships</dt>
  /// <dd>A list of memberships of the notebook.  A member is identified
  /// by their Evernote UserID and has rights to access the
  /// notebook.</dd>
  /// 
  /// <dt>invitationRestrictions</dt>
  /// <dd>The restrictions on what privileges may be granted to invitees
  /// to this notebook. These restrictions may be specific to the calling
  /// user or to the notebook itself. They represent the
  /// union of all possible invite cases, so it is possible that once the
  /// recipient of the invitation has been identified by the service, such
  /// as by a business auto-join, the actual assigned privilege may change.
  /// </dd>
  /// </dl>
  /// </summary>
  public partial class ShareRelationships : TBase
  {
    private List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> _invitations;
    private List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> _memberships;
    private global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions _invitationRestrictions;

    public List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship> Invitations
    {
      get
      {
        return _invitations;
      }
      set
      {
        __isset.invitations = true;
        this._invitations = value;
      }
    }

    public List<global::Evernote.EDAM.NoteStore.MemberShareRelationship> Memberships
    {
      get
      {
        return _memberships;
      }
      set
      {
        __isset.memberships = true;
        this._memberships = value;
      }
    }

    public global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions InvitationRestrictions
    {
      get
      {
        return _invitationRestrictions;
      }
      set
      {
        __isset.invitationRestrictions = true;
        this._invitationRestrictions = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool invitations;
      public bool memberships;
      public bool invitationRestrictions;
    }

    public ShareRelationships()
    {
    }

    public ShareRelationships DeepCopy()
    {
      var tmp221 = new ShareRelationships();
      if((Invitations != null) && __isset.invitations)
      {
        tmp221.Invitations = this.Invitations.DeepCopy();
      }
      tmp221.__isset.invitations = this.__isset.invitations;
      if((Memberships != null) && __isset.memberships)
      {
        tmp221.Memberships = this.Memberships.DeepCopy();
      }
      tmp221.__isset.memberships = this.__isset.memberships;
      if((InvitationRestrictions != null) && __isset.invitationRestrictions)
      {
        tmp221.InvitationRestrictions = (global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions)this.InvitationRestrictions.DeepCopy();
      }
      tmp221.__isset.invitationRestrictions = this.__isset.invitationRestrictions;
      return tmp221;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list222 = await iprot.ReadListBeginAsync(cancellationToken);
                  Invitations = new List<global::Evernote.EDAM.NoteStore.InvitationShareRelationship>(_list222.Count);
                  for(int _i223 = 0; _i223 < _list222.Count; ++_i223)
                  {
                    global::Evernote.EDAM.NoteStore.InvitationShareRelationship _elem224;
                    _elem224 = new global::Evernote.EDAM.NoteStore.InvitationShareRelationship();
                    await _elem224.ReadAsync(iprot, cancellationToken);
                    Invitations.Add(_elem224);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list225 = await iprot.ReadListBeginAsync(cancellationToken);
                  Memberships = new List<global::Evernote.EDAM.NoteStore.MemberShareRelationship>(_list225.Count);
                  for(int _i226 = 0; _i226 < _list225.Count; ++_i226)
                  {
                    global::Evernote.EDAM.NoteStore.MemberShareRelationship _elem227;
                    _elem227 = new global::Evernote.EDAM.NoteStore.MemberShareRelationship();
                    await _elem227.ReadAsync(iprot, cancellationToken);
                    Memberships.Add(_elem227);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                InvitationRestrictions = new global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions();
                await InvitationRestrictions.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp228 = new TStruct("ShareRelationships");
        await oprot.WriteStructBeginAsync(tmp228, cancellationToken);
        var tmp229 = new TField();
        if((Invitations != null) && __isset.invitations)
        {
          tmp229.Name = "invitations";
          tmp229.Type = TType.List;
          tmp229.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Invitations.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.InvitationShareRelationship _iter230 in Invitations)
            {
              await _iter230.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Memberships != null) && __isset.memberships)
        {
          tmp229.Name = "memberships";
          tmp229.Type = TType.List;
          tmp229.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Memberships.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.MemberShareRelationship _iter231 in Memberships)
            {
              await _iter231.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InvitationRestrictions != null) && __isset.invitationRestrictions)
        {
          tmp229.Name = "invitationRestrictions";
          tmp229.Type = TType.Struct;
          tmp229.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
          await InvitationRestrictions.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ShareRelationships other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.invitations == other.__isset.invitations) && ((!__isset.invitations) || (TCollections.Equals(Invitations, other.Invitations))))
        && ((__isset.memberships == other.__isset.memberships) && ((!__isset.memberships) || (TCollections.Equals(Memberships, other.Memberships))))
        && ((__isset.invitationRestrictions == other.__isset.invitationRestrictions) && ((!__isset.invitationRestrictions) || (global::System.Object.Equals(InvitationRestrictions, other.InvitationRestrictions))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Invitations != null) && __isset.invitations)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Invitations);
        }
        if((Memberships != null) && __isset.memberships)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Memberships);
        }
        if((InvitationRestrictions != null) && __isset.invitationRestrictions)
        {
          hashcode = (hashcode * 397) + InvitationRestrictions.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp232 = new StringBuilder("ShareRelationships(");
      int tmp233 = 0;
      if((Invitations != null) && __isset.invitations)
      {
        if(0 < tmp233++) { tmp232.Append(", "); }
        tmp232.Append("Invitations: ");
        Invitations.ToString(tmp232);
      }
      if((Memberships != null) && __isset.memberships)
      {
        if(0 < tmp233++) { tmp232.Append(", "); }
        tmp232.Append("Memberships: ");
        Memberships.ToString(tmp232);
      }
      if((InvitationRestrictions != null) && __isset.invitationRestrictions)
      {
        if(0 < tmp233++) { tmp232.Append(", "); }
        tmp232.Append("InvitationRestrictions: ");
        InvitationRestrictions.ToString(tmp232);
      }
      tmp232.Append(')');
      return tmp232.ToString();
    }
  }

}

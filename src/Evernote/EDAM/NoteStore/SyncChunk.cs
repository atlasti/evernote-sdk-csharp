/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  ///  This structure is given out by the NoteStore when a client asks to
  ///  receive the current state of an account.  The client asks for the server's
  ///  state one chunk at a time in order to allow clients to retrieve the state
  ///  of a large account without needing to transfer the entire account in
  ///  a single message.
  /// 
  ///  The server always gives SyncChunks using an ascending series of Update
  ///  Sequence Numbers (USNs).
  /// 
  /// <dl>
  ///  <dt>currentTime</dt>
  ///    <dd>
  ///    The server's current date and time.
  ///    </dd>
  /// 
  ///  <dt>chunkHighUSN</dt>
  ///    <dd>
  ///    The highest USN for any of the data objects represented
  ///    in this sync chunk.  If there are no objects in the chunk, this will not be
  ///    set.
  ///    </dd>
  /// 
  ///  <dt>updateCount</dt>
  ///    <dd>
  ///    The total number of updates that have been performed in
  ///    the service for this account.  This is equal to the highest USN within the
  ///    account at the point that this SyncChunk was generated.  If updateCount
  ///    and chunkHighUSN are identical, that means that this is the last chunk
  ///    in the account ... there is no more recent information.
  ///    </dd>
  /// 
  ///  <dt>notes</dt>
  ///    <dd>
  ///    If present, this is a list of non-expunged notes that
  ///    have a USN in this chunk.  This will include notes that are "deleted"
  ///    but not expunged (i.e. in the trash).  The notes will include their list
  ///    of tags and resources, but the note content, resource content, resource
  ///    recognition data and resource alternate data will not be supplied.
  ///    </dd>
  /// 
  ///  <dt>notebooks</dt>
  ///    <dd>
  ///    If present, this is a list of non-expunged notebooks that
  ///    have a USN in this chunk.
  ///    </dd>
  /// 
  ///  <dt>tags</dt>
  ///    <dd>
  ///    If present, this is a list of the non-expunged tags that have a
  ///    USN in this chunk.
  ///    </dd>
  /// 
  ///  <dt>searches</dt>
  ///    <dd>
  ///    If present, this is a list of non-expunged searches that
  ///    have a USN in this chunk.
  ///    </dd>
  /// 
  ///  <dt>resources</dt>
  ///    <dd>
  ///    If present, this is a list of the non-expunged resources
  ///    that have a USN in this chunk.  This will include the metadata for each
  ///    resource, but not its binary contents or recognition data, which must be
  ///    retrieved separately.
  ///    </dd>
  /// 
  ///  <dt>expungedNotes</dt>
  ///    <dd>
  ///    If present, the GUIDs of all of the notes that were
  ///    permanently expunged in this chunk.
  ///    </dd>
  /// 
  ///  <dt>expungedNotebooks</dt>
  ///    <dd>
  ///    If present, the GUIDs of all of the notebooks that
  ///    were permanently expunged in this chunk.  When a notebook is expunged,
  ///    this implies that all of its child notes (and their resources) were
  ///    also expunged.
  ///    </dd>
  /// 
  ///  <dt>expungedTags</dt>
  ///    <dd>
  ///    If present, the GUIDs of all of the tags that were
  ///    permanently expunged in this chunk.
  ///    </dd>
  /// 
  ///  <dt>expungedSearches</dt>
  ///    <dd>
  ///    If present, the GUIDs of all of the saved searches
  ///    that were permanently expunged in this chunk.
  ///    </dd>
  /// 
  ///  <dt>linkedNotebooks</dt>
  ///    <dd>
  ///    If present, this is a list of non-expunged LinkedNotebooks that
  ///    have a USN in this chunk.
  ///    </dd>
  /// 
  ///  <dt>expungedLinkedNotebooks</dt>
  ///    <dd>
  ///    If present, the GUIDs of all of the LinkedNotebooks
  ///    that were permanently expunged in this chunk.
  ///    </dd>
  /// </summary>
  public partial class SyncChunk : TBase
  {
    private int _chunkHighUSN;
    private List<global::Evernote.EDAM.Type.Note> _notes;
    private List<global::Evernote.EDAM.Type.Notebook> _notebooks;
    private List<global::Evernote.EDAM.Type.Tag> _tags;
    private List<global::Evernote.EDAM.Type.SavedSearch> _searches;
    private List<global::Evernote.EDAM.Type.Resource> _resources;
    private List<string> _expungedNotes;
    private List<string> _expungedNotebooks;
    private List<string> _expungedTags;
    private List<string> _expungedSearches;
    private List<global::Evernote.EDAM.Type.LinkedNotebook> _linkedNotebooks;
    private List<string> _expungedLinkedNotebooks;

    public long CurrentTime { get; set; }

    public int ChunkHighUSN
    {
      get
      {
        return _chunkHighUSN;
      }
      set
      {
        __isset.chunkHighUSN = true;
        this._chunkHighUSN = value;
      }
    }

    public int UpdateCount { get; set; }

    public List<global::Evernote.EDAM.Type.Note> Notes
    {
      get
      {
        return _notes;
      }
      set
      {
        __isset.notes = true;
        this._notes = value;
      }
    }

    public List<global::Evernote.EDAM.Type.Notebook> Notebooks
    {
      get
      {
        return _notebooks;
      }
      set
      {
        __isset.notebooks = true;
        this._notebooks = value;
      }
    }

    public List<global::Evernote.EDAM.Type.Tag> Tags
    {
      get
      {
        return _tags;
      }
      set
      {
        __isset.tags = true;
        this._tags = value;
      }
    }

    public List<global::Evernote.EDAM.Type.SavedSearch> Searches
    {
      get
      {
        return _searches;
      }
      set
      {
        __isset.searches = true;
        this._searches = value;
      }
    }

    public List<global::Evernote.EDAM.Type.Resource> Resources
    {
      get
      {
        return _resources;
      }
      set
      {
        __isset.resources = true;
        this._resources = value;
      }
    }

    public List<string> ExpungedNotes
    {
      get
      {
        return _expungedNotes;
      }
      set
      {
        __isset.expungedNotes = true;
        this._expungedNotes = value;
      }
    }

    public List<string> ExpungedNotebooks
    {
      get
      {
        return _expungedNotebooks;
      }
      set
      {
        __isset.expungedNotebooks = true;
        this._expungedNotebooks = value;
      }
    }

    public List<string> ExpungedTags
    {
      get
      {
        return _expungedTags;
      }
      set
      {
        __isset.expungedTags = true;
        this._expungedTags = value;
      }
    }

    public List<string> ExpungedSearches
    {
      get
      {
        return _expungedSearches;
      }
      set
      {
        __isset.expungedSearches = true;
        this._expungedSearches = value;
      }
    }

    public List<global::Evernote.EDAM.Type.LinkedNotebook> LinkedNotebooks
    {
      get
      {
        return _linkedNotebooks;
      }
      set
      {
        __isset.linkedNotebooks = true;
        this._linkedNotebooks = value;
      }
    }

    public List<string> ExpungedLinkedNotebooks
    {
      get
      {
        return _expungedLinkedNotebooks;
      }
      set
      {
        __isset.expungedLinkedNotebooks = true;
        this._expungedLinkedNotebooks = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool chunkHighUSN;
      public bool notes;
      public bool notebooks;
      public bool tags;
      public bool searches;
      public bool resources;
      public bool expungedNotes;
      public bool expungedNotebooks;
      public bool expungedTags;
      public bool expungedSearches;
      public bool linkedNotebooks;
      public bool expungedLinkedNotebooks;
    }

    public SyncChunk()
    {
    }

    public SyncChunk(long currentTime, int updateCount) : this()
    {
      this.CurrentTime = currentTime;
      this.UpdateCount = updateCount;
    }

    public SyncChunk DeepCopy()
    {
      var tmp5 = new SyncChunk();
      tmp5.CurrentTime = this.CurrentTime;
      if(__isset.chunkHighUSN)
      {
        tmp5.ChunkHighUSN = this.ChunkHighUSN;
      }
      tmp5.__isset.chunkHighUSN = this.__isset.chunkHighUSN;
      tmp5.UpdateCount = this.UpdateCount;
      if((Notes != null) && __isset.notes)
      {
        tmp5.Notes = this.Notes.DeepCopy();
      }
      tmp5.__isset.notes = this.__isset.notes;
      if((Notebooks != null) && __isset.notebooks)
      {
        tmp5.Notebooks = this.Notebooks.DeepCopy();
      }
      tmp5.__isset.notebooks = this.__isset.notebooks;
      if((Tags != null) && __isset.tags)
      {
        tmp5.Tags = this.Tags.DeepCopy();
      }
      tmp5.__isset.tags = this.__isset.tags;
      if((Searches != null) && __isset.searches)
      {
        tmp5.Searches = this.Searches.DeepCopy();
      }
      tmp5.__isset.searches = this.__isset.searches;
      if((Resources != null) && __isset.resources)
      {
        tmp5.Resources = this.Resources.DeepCopy();
      }
      tmp5.__isset.resources = this.__isset.resources;
      if((ExpungedNotes != null) && __isset.expungedNotes)
      {
        tmp5.ExpungedNotes = this.ExpungedNotes.DeepCopy();
      }
      tmp5.__isset.expungedNotes = this.__isset.expungedNotes;
      if((ExpungedNotebooks != null) && __isset.expungedNotebooks)
      {
        tmp5.ExpungedNotebooks = this.ExpungedNotebooks.DeepCopy();
      }
      tmp5.__isset.expungedNotebooks = this.__isset.expungedNotebooks;
      if((ExpungedTags != null) && __isset.expungedTags)
      {
        tmp5.ExpungedTags = this.ExpungedTags.DeepCopy();
      }
      tmp5.__isset.expungedTags = this.__isset.expungedTags;
      if((ExpungedSearches != null) && __isset.expungedSearches)
      {
        tmp5.ExpungedSearches = this.ExpungedSearches.DeepCopy();
      }
      tmp5.__isset.expungedSearches = this.__isset.expungedSearches;
      if((LinkedNotebooks != null) && __isset.linkedNotebooks)
      {
        tmp5.LinkedNotebooks = this.LinkedNotebooks.DeepCopy();
      }
      tmp5.__isset.linkedNotebooks = this.__isset.linkedNotebooks;
      if((ExpungedLinkedNotebooks != null) && __isset.expungedLinkedNotebooks)
      {
        tmp5.ExpungedLinkedNotebooks = this.ExpungedLinkedNotebooks.DeepCopy();
      }
      tmp5.__isset.expungedLinkedNotebooks = this.__isset.expungedLinkedNotebooks;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_currentTime = false;
        bool isset_updateCount = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                CurrentTime = await iprot.ReadI64Async(cancellationToken);
                isset_currentTime = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                ChunkHighUSN = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                UpdateCount = await iprot.ReadI32Async(cancellationToken);
                isset_updateCount = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list6 = await iprot.ReadListBeginAsync(cancellationToken);
                  Notes = new List<global::Evernote.EDAM.Type.Note>(_list6.Count);
                  for(int _i7 = 0; _i7 < _list6.Count; ++_i7)
                  {
                    global::Evernote.EDAM.Type.Note _elem8;
                    _elem8 = new global::Evernote.EDAM.Type.Note();
                    await _elem8.ReadAsync(iprot, cancellationToken);
                    Notes.Add(_elem8);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list9 = await iprot.ReadListBeginAsync(cancellationToken);
                  Notebooks = new List<global::Evernote.EDAM.Type.Notebook>(_list9.Count);
                  for(int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    global::Evernote.EDAM.Type.Notebook _elem11;
                    _elem11 = new global::Evernote.EDAM.Type.Notebook();
                    await _elem11.ReadAsync(iprot, cancellationToken);
                    Notebooks.Add(_elem11);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  TList _list12 = await iprot.ReadListBeginAsync(cancellationToken);
                  Tags = new List<global::Evernote.EDAM.Type.Tag>(_list12.Count);
                  for(int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    global::Evernote.EDAM.Type.Tag _elem14;
                    _elem14 = new global::Evernote.EDAM.Type.Tag();
                    await _elem14.ReadAsync(iprot, cancellationToken);
                    Tags.Add(_elem14);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list15 = await iprot.ReadListBeginAsync(cancellationToken);
                  Searches = new List<global::Evernote.EDAM.Type.SavedSearch>(_list15.Count);
                  for(int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    global::Evernote.EDAM.Type.SavedSearch _elem17;
                    _elem17 = new global::Evernote.EDAM.Type.SavedSearch();
                    await _elem17.ReadAsync(iprot, cancellationToken);
                    Searches.Add(_elem17);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.List)
              {
                {
                  TList _list18 = await iprot.ReadListBeginAsync(cancellationToken);
                  Resources = new List<global::Evernote.EDAM.Type.Resource>(_list18.Count);
                  for(int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    global::Evernote.EDAM.Type.Resource _elem20;
                    _elem20 = new global::Evernote.EDAM.Type.Resource();
                    await _elem20.ReadAsync(iprot, cancellationToken);
                    Resources.Add(_elem20);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.List)
              {
                {
                  TList _list21 = await iprot.ReadListBeginAsync(cancellationToken);
                  ExpungedNotes = new List<string>(_list21.Count);
                  for(int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    string _elem23;
                    _elem23 = await iprot.ReadStringAsync(cancellationToken);
                    ExpungedNotes.Add(_elem23);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.List)
              {
                {
                  TList _list24 = await iprot.ReadListBeginAsync(cancellationToken);
                  ExpungedNotebooks = new List<string>(_list24.Count);
                  for(int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26;
                    _elem26 = await iprot.ReadStringAsync(cancellationToken);
                    ExpungedNotebooks.Add(_elem26);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.List)
              {
                {
                  TList _list27 = await iprot.ReadListBeginAsync(cancellationToken);
                  ExpungedTags = new List<string>(_list27.Count);
                  for(int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    string _elem29;
                    _elem29 = await iprot.ReadStringAsync(cancellationToken);
                    ExpungedTags.Add(_elem29);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.List)
              {
                {
                  TList _list30 = await iprot.ReadListBeginAsync(cancellationToken);
                  ExpungedSearches = new List<string>(_list30.Count);
                  for(int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    string _elem32;
                    _elem32 = await iprot.ReadStringAsync(cancellationToken);
                    ExpungedSearches.Add(_elem32);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.List)
              {
                {
                  TList _list33 = await iprot.ReadListBeginAsync(cancellationToken);
                  LinkedNotebooks = new List<global::Evernote.EDAM.Type.LinkedNotebook>(_list33.Count);
                  for(int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    global::Evernote.EDAM.Type.LinkedNotebook _elem35;
                    _elem35 = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await _elem35.ReadAsync(iprot, cancellationToken);
                    LinkedNotebooks.Add(_elem35);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.List)
              {
                {
                  TList _list36 = await iprot.ReadListBeginAsync(cancellationToken);
                  ExpungedLinkedNotebooks = new List<string>(_list36.Count);
                  for(int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    string _elem38;
                    _elem38 = await iprot.ReadStringAsync(cancellationToken);
                    ExpungedLinkedNotebooks.Add(_elem38);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_currentTime)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_updateCount)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp39 = new TStruct("SyncChunk");
        await oprot.WriteStructBeginAsync(tmp39, cancellationToken);
        var tmp40 = new TField();
        tmp40.Name = "currentTime";
        tmp40.Type = TType.I64;
        tmp40.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
        await oprot.WriteI64Async(CurrentTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if(__isset.chunkHighUSN)
        {
          tmp40.Name = "chunkHighUSN";
          tmp40.Type = TType.I32;
          tmp40.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI32Async(ChunkHighUSN, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp40.Name = "updateCount";
        tmp40.Type = TType.I32;
        tmp40.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
        await oprot.WriteI32Async(UpdateCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Notes != null) && __isset.notes)
        {
          tmp40.Name = "notes";
          tmp40.Type = TType.List;
          tmp40.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Notes.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Note _iter41 in Notes)
            {
              await _iter41.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Notebooks != null) && __isset.notebooks)
        {
          tmp40.Name = "notebooks";
          tmp40.Type = TType.List;
          tmp40.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Notebooks.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Notebook _iter42 in Notebooks)
            {
              await _iter42.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Tags != null) && __isset.tags)
        {
          tmp40.Name = "tags";
          tmp40.Type = TType.List;
          tmp40.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Tags.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Tag _iter43 in Tags)
            {
              await _iter43.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Searches != null) && __isset.searches)
        {
          tmp40.Name = "searches";
          tmp40.Type = TType.List;
          tmp40.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Searches.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.SavedSearch _iter44 in Searches)
            {
              await _iter44.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Resources != null) && __isset.resources)
        {
          tmp40.Name = "resources";
          tmp40.Type = TType.List;
          tmp40.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Resources.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Resource _iter45 in Resources)
            {
              await _iter45.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpungedNotes != null) && __isset.expungedNotes)
        {
          tmp40.Name = "expungedNotes";
          tmp40.Type = TType.List;
          tmp40.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ExpungedNotes.Count), cancellationToken);
            foreach (string _iter46 in ExpungedNotes)
            {
              await oprot.WriteStringAsync(_iter46, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpungedNotebooks != null) && __isset.expungedNotebooks)
        {
          tmp40.Name = "expungedNotebooks";
          tmp40.Type = TType.List;
          tmp40.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ExpungedNotebooks.Count), cancellationToken);
            foreach (string _iter47 in ExpungedNotebooks)
            {
              await oprot.WriteStringAsync(_iter47, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpungedTags != null) && __isset.expungedTags)
        {
          tmp40.Name = "expungedTags";
          tmp40.Type = TType.List;
          tmp40.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ExpungedTags.Count), cancellationToken);
            foreach (string _iter48 in ExpungedTags)
            {
              await oprot.WriteStringAsync(_iter48, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpungedSearches != null) && __isset.expungedSearches)
        {
          tmp40.Name = "expungedSearches";
          tmp40.Type = TType.List;
          tmp40.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ExpungedSearches.Count), cancellationToken);
            foreach (string _iter49 in ExpungedSearches)
            {
              await oprot.WriteStringAsync(_iter49, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LinkedNotebooks != null) && __isset.linkedNotebooks)
        {
          tmp40.Name = "linkedNotebooks";
          tmp40.Type = TType.List;
          tmp40.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, LinkedNotebooks.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.LinkedNotebook _iter50 in LinkedNotebooks)
            {
              await _iter50.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpungedLinkedNotebooks != null) && __isset.expungedLinkedNotebooks)
        {
          tmp40.Name = "expungedLinkedNotebooks";
          tmp40.Type = TType.List;
          tmp40.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ExpungedLinkedNotebooks.Count), cancellationToken);
            foreach (string _iter51 in ExpungedLinkedNotebooks)
            {
              await oprot.WriteStringAsync(_iter51, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SyncChunk other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(CurrentTime, other.CurrentTime)
        && ((__isset.chunkHighUSN == other.__isset.chunkHighUSN) && ((!__isset.chunkHighUSN) || (global::System.Object.Equals(ChunkHighUSN, other.ChunkHighUSN))))
        && global::System.Object.Equals(UpdateCount, other.UpdateCount)
        && ((__isset.notes == other.__isset.notes) && ((!__isset.notes) || (TCollections.Equals(Notes, other.Notes))))
        && ((__isset.notebooks == other.__isset.notebooks) && ((!__isset.notebooks) || (TCollections.Equals(Notebooks, other.Notebooks))))
        && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (TCollections.Equals(Tags, other.Tags))))
        && ((__isset.searches == other.__isset.searches) && ((!__isset.searches) || (TCollections.Equals(Searches, other.Searches))))
        && ((__isset.resources == other.__isset.resources) && ((!__isset.resources) || (TCollections.Equals(Resources, other.Resources))))
        && ((__isset.expungedNotes == other.__isset.expungedNotes) && ((!__isset.expungedNotes) || (TCollections.Equals(ExpungedNotes, other.ExpungedNotes))))
        && ((__isset.expungedNotebooks == other.__isset.expungedNotebooks) && ((!__isset.expungedNotebooks) || (TCollections.Equals(ExpungedNotebooks, other.ExpungedNotebooks))))
        && ((__isset.expungedTags == other.__isset.expungedTags) && ((!__isset.expungedTags) || (TCollections.Equals(ExpungedTags, other.ExpungedTags))))
        && ((__isset.expungedSearches == other.__isset.expungedSearches) && ((!__isset.expungedSearches) || (TCollections.Equals(ExpungedSearches, other.ExpungedSearches))))
        && ((__isset.linkedNotebooks == other.__isset.linkedNotebooks) && ((!__isset.linkedNotebooks) || (TCollections.Equals(LinkedNotebooks, other.LinkedNotebooks))))
        && ((__isset.expungedLinkedNotebooks == other.__isset.expungedLinkedNotebooks) && ((!__isset.expungedLinkedNotebooks) || (TCollections.Equals(ExpungedLinkedNotebooks, other.ExpungedLinkedNotebooks))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + CurrentTime.GetHashCode();
        if(__isset.chunkHighUSN)
        {
          hashcode = (hashcode * 397) + ChunkHighUSN.GetHashCode();
        }
        hashcode = (hashcode * 397) + UpdateCount.GetHashCode();
        if((Notes != null) && __isset.notes)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Notes);
        }
        if((Notebooks != null) && __isset.notebooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Notebooks);
        }
        if((Tags != null) && __isset.tags)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Tags);
        }
        if((Searches != null) && __isset.searches)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Searches);
        }
        if((Resources != null) && __isset.resources)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Resources);
        }
        if((ExpungedNotes != null) && __isset.expungedNotes)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ExpungedNotes);
        }
        if((ExpungedNotebooks != null) && __isset.expungedNotebooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ExpungedNotebooks);
        }
        if((ExpungedTags != null) && __isset.expungedTags)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ExpungedTags);
        }
        if((ExpungedSearches != null) && __isset.expungedSearches)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ExpungedSearches);
        }
        if((LinkedNotebooks != null) && __isset.linkedNotebooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(LinkedNotebooks);
        }
        if((ExpungedLinkedNotebooks != null) && __isset.expungedLinkedNotebooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ExpungedLinkedNotebooks);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp52 = new StringBuilder("SyncChunk(");
      tmp52.Append(", CurrentTime: ");
      CurrentTime.ToString(tmp52);
      if(__isset.chunkHighUSN)
      {
        tmp52.Append(", ChunkHighUSN: ");
        ChunkHighUSN.ToString(tmp52);
      }
      tmp52.Append(", UpdateCount: ");
      UpdateCount.ToString(tmp52);
      if((Notes != null) && __isset.notes)
      {
        tmp52.Append(", Notes: ");
        Notes.ToString(tmp52);
      }
      if((Notebooks != null) && __isset.notebooks)
      {
        tmp52.Append(", Notebooks: ");
        Notebooks.ToString(tmp52);
      }
      if((Tags != null) && __isset.tags)
      {
        tmp52.Append(", Tags: ");
        Tags.ToString(tmp52);
      }
      if((Searches != null) && __isset.searches)
      {
        tmp52.Append(", Searches: ");
        Searches.ToString(tmp52);
      }
      if((Resources != null) && __isset.resources)
      {
        tmp52.Append(", Resources: ");
        Resources.ToString(tmp52);
      }
      if((ExpungedNotes != null) && __isset.expungedNotes)
      {
        tmp52.Append(", ExpungedNotes: ");
        ExpungedNotes.ToString(tmp52);
      }
      if((ExpungedNotebooks != null) && __isset.expungedNotebooks)
      {
        tmp52.Append(", ExpungedNotebooks: ");
        ExpungedNotebooks.ToString(tmp52);
      }
      if((ExpungedTags != null) && __isset.expungedTags)
      {
        tmp52.Append(", ExpungedTags: ");
        ExpungedTags.ToString(tmp52);
      }
      if((ExpungedSearches != null) && __isset.expungedSearches)
      {
        tmp52.Append(", ExpungedSearches: ");
        ExpungedSearches.ToString(tmp52);
      }
      if((LinkedNotebooks != null) && __isset.linkedNotebooks)
      {
        tmp52.Append(", LinkedNotebooks: ");
        LinkedNotebooks.ToString(tmp52);
      }
      if((ExpungedLinkedNotebooks != null) && __isset.expungedLinkedNotebooks)
      {
        tmp52.Append(", ExpungedLinkedNotebooks: ");
        ExpungedLinkedNotebooks.ToString(tmp52);
      }
      tmp52.Append(')');
      return tmp52.ToString();
    }
  }

}

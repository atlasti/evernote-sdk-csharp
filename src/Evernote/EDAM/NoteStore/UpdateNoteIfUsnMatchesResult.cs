/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// The result of a call to updateNoteIfUsnMatches, which optionally updates a note
  /// based on the current value of the note's update sequence number on the service.
  /// 
  /// <dl>
  /// <dt>note</dt>
  /// <dd>Either the current state of the note if <tt>updated</tt> is false or the
  /// result of updating the note as would be done via the <tt>updateNote</tt> method.
  /// If the note was not updated, you will receive a Note that does not include note
  /// content, resources data, resources recognition data, or resources alternate data.
  /// You can check for updates to these large objects by checking the Data.bodyHash
  /// values and downloading accordingly.</dd>
  /// 
  /// <dt>updated</dt>
  /// <dd>Whether or not the note was updated by the operation.</dd>
  /// </dl>
  /// </summary>
  public partial class UpdateNoteIfUsnMatchesResult : TBase
  {
    private global::Evernote.EDAM.Type.Note _note;
    private bool _updated;

    public global::Evernote.EDAM.Type.Note Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        this._note = value;
      }
    }

    public bool Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool note;
      public bool updated;
    }

    public UpdateNoteIfUsnMatchesResult()
    {
    }

    public UpdateNoteIfUsnMatchesResult DeepCopy()
    {
      var tmp201 = new UpdateNoteIfUsnMatchesResult();
      if((Note != null) && __isset.note)
      {
        tmp201.Note = (global::Evernote.EDAM.Type.Note)this.Note.DeepCopy();
      }
      tmp201.__isset.note = this.__isset.note;
      if(__isset.updated)
      {
        tmp201.Updated = this.Updated;
      }
      tmp201.__isset.updated = this.__isset.updated;
      return tmp201;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Note = new global::Evernote.EDAM.Type.Note();
                await Note.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Updated = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp202 = new TStruct("UpdateNoteIfUsnMatchesResult");
        await oprot.WriteStructBeginAsync(tmp202, cancellationToken);
        var tmp203 = new TField();
        if((Note != null) && __isset.note)
        {
          tmp203.Name = "note";
          tmp203.Type = TType.Struct;
          tmp203.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await Note.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updated)
        {
          tmp203.Name = "updated";
          tmp203.Type = TType.Bool;
          tmp203.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteBoolAsync(Updated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UpdateNoteIfUsnMatchesResult other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.note == other.__isset.note) && ((!__isset.note) || (global::System.Object.Equals(Note, other.Note))))
        && ((__isset.updated == other.__isset.updated) && ((!__isset.updated) || (global::System.Object.Equals(Updated, other.Updated))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Note != null) && __isset.note)
        {
          hashcode = (hashcode * 397) + Note.GetHashCode();
        }
        if(__isset.updated)
        {
          hashcode = (hashcode * 397) + Updated.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp204 = new StringBuilder("UpdateNoteIfUsnMatchesResult(");
      int tmp205 = 0;
      if((Note != null) && __isset.note)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("Note: ");
        Note.ToString(tmp204);
      }
      if(__isset.updated)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("Updated: ");
        Updated.ToString(tmp204);
      }
      tmp204.Append(')');
      return tmp204.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{
  public partial class NoteStore
  {
    /// <summary>
    /// Service:  NoteStore
    /// <p>
    /// The NoteStore service is used by EDAM clients to exchange information
    /// about the collection of notes in an account. This is primarily used for
    /// synchronization, but could also be used by a "thin" client without a full
    /// local cache.
    /// </p><p>
    /// Most functions take an "authenticationToken" parameter, which is the
    /// value returned by the UserStore which permits access to the account.
    /// </p>
    /// 
    /// Calls which require an authenticationToken may throw an EDAMUserException
    /// for the following reasons:
    ///  <ul>
    ///   <li>DATA_REQUIRED "authenticationToken" - token is empty</li>
    ///   <li>BAD_DATA_FORMAT "authenticationToken" - token is malformed</li>
    ///   <li>INVALID_AUTH "authenticationToken" - token signature is invalid</li>
    ///   <li>AUTH_EXPIRED "authenticationToken" - token has expired or been revoked</li>
    ///   <li>PERMISSION_DENIED "authenticationToken" - token does not grant permission
    ///       to perform the requested action</li>
    ///   <li>BUSINESS_SECURITY_LOGIN_REQUIRED "sso" - the user is a member of a business
    ///       that requires single sign-on, and must complete SSO before accessing business
    ///       content.
    /// </ul>
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Asks the NoteStore to provide information about the status of the user
      /// account corresponding to the provided authentication token.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> getSyncState(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the NoteStore to provide the state of the account in order of
      /// last modification.  This request retrieves one block of the server's
      /// state so that a client can make several small requests against a large
      /// account rather than getting the entire state in one big message.
      /// This call gives fine-grained control of the data that will
      /// be received by a client by omitting data elements that a client doesn't
      /// need. This may reduce network traffic and sync times.
      /// 
      /// @param afterUSN
      ///   The client can pass this value to ask only for objects that
      ///   have been updated after a certain point.  This allows the client to
      ///   receive updates after its last checkpoint rather than doing a full
      ///   synchronization on every pass.  The default value of "0" indicates
      ///   that the client wants to get objects from the start of the account.
      /// 
      /// @param maxEntries
      ///   The maximum number of modified objects that should be
      ///   returned in the result SyncChunk.  This can be used to limit the size
      ///   of each individual message to be friendly for network transfer.
      /// 
      /// @param filter
      ///   The caller must set some of the flags in this structure to specify which
      ///   data types should be returned during the synchronization.  See
      ///   the SyncChunkFilter structure for information on each flag.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "afterUSN" - if negative
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="afterUSN"></param>
      /// <param name="maxEntries"></param>
      /// <param name="filter"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> getFilteredSyncChunk(string authenticationToken, int afterUSN, int maxEntries, global::Evernote.EDAM.NoteStore.SyncChunkFilter filter, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the NoteStore to provide information about the status of a linked
      /// notebook that has been shared with the caller, or that is public to the
      /// world.
      /// This will return a result that is similar to getSyncState, but may omit
      /// SyncState.uploaded if the caller doesn't have permission to write to
      /// the linked notebook.
      /// 
      /// This function must be called on the shard that owns the referenced
      /// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
      /// same as LinkedNotebook.shardId.)
      /// 
      /// @param authenticationToken
      ///   This should be an authenticationToken for the guest who has received
      ///   the invitation to the share.  (I.e. this should not be the result of
      ///   NoteStore.authenticateToSharedNotebook)
      /// 
      /// @param linkedNotebook
      ///   This structure should contain identifying information and permissions
      ///   to access the notebook in question.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>DATA_REQUIRED "LinkedNotebook.username" - The username field must be
      ///       populated with the current username of the owner of the notebook for which
      ///       you are obtaining sync state.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"LinkedNotebook.username" - If the LinkedNotebook.username field does not
      ///       correspond to a current user on the service.
      ///   </li>
      /// </ul>
      /// 
      /// @throws SystemException <ul>
      ///   <li>SHARD_UNAVAILABLE - If the provided LinkedNotebook.username corresponds to a
      ///       user whose account is on a shard other than that on which this method was
      ///       invoked.
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="linkedNotebook"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> getLinkedNotebookSyncState(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the NoteStore to provide information about the contents of a linked
      /// notebook that has been shared with the caller, or that is public to the
      /// world.
      /// This will return a result that is similar to getSyncChunk, but will only
      /// contain entries that are visible to the caller.  I.e. only that particular
      /// Notebook will be visible, along with its Notes, and Tags on those Notes.
      /// 
      /// This function must be called on the shard that owns the referenced
      /// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
      /// same as LinkedNotebook.shardId.)
      /// 
      /// @param authenticationToken
      ///   This should be an authenticationToken for the guest who has received
      ///   the invitation to the share.  (I.e. this should not be the result of
      ///   NoteStore.authenticateToSharedNotebook)
      /// 
      /// @param linkedNotebook
      ///   This structure should contain identifying information and permissions
      ///   to access the notebook in question.  This must contain the valid fields
      ///   for either a shared notebook (e.g. shareKey)
      ///   or a public notebook (e.g. username, uri)
      /// 
      /// @param afterUSN
      ///   The client can pass this value to ask only for objects that
      ///   have been updated after a certain point.  This allows the client to
      ///   receive updates after its last checkpoint rather than doing a full
      ///   synchronization on every pass.  The default value of "0" indicates
      ///   that the client wants to get objects from the start of the account.
      /// 
      /// @param maxEntries
      ///   The maximum number of modified objects that should be
      ///   returned in the result SyncChunk.  This can be used to limit the size
      ///   of each individual message to be friendly for network transfer.
      ///   Applications should not request more than 256 objects at a time,
      ///   and must handle the case where the service returns less than the
      ///   requested number of objects in a given request even though more
      ///   objects are available on the service.
      /// 
      /// @param fullSyncOnly
      ///   If true, then the client only wants initial data for a full sync.
      ///   In this case, the service will not return any expunged objects,
      ///   and will not return any Resources, since these are also provided
      ///   in their corresponding Notes.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "afterUSN" - if negative
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "LinkedNotebook" - if the provided information doesn't match any
      ///     valid notebook
      ///   </li>
      ///   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
      ///     valid notebook
      ///   </li>
      ///   <li> "SharedNotebook.id" - if the provided information indicates a
      ///      shared notebook that no longer exists
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="linkedNotebook"></param>
      /// <param name="afterUSN"></param>
      /// <param name="maxEntries"></param>
      /// <param name="fullSyncOnly"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> getLinkedNotebookSyncChunk(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, bool fullSyncOnly, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of all of the notebooks in the account.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> listNotebooks(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of all the notebooks in a business that the user has permission to access,
      /// regardless of whether the user has joined them. This includes notebooks that have been shared
      /// with the entire business as well as notebooks that have been shared directly with the user.
      /// 
      /// @param authenticationToken A business authentication token obtained by calling
      ///   UserStore.authenticateToBusiness.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> INVALID_AUTH "authenticationToken" - if the authentication token is not a
      ///     business auth token.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> listAccessibleBusinessNotebooks(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of the notebook with the provided GUID.
      /// The notebook may be active or deleted (but not expunged).
      /// 
      /// @param guid
      ///   The GUID of the notebook to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - tag not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the notebook that should be used to store new notes in the
      /// user's account when no other notebooks are specified.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getDefaultNotebook(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to make a notebook with the provided name.
      /// 
      /// @param notebook
      ///   The desired fields for the notebook must be provided on this
      ///   object.  The name of the notebook must be set, and either the 'active'
      ///   or 'defaultNotebook' fields may be set by the client at creation.
      ///   If a notebook exists in the account with the same name (via
      ///   case-insensitive compare), this will throw an EDAMUserException.
      /// 
      /// @return
      ///   The newly created Notebook.  The server-side GUID will be
      ///   saved in this object's 'guid' field.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern</li>
      ///   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern</li>
      ///   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri</li>
      ///   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long</li>
      ///   <li> DATA_CONFLICT "Notebook.name" - name already in use</li>
      ///   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use</li>
      ///   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing</li>
      ///   <li> DATA_REQUIRED "Notebook" - notebook parameter was null</li>
      ///   <li> PERMISSION_DENIED "Notebook.defaultNotebook" - if the 'defaultNotebook' field
      ///        is set to 'true' for a Notebook that is not owned by the user identified by
      ///        the passed authenticationToken.</li>
      ///   <li> LIMIT_REACHED "Notebook" - at max number of notebooks</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Workspace.guid" - if workspaceGuid set and no Workspace exists for the GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="notebook"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> createNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// Submits notebook changes to the service. The provided data must include the
      /// notebook's guid field for identification.
      /// <p />
      /// The Notebook will be moved to the specified Workspace, if a non empty
      /// Notebook.workspaceGuid is provided. If an empty Notebook.workspaceGuid is set and the
      /// Notebook is in a Workspace, then it will be removed from the Workspace and a full
      /// access SharedNotebook record will be ensured for the caller. If the caller does not
      /// already have a full access share, either the privilege of an existing share will be
      /// upgraded or a new share will be created. It is illegal to set a
      /// Notebook.workspaceGuid on a Workspace backing Notebook.
      /// 
      /// @param notebook
      ///   The notebook object containing the requested changes.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern</li>
      ///   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern</li>
      ///   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri</li>
      ///   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long</li>
      ///   <li> DATA_CONFLICT "Notebook.name" - name already in use</li>
      ///   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use</li>
      ///   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing</li>
      ///   <li> DATA_REQUIRED "Notebook" - notebook parameter was null</li>
      ///   <li> PERMISSION_DENIED "Notebook.defaultNotebook" - if the 'defaultNotebook' field
      ///        is set to 'true' for a Notebook that is not owned by the user identified by
      ///        the passed authenticationToken.</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - not found, by GUID</li>
      ///   <li> "Workspace.guid" - if a non empty workspaceGuid set and no Workspace exists
      ///        for the GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="notebook"></param>
      global::System.Threading.Tasks.Task<int> updateNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// Permanently removes the notebook from the user's account.
      /// After this action, the notebook is no longer available for undeletion, etc.
      /// If the notebook contains any Notes, they will be moved to the current
      /// default notebook and moved into the trash (i.e. Note.active=false).
      /// <p/>
      /// NOTE: This function is generally not available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param guid
      ///   The GUID of the notebook to delete.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
      ///   </li>
      ///   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
      ///   </li>
      ///   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> expungeNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of the tags in the account.  Evernote does not support
      /// the undeletion of tags, so this will only include active tags.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> listTags(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of the tags that are applied to at least one note within
      /// the provided notebook.  If the notebook is public, the authenticationToken
      /// may be ignored.
      /// 
      /// @param notebookGuid
      ///    the GUID of the notebook to use to find tags
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - notebook not found by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="notebookGuid"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> listTagsByNotebook(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of the Tag with the provided GUID.
      /// 
      /// @param guid
      ///   The GUID of the tag to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Tag.guid" - tag not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> getTag(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to make a tag with a set of information.
      /// 
      /// @param tag
      ///   The desired list of fields for the tag are specified in this
      ///   object.  The caller must specify the tag name, and may provide
      ///   the parentGUID.
      /// 
      /// @return
      ///   The newly created Tag.  The server-side GUID will be
      ///   saved in this object.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
      ///   </li>
      ///   <li> DATA_CONFLICT "Tag.name" - name already in use
      ///   </li>
      ///   <li> LIMIT_REACHED "Tag" - at max number of tags
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Tag.parentGuid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> createTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Submits tag changes to the service.  The provided data must include
      /// the tag's guid field for identification.  The service will apply
      /// updates to the following tag fields:  name, parentGuid
      /// 
      /// @param tag
      ///   The tag object containing the requested changes.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
      ///   </li>
      ///   <li> DATA_CONFLICT "Tag.name" - name already in use
      ///   </li>
      ///   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
      ///   </li>
      ///   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Tag.guid" - tag not found, by GUID
      ///   </li>
      ///   <li> "Tag.parentGuid" - parent not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="tag"></param>
      global::System.Threading.Tasks.Task<int> updateTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default);

      /// <summary>
      /// Removes the provided tag from every note that is currently tagged with
      /// this tag.  If this operation is successful, the tag will still be in
      /// the account, but it will not be tagged on any notes.
      /// 
      /// This function is not indended for use by full synchronizing clients, since
      /// it does not provide enough result information to the client to reconcile
      /// the local state without performing a follow-up sync from the service.  This
      /// is intended for "thin clients" that need to efficiently support this as
      /// a UI operation.
      /// 
      /// @param guid
      ///   The GUID of the tag to remove from all notes.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Tag.guid" - tag not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task untagAll(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Permanently deletes the tag with the provided GUID, if present.
      /// <p/>
      /// NOTE: This function is not generally available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param guid
      ///   The GUID of the tag to delete.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Tag.guid" - tag not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> expungeTag(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of the searches in the account.  Evernote does not support
      /// the undeletion of searches, so this will only include active searches.
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SavedSearch>> listSearches(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of the search with the provided GUID.
      /// 
      /// @param guid
      ///   The GUID of the search to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
      ///   </li>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "SavedSearch.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> getSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to make a saved search with a set of information.
      /// 
      /// @param search
      ///   The desired list of fields for the search are specified in this
      ///   object. The caller must specify the name and query for the
      ///   search, and may optionally specify a search scope.
      ///   The SavedSearch.format field is ignored by the service.
      /// 
      /// @return
      ///   The newly created SavedSearch.  The server-side GUID will be
      ///   saved in this object.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
      ///   </li>
      ///   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
      ///   </li>
      ///   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="search"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> createSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default);

      /// <summary>
      /// Submits search changes to the service. The provided data must include
      /// the search's guid field for identification. The service will apply
      /// updates to the following search fields: name, query, and scope.
      /// 
      /// @param search
      ///   The search object containing the requested changes.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
      ///   </li>
      ///   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
      ///   </li>
      ///   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "SavedSearch.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="search"></param>
      global::System.Threading.Tasks.Task<int> updateSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default);

      /// <summary>
      /// Permanently deletes the saved search with the provided GUID, if present.
      /// <p/>
      /// NOTE: This function is generally not available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param guid
      ///   The GUID of the search to delete.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
      ///   </li>
      ///   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "SavedSearch.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> expungeSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Finds the position of a note within a sorted subset of all of the user's
      /// notes. This may be useful for thin clients that are displaying a paginated
      /// listing of a large account, which need to know where a particular note
      /// sits in the list without retrieving all notes first.
      /// 
      /// @param authenticationToken
      ///   Must be a valid token for the user's account unless the NoteFilter
      ///   'notebookGuid' is the GUID of a public notebook.
      /// 
      /// @param filter
      ///   The list of criteria that will constrain the notes to be returned.
      /// 
      /// @param guid
      ///   The GUID of the note to be retrieved.
      /// 
      /// @return
      ///   If the note with the provided GUID is found within the matching note
      ///   list, this will return the offset of that note within that list (where
      ///   the first offset is 0).  If the note is not found within the set of
      ///   notes, this will return -1.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
      ///   </li>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - not found, by GUID
      ///   </li>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="filter"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> findNoteOffset(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Used to find the high-level information about a set of the notes from a
      /// user's account based on various criteria specified via a NoteFilter object.
      /// <p/>
      /// Web applications that wish to periodically check for new content in a user's
      /// Evernote account should consider using webhooks instead of polling this API.
      /// See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
      /// for more information.
      /// 
      /// @param authenticationToken
      ///   Must be a valid token for the user's account unless the NoteFilter
      ///   'notebookGuid' is the GUID of a public notebook.
      /// 
      /// @param filter
      ///   The list of criteria that will constrain the notes to be returned.
      /// 
      /// @param offset
      ///   The numeric index of the first note to show within the sorted
      ///   results.  The numbering scheme starts with "0".  This can be used for
      ///   pagination.
      /// 
      /// @param maxNotes
      ///   The maximum notes to return in this query.  The service will return a set
      ///   of notes that is no larger than this number, but may return fewer notes
      ///   if needed.  The NoteList.totalNotes field in the return value will
      ///   indicate whether there are more values available after the returned set.
      ///   Currently, the service will not return more than 250 notes in a single request,
      ///   but this number may change in the future.
      /// 
      /// @param resultSpec
      ///   This specifies which information should be returned for each matching
      ///   Note. The fields on this structure can be used to eliminate data that
      ///   the client doesn't need, which will reduce the time and bandwidth
      ///   to receive and process the reply.
      /// 
      /// @return
      ///   The list of notes that match the criteria.
      ///   The Notes.sharedNotes field will not be set.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="filter"></param>
      /// <param name="offset"></param>
      /// <param name="maxNotes"></param>
      /// <param name="resultSpec"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NotesMetadataList> findNotesMetadata(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, int offset, int maxNotes, global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec resultSpec, CancellationToken cancellationToken = default);

      /// <summary>
      /// This function is used to determine how many notes are found for each
      /// notebook and tag in the user's account, given a current set of filter
      /// parameters that determine the current selection.  This function will
      /// return a structure that gives the note count for each notebook and tag
      /// that has at least one note under the requested filter.  Any notebook or
      /// tag that has zero notes in the filtered set will not be listed in the
      /// reply to this function (so they can be assumed to be 0).
      /// 
      /// @param authenticationToken
      ///   Must be a valid token for the user's account unless the NoteFilter
      ///   'notebookGuid' is the GUID of a public notebook.
      /// 
      /// @param filter
      ///   The note selection filter that is currently being applied.  The note
      ///   counts are to be calculated with this filter applied to the total set
      ///   of notes in the user's account.
      /// 
      /// @param withTrash
      ///   If true, then the NoteCollectionCounts.trashCount will be calculated
      ///   and supplied in the reply. Otherwise, the trash value will be omitted.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed</li>
      ///   <li>BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed</li>
      ///   <li>BAD_DATA_FORMAT "NoteFilter.words" - if search string too long</li>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - not found, by GUID</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="filter"></param>
      /// <param name="withTrash"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NoteCollectionCounts> findNoteCounts(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, bool withTrash, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of the note in the service with the provided
      /// GUID.  The ENML contents of the note will only be provided if the
      /// 'withContent' parameter is true.  The service will include the meta-data
      /// for each resource in the note, but the binary content depends
      /// on whether it is explicitly requested in resultSpec parameter.
      /// If the Note is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).  The applicationData
      /// fields are returned as keysOnly.
      /// 
      /// @param authenticationToken
      ///   An authentication token that grants the caller access to the requested note.
      /// 
      /// @param guid
      ///   The GUID of the note to be retrieved.
      /// 
      /// @param resultSpec
      ///   A structure specifying the fields of the note that the caller would like to get.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="resultSpec"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNoteWithResultSpec(string authenticationToken, string guid, global::Evernote.EDAM.NoteStore.NoteResultSpec resultSpec, CancellationToken cancellationToken = default);

      /// <summary>
      /// DEPRECATED. See getNoteWithResultSpec.
      /// 
      /// This function is equivalent to getNoteWithResultSpec, with each of the boolean parameters
      /// mapping to the equivalent field of a NoteResultSpec. The Note.sharedNotes field is never
      /// populated on the returned note. To get a note with its shares, use getNoteWithResultSpec.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="withContent"></param>
      /// <param name="withResourcesData"></param>
      /// <param name="withResourcesRecognition"></param>
      /// <param name="withResourcesAlternateData"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNote(string authenticationToken, string guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get all of the application data for the note identified by GUID,
      /// with values returned within the LazyMap fullMap field.
      /// If there are no applicationData entries, then a LazyMap
      /// with an empty fullMap will be returned. If your application
      /// only needs to fetch its own applicationData entry, use
      /// getNoteApplicationDataEntry instead.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> getNoteApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the value of a single entry in the applicationData map
      /// for the note identified by GUID.
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - note not found, by GUID</li>
      ///   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      global::System.Threading.Tasks.Task<string> getNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default);

      /// <summary>
      /// Update, or create, an entry in the applicationData map for
      /// the note identified by guid.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task<int> setNoteApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Remove an entry identified by 'key' from the applicationData map for
      /// the note identified by 'guid'. Silently ignores an unset of a
      /// non-existing key.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      global::System.Threading.Tasks.Task<int> unsetNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns XHTML contents of the note with the provided GUID.
      /// If the Note is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the note to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<string> getNoteContent(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a block of the extracted plain text contents of the note with the
      /// provided GUID.  This text can be indexed for search purposes by a light
      /// client that doesn't have capabilities to extract all of the searchable
      /// text content from the note and its resources.
      /// 
      /// If the Note is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the note to be retrieved.
      /// 
      /// @param noteOnly
      ///   If true, this will only return the text extracted from the ENML contents
      ///   of the note itself.  If false, this will also include the extracted text
      ///   from any text-bearing resources (PDF, recognized images)
      /// 
      /// @param tokenizeForIndexing
      ///   If true, this will break the text into cleanly separated and sanitized
      ///   tokens.  If false, this will return the more raw text extraction, with
      ///   its original punctuation, capitalization, spacing, etc.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="noteOnly"></param>
      /// <param name="tokenizeForIndexing"></param>
      global::System.Threading.Tasks.Task<string> getNoteSearchText(string authenticationToken, string guid, bool noteOnly, bool tokenizeForIndexing, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a block of the extracted plain text contents of the resource with
      /// the provided GUID.  This text can be indexed for search purposes by a light
      /// client that doesn't have capability to extract all of the searchable
      /// text content from a resource.
      /// 
      /// If the Resource is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the resource to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<string> getResourceSearchText(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of the names of the tags for the note with the provided
      /// guid.  This can be used with authentication to get the tags for a
      /// user's own note, or can be used without valid authentication to retrieve
      /// the names of the tags for a note in a public notebook.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<List<string>> getNoteTagNames(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to make a note with the provided set of information.
      /// 
      /// @param note
      ///   A Note object containing the desired fields to be populated on
      ///   the service.
      /// 
      /// @return
      ///   The newly created Note from the service.  The server-side
      ///   GUIDs for the Note and any Resources will be saved in this object.
      ///   The service will include the meta-data
      ///   for each resource in the note, but the binary contents of the resources
      ///   and their recognition data will be omitted (except Recognition Resource body,
      ///   for which the behavior is unspecified).
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
      ///   </li>
      ///   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
      ///   </li>
      ///   <li> DATA_REQUIRED "Resource.data" - resource data body missing
      ///   </li>
      ///   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
      ///   </li>
      ///   <li> LIMIT_REACHED "Note" - at max number per account
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.size" - total note size too large
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
      ///   </li>
      ///   <li> LIMIT_REACHED "Resource.data.size" - resource too large
      ///   </li>
      ///   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
      ///   </li>
      ///   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
      ///   </li>
      ///   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
      ///     of the specified tags had an invalid length or pattern
      ///   </li>
      ///   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
      ///     new tags would exceed the maximum number per account
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.notebookGuid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="note"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> createNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default);

      /// <summary>
      /// Submit a set of changes to a note to the service.  The provided data
      /// must include the note's guid field for identification. The note's
      /// title must also be set.
      /// 
      /// @param note
      ///   A Note object containing the desired fields to be populated on
      ///   the service. With the exception of the note's title and guid, fields
      ///   that are not being changed do not need to be set. If the content is not
      ///   being modified, note.content should be left unset. If the list of
      ///   resources is not being modified, note.resources should be left unset.
      /// 
      /// @return
      ///   The Note.sharedNotes field will not be set.
      ///   The service will include the meta-data
      ///   for each resource in the note, but the binary contents of the resources
      ///   and their recognition data will be omitted.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
      ///   </li>
      ///   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
      ///   </li>
      ///   <li> DATA_REQUIRED "Resource.data" - resource data body missing
      ///   </li>
      ///   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
      ///   </li>
      ///   <li> LIMIT_REACHED "Note.size" - total note size too large
      ///   </li>
      ///   <li> LIMIT_REACHED "Resource.data.size" - resource too large
      ///   </li>
      ///   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
      ///   </li>
      ///   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
      ///   <li> PERMISSION_DENIED "Note.tags" - user doesn't have permission to
      ///     modify the note's tags. note.tags must be unset.
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note.attributes" - user doesn't have permission
      ///     to modify the note's attributes. note.attributes must be unset.
      ///   </li>
      ///   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
      ///     of the specified tags had an invalid length or pattern
      ///   </li>
      ///   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
      ///     new tags would exceed the maximum number per account
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - note not found, by GUID
      ///   </li>
      ///   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="note"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> updateNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default);

      /// <summary>
      /// Moves the note into the trash. The note may still be undeleted, unless it
      /// is expunged.  This is equivalent to calling updateNote() after setting
      /// Note.active = false
      /// 
      /// @param guid
      ///   The GUID of the note to delete.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
      ///          update the note.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
      ///   </li>
      /// </ul>
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> deleteNote(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Permanently removes a Note, and all of its Resources,
      /// from the service.
      /// <p/>
      /// NOTE: This function is not available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param guid
      ///   The GUID of the note to delete.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> PERMISSION_DENIED "Note" - user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> expungeNote(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Performs a deep copy of the Note with the provided GUID 'noteGuid' into
      /// the Notebook with the provided GUID 'toNotebookGuid'.
      /// The caller must be the owner of both the Note and the Notebook.
      /// This creates a new Note in the destination Notebook with new content and
      /// Resources that match all of the content and Resources from the original
      /// Note, but with new GUID identifiers.
      /// The original Note is not modified by this operation.
      /// The copied note is considered as an "upload" for the purpose of upload
      /// transfer limit calculation, so its size is added to the upload count for
      /// the owner.
      /// 
      /// If the original note has been shared and has SharedNote records, the shares
      /// are NOT copied.
      /// 
      /// @param noteGuid
      ///   The GUID of the Note to copy.
      /// 
      /// @param toNotebookGuid
      ///   The GUID of the Notebook that should receive the new Note.
      /// 
      /// @return
      ///   The metadata for the new Note that was created.  This will include the
      ///   new GUID for this Note (and any copied Resources), but will not include
      ///   the content body or the binary bodies of any Resources.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> LIMIT_REACHED "Note" - at max number per account
      ///   </li>
      ///   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - user doesn't own
      ///   </li>
      ///   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Notebook.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="noteGuid"></param>
      /// <param name="toNotebookGuid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> copyNote(string authenticationToken, string noteGuid, string toNotebookGuid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of the prior versions of a particular note that are
      /// saved within the service.  These prior versions are stored to provide a
      /// recovery from unintentional removal of content from a note. The identifiers
      /// that are returned by this call can be used with getNoteVersion to retrieve
      /// the previous note.
      /// The identifiers will be listed from the most recent versions to the oldest.
      /// This call is only available for notes in Premium accounts. (I.e. access
      /// to past versions of Notes is a Premium-only feature.)
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "Note.guid" - if GUID is null or empty string.
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if GUID is not of correct length.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID.
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="noteGuid"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.NoteStore.NoteVersionId>> listNoteVersions(string authenticationToken, string noteGuid, CancellationToken cancellationToken = default);

      /// <summary>
      /// This can be used to retrieve a previous version of a Note after it has been
      /// updated within the service.  The caller must identify the note (via its
      /// guid) and the version (via the updateSequenceNumber of that version).
      /// to find a listing of the stored version USNs for a note, call
      /// listNoteVersions.
      /// This call is only available for notes in Premium accounts. (I.e. access
      /// to past versions of Notes is a Premium-only feature.)
      /// 
      /// @param noteGuid
      ///   The GUID of the note to be retrieved.
      /// 
      /// @param updateSequenceNum
      ///   The USN of the version of the note that is being retrieved
      /// 
      /// @param withResourcesData
      ///   If true, any Resource elements in this Note will include the binary
      ///   contents of their 'data' field's body.
      /// 
      /// @param withResourcesRecognition
      ///   If true, any Resource elements will include the binary contents of the
      ///   'recognition' field's body if recognition data is present.
      /// 
      /// @param withResourcesAlternateData
      ///   If true, any Resource elements in this Note will include the binary
      ///   contents of their 'alternateData' fields' body, if an alternate form
      ///   is present.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "Note.guid" - if GUID is null or empty string.
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if GUID is not of correct length.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID.
      ///   </li>
      ///   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
      ///      the corresponding USN.
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="noteGuid"></param>
      /// <param name="updateSequenceNum"></param>
      /// <param name="withResourcesData"></param>
      /// <param name="withResourcesRecognition"></param>
      /// <param name="withResourcesAlternateData"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNoteVersion(string authenticationToken, string noteGuid, int updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of the resource in the service with the
      /// provided GUID.
      /// If the Resource is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).  Only the
      /// keys for the applicationData will be returned.
      /// 
      /// @param guid
      ///   The GUID of the resource to be retrieved.
      /// 
      /// @param withData
      ///   If true, the Resource will include the binary contents of the
      ///   'data' field's body.
      /// 
      /// @param withRecognition
      ///   If true, the Resource will include the binary contents of the
      ///   'recognition' field's body if recognition data is present.
      /// 
      /// @param withAttributes
      ///   If true, the Resource will include the attributes
      /// 
      /// @param withAlternateData
      ///   If true, the Resource will include the binary contents of the
      ///   'alternateData' field's body, if an alternate form is present.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="withData"></param>
      /// <param name="withRecognition"></param>
      /// <param name="withAttributes"></param>
      /// <param name="withAlternateData"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get all of the application data for the Resource identified by GUID,
      /// with values returned within the LazyMap fullMap field.
      /// If there are no applicationData entries, then a LazyMap
      /// with an empty fullMap will be returned. If your application
      /// only needs to fetch its own applicationData entry, use
      /// getResourceApplicationDataEntry instead.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> getResourceApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get the value of a single entry in the applicationData map
      /// for the Resource identified by GUID.
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - Resource not found, by GUID</li>
      ///   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      global::System.Threading.Tasks.Task<string> getResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default);

      /// <summary>
      /// Update, or create, an entry in the applicationData map for
      /// the Resource identified by guid.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      /// <param name="value"></param>
      global::System.Threading.Tasks.Task<int> setResourceApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default);

      /// <summary>
      /// Remove an entry identified by 'key' from the applicationData map for
      /// the Resource identified by 'guid'.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      /// <param name="key"></param>
      global::System.Threading.Tasks.Task<int> unsetResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default);

      /// <summary>
      /// Submit a set of changes to a resource to the service.  This can be used
      /// to update the meta-data about the resource, but cannot be used to change
      /// the binary contents of the resource (including the length and hash).  These
      /// cannot be changed directly without creating a new resource and removing the
      /// old one via updateNote.
      /// 
      /// @param resource
      ///   A Resource object containing the desired fields to be populated on
      ///   the service.  The service will attempt to update the resource with the
      ///   following fields from the client:
      ///   <ul>
      ///      <li>guid:  must be provided to identify the resource
      ///      </li>
      ///      <li>mime
      ///      </li>
      ///      <li>width
      ///      </li>
      ///      <li>height
      ///      </li>
      ///      <li>duration
      ///      </li>
      ///      <li>attributes:  optional.  if present, the set of attributes will
      ///           be replaced.
      ///      </li>
      ///   </ul>
      /// 
      /// @return
      ///   The Update Sequence Number of the resource after the changes have been
      ///   applied.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
      ///   </li>
      ///   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="resource"></param>
      global::System.Threading.Tasks.Task<int> updateResource(string authenticationToken, global::Evernote.EDAM.Type.Resource resource, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns binary data of the resource with the provided GUID.  For
      /// example, if this were an image resource, this would contain the
      /// raw bits of the image.
      /// If the Resource is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the resource to be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<byte[]> getResourceData(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the current state of a resource, referenced by containing
      /// note GUID and resource content hash.
      /// 
      /// @param noteGuid
      ///   The GUID of the note that holds the resource to be retrieved.
      /// 
      /// @param contentHash
      ///   The MD5 checksum of the resource within that note. Note that
      ///   this is the binary checksum, for example from Resource.data.bodyHash,
      ///   and not the hex-encoded checksum that is used within an en-media
      ///   tag in a note body.
      /// 
      /// @param withData
      ///   If true, the Resource will include the binary contents of the
      ///   'data' field's body.
      /// 
      /// @param withRecognition
      ///   If true, the Resource will include the binary contents of the
      ///   'recognition' field's body.
      /// 
      /// @param withAlternateData
      ///   If true, the Resource will include the binary contents of the
      ///   'alternateData' field's body, if an alternate form is present.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
      ///   </li>
      ///   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note" - not found, by guid
      ///   </li>
      ///   <li> "Resource" - not found, by hash
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="noteGuid"></param>
      /// <param name="contentHash"></param>
      /// <param name="withData"></param>
      /// <param name="withRecognition"></param>
      /// <param name="withAlternateData"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition, bool withAlternateData, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the binary contents of the recognition index for the resource
      /// with the provided GUID.  If the caller asks about a resource that has
      /// no recognition data, this will throw EDAMNotFoundException.
      /// If the Resource is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the resource whose recognition data should be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      ///   <li> "Resource.recognition" - resource has no recognition
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<byte[]> getResourceRecognition(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// If the Resource with the provided GUID has an alternate data representation
      /// (indicated via the Resource.alternateData field), then this request can
      /// be used to retrieve the binary contents of that alternate data file.
      /// If the caller asks about a resource that has no alternate data form, this
      /// will throw EDAMNotFoundException.
      /// 
      /// @param guid
      ///    The GUID of the resource whose recognition data should be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      ///   <li> "Resource.alternateData" - resource has no recognition
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<byte[]> getResourceAlternateData(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the set of attributes for the Resource with the provided GUID.
      /// If the Resource is found in a public notebook, the authenticationToken
      /// will be ignored (so it could be an empty string).
      /// 
      /// @param guid
      ///   The GUID of the resource whose attributes should be retrieved.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
      ///   </li>
      ///   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Resource.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.ResourceAttributes> getResourceAttributes(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// <p>
      /// Looks for a user account with the provided userId on this NoteStore
      /// shard and determines whether that account contains a public notebook
      /// with the given URI.  If the account is not found, or no public notebook
      /// exists with this URI, this will throw an EDAMNotFoundException,
      /// otherwise this will return the information for that Notebook.
      /// </p>
      /// <p>
      /// If a notebook is visible on the web with a full URL like
      /// http://www.evernote.com/pub/sethdemo/api
      /// Then 'sethdemo' is the username that can be used to look up the userId,
      /// and 'api' is the publicUri.
      /// </p>
      /// 
      /// @param userId
      ///    The numeric identifier for the user who owns the public notebook.
      ///    To find this value based on a username string, you can invoke
      ///    UserStore.getPublicUserInfo
      /// 
      /// @param publicUri
      ///    The uri string for the public notebook, from Notebook.publishing.uri.
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"Publishing.uri" - not found, by URI</li>
      /// </ul>
      /// 
      /// @throws EDAMSystemException <ul>
      ///   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
      ///     taken down (for all requesters).</li>
      ///   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
      ///     down for the requester because of an IP-based country lookup.</li>
      /// </ul>
      /// </summary>
      /// <param name="userId"></param>
      /// <param name="publicUri"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getPublicNotebook(int userId, string publicUri, CancellationToken cancellationToken = default);

      /// <summary>
      /// * @Deprecated for first-party clients. See createOrUpdateNotebookShares.
      /// *
      /// * Share a notebook with an email address, and optionally to a specific
      /// * recipient. If an existing SharedNotebook associated with
      /// * sharedNotebook.notebookGuid is found by recipientUsername or email, then
      /// * the values of sharedNotebook will be used to update the existing record,
      /// * else a new record will be created.
      /// *
      /// * If recipientUsername is set and there is already a SharedNotebook
      /// * for that Notebook with that recipientUsername and the privileges on the
      /// * existing notebook are lower, than on this one, this will update the
      /// * privileges and sharerUserId. If there isn't an existing SharedNotebook for
      /// * recipientUsername, this will create and return a shared notebook for that
      /// * email and recipientUsername. If recipientUsername is not set and there
      /// * already is a SharedNotebook for a Notebook for that email address and the
      /// * privileges on the existing SharedNotebook are lower than on this one, this
      /// * will update the privileges and sharerUserId, and return the updated
      /// * SharedNotebook. Otherwise, this will create and return a SharedNotebook for
      /// * the email address.
      /// *
      /// * If the authenticationToken is a Business auth token, recipientUsername is
      /// * set and the recipient is in the same business as the business auth token,
      /// * this method will also auto-join the business user to the SharedNotebook -
      /// * that is it will set serviceJoined on the SharedNotebook and create a
      /// * LinkedNotebook on the recipient's account pointing to the SharedNotebook.
      /// * The LinkedNotebook creation happens out-of-band, so there will be a delay
      /// * on the order of half a minute between the SharedNotebook and LinkedNotebook
      /// * creation.
      /// *
      /// * Also handles sending an email to the email addresses: if a SharedNotebook
      /// * is being created, this will send the shared notebook invite email, and
      /// * if a SharedNotebook already exists, it will send the shared notebook
      /// * reminder email. Both these emails contain a link to join the notebook.
      /// * If the notebook is being auto-joined, it sends an email with that
      /// * information to the recipient.
      /// *
      /// * @param authenticationToken
      /// *   Must be an authentication token from the owner or a shared notebook
      /// *   authentication token or business authentication token with sufficient
      /// *   permissions to change invitations for a notebook.
      /// *
      /// * @param sharedNotebook
      /// *   A shared notebook object populated with the email address of the share
      /// *   recipient, the notebook guid and the access permissions. All other
      /// *   attributes of the shared object are ignored. The SharedNotebook.allowPreview
      /// *   field must be explicitly set with either a true or false value.
      /// *
      /// * @param message
      /// *   The sharer-defined message to put in the email sent out.
      /// *
      /// * @return
      /// *   The fully populated SharedNotebook object including the server assigned
      /// *   globalId which can both be used to uniquely identify the SharedNotebook.
      /// *
      /// * @throws EDAMUserException <ul>
      /// *   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
      /// *   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the
      /// *       SharedNotebook.privilegeLevel was not set.</li>
      /// *   <li>BAD_DATA_FORMAT "SharedNotebook.requireLogin" - if requireLogin was
      /// *       set. requireLogin is deprecated.</li>
      /// *   <li>BAD_DATA_FORMAT "SharedNotebook.privilegeLevel" - if the
      /// *       SharedNotebook.privilegeLevel field was unset or set to GROUP.</li>
      /// *   <li>PERMISSION_DENIED "user" - if the email address on the authenticationToken's
      ///         owner's account is not confirmed.</li>
      /// *   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
      /// *       recipientSettings is set in the sharedNotebook.  Only the recipient
      /// *       can set these values via the setSharedNotebookRecipientSettings
      /// *       method.</li>
      /// *   <li>EDAMErrorCode.LIMIT_REACHED "SharedNotebook" - The notebook already has
      /// *       EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX shares.</li>
      /// *   </ul>
      /// * @throws EDAMNotFoundException <ul>
      /// *   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
      /// *   </li>
      /// *   </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="sharedNotebook"></param>
      /// <param name="message"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> shareNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, string message, CancellationToken cancellationToken = default);

      /// <summary>
      /// Share a notebook by a messaging thread ID or a list of contacts. This function is
      /// intended to be used in conjunction with Evernote messaging, and as such does not
      /// notify the recipient that a notebook has been shared with them.
      /// 
      /// Sharing with a subset of participants on a thread is accomplished by specifying both
      /// a thread ID and a list of contacts. This ensures that even if those contacts are
      /// on the thread under a deactivated identity, the correct user (the one who has the
      /// given contact on the thread) receives the share.
      /// 
      /// @param authenticationToken
      ///   An authentication token that grants the caller permission to share the notebook.
      ///   This should be an owner token if the notebook is owned by the caller.
      ///   If the notebook is a business notebook to which the caller has full access,
      ///   this should be their business authentication token. If the notebook is a shared
      ///   (non-business) notebook to which the caller has full access, this should be the
      ///   shared notebook authentication token returned by NoteStore.authenticateToNotebook.
      /// 
      /// @param shareTemplate
      ///   Specifies the GUID of the notebook to be shared, the privilege at which the notebook
      ///   should be shared, and the recipient information.
      /// 
      /// @return
      ///   A structure containing the USN of the Notebook after the change and a list of created
      ///   or updated SharedNotebooks.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>DATA_REQUIRED "Notebook.guid" - if no notebook GUID was specified</li>
      ///   <li>BAD_DATA_FORMAT "Notebook.guid" - if shareTemplate.notebookGuid is not a
      ///     valid GUID</li>
      ///   <li>DATA_REQUIRED "shareTemplate" - if the shareTemplate parameter was missing</li>
      ///   <li>DATA_REQUIRED "NotebookShareTemplate.privilege" - if no privilege was
      ///     specified</li>
      ///   <li>DATA_CONFLICT "NotebookShareTemplate.privilege" - if the specified privilege
      ///     is not allowed.</li>
      ///   <li>DATA_REQUIRED "NotebookShareTemplate.recipients" - if no recipients were
      ///     specified, either by thread ID or as a list of contacts</li>
      ///   <li>LIMIT_REACHED "SharedNotebook" - if the notebook has reached its maximum
      ///     number of shares</li>
      /// </ul>
      /// 
      /// @throws EDAMInvalidContactsException <ul>
      ///   <li>"NotebookShareTemplate.recipients" - if one or more of the recipients specified
      ///     in shareTemplate.recipients was not syntactically valid, or if attempting to
      ///     share a notebook with an Evernote identity that the sharer does not have a
      ///     connection to. The exception will specify which recipients were invalid.</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"Notebook.guid" - if no notebook with the specified GUID was found</li>
      ///   <li>"NotebookShareTemplate.recipientThreadId" - if the recipient thread ID was
      ///     specified, but no thread with that ID exists</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="shareTemplate"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult> createOrUpdateNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.NotebookShareTemplate shareTemplate, CancellationToken cancellationToken = default);

      /// <summary>
      /// @Deprecated See createOrUpdateNotebookShares and manageNotebookShares.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="sharedNotebook"></param>
      global::System.Threading.Tasks.Task<int> updateSharedNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// Set values for the recipient settings associated with a notebook share. Only the
      /// recipient of the share can update their recipient settings.
      /// 
      /// If you do <i>not</i> wish to, or cannot, change one of the recipient settings fields,
      /// you must leave that field unset in recipientSettings.
      /// This method will skip that field for updates and attempt to leave the existing value as
      /// it is.
      /// 
      /// If recipientSettings.inMyList is false, both reminderNotifyInApp and reminderNotifyEmail
      /// will be either left as null or converted to false (if currently true).
      /// 
      /// To unset a notebook's stack, pass in the empty string for the stack field.
      /// 
      /// @param authenticationToken The owner authentication token for the recipient of the share.
      /// 
      /// @return The updated Notebook with the new recipient settings. Note that some of the
      /// recipient settings may differ from what was requested. Clients should update their state
      /// based on this return value.
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>Notebook.guid - Thrown if the service does not have a notebook record with the
      ///       notebookGuid on the given shard.</li>
      ///   <li>Publishing.publishState - Thrown if the business notebook is not shared with the
      ///       user and is also not published to their business.</li>
      /// </ul>
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>PEMISSION_DENIED "authenticationToken" - If the owner of the given token is not
      ///       allowed to set recipient settings on the specified notebook.</li>
      ///   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting reminderNotifyEmail
      ///       is allowed only for notebooks which belong to the same business as the user.</li>
      ///   <li>DATA_CONFLICT "recipientSettings.inMyList" - If the request is setting inMyList
      ///       to false and any of reminder* settings to true.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="notebookGuid"></param>
      /// <param name="recipientSettings"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> setNotebookRecipientSettings(string authenticationToken, string notebookGuid, global::Evernote.EDAM.Type.NotebookRecipientSettings recipientSettings, CancellationToken cancellationToken = default);

      /// <summary>
      /// Lists the collection of shared notebooks for all notebooks in the
      /// users account.
      /// 
      /// @return
      ///  The list of all SharedNotebooks for the user
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SharedNotebook>> listSharedNotebooks(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to make a linked notebook with the provided name, username
      /// of the owner and identifiers provided. A linked notebook can be either a
      /// link to a public notebook or to a private shared notebook.
      /// 
      /// @param linkedNotebook
      ///   The desired fields for the linked notebook must be provided on this
      ///   object.  The name of the linked notebook must be set. Either a username
      ///   uri or a shard id and share key must be provided otherwise a
      ///   EDAMUserException is thrown.
      /// 
      /// @return
      ///   The newly created LinkedNotebook.  The server-side id will be
      ///   saved in this object's 'id' field.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "LinkedNotebook.shareName" - missing shareName
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid shareName length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
      ///     if public notebook set but bad uri
      ///   </li>
      ///   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
      ///     if private notebook but shard id not provided
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.stack" - invalid stack name length or pattern
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMSystemException <ul>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.sharedNotebookGlobalId" -
      ///     if a bad global identifer was set on a private notebook
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="linkedNotebook"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LinkedNotebook> createLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// @param linkedNotebook
      ///   Updates the name of a linked notebook.
      /// 
      /// @return
      ///   The Update Sequence Number for this change within the account.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "LinkedNotebook.shareName" - missing shareName
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.shareName" - invalid shareName length or pattern
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "LinkedNotebook.stack" - invalid stack name length or pattern
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="linkedNotebook"></param>
      global::System.Threading.Tasks.Task<int> updateLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns a list of linked notebooks
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.LinkedNotebook>> listLinkedNotebooks(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Permanently expunges the linked notebook from the account.
      /// <p/>
      /// NOTE: This function is generally not available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param guid
      ///   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
      ///   from the account.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<int> expungeLinkedNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to produce an authentication token that can be used to
      /// access the contents of a shared notebook from someone else's account.
      /// This authenticationToken can be used with the various other NoteStore
      /// calls to find and retrieve notes, and if the permissions in the shared
      /// notebook are sufficient, to make changes to the contents of the notebook.
      /// 
      /// @param shareKeyOrGlobalId
      ///   May be one of the following:
      ///   <ul>
      ///     <li>A share key for a shared notebook that was granted to some recipient
      ///         Must be used if you are joining a notebook unless it was shared via
      ///         createOrUpdateNotebookShares. Share keys are delivered out-of-band
      ///         and are generally not available to clients. For security reasons,
      ///         share keys may be invalidated at the discretion of the service.
      ///     </li>
      ///     <li>The shared notebook global identifier. May be used to access a
      ///         notebook that is already joined.
      ///     </li>
      ///     <li>The Notebook GUID. May be used to access a notebook that was already
      ///         joined, or to access a notebook that was shared with the recipient
      ///         via createOrUpdateNotebookShares.
      ///     </li>
      ///   </ul>
      /// 
      /// @param authenticationToken
      ///   If a non-empty string is provided, this is the full user-based
      ///   authentication token that identifies the user who is currently logged in
      ///   and trying to access the shared notebook.
      ///   If this string is empty, the service will attempt to authenticate to the
      ///   shared notebook without any logged in user.
      /// 
      /// @throws EDAMSystemException <ul>
      ///   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string</li>
      ///   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "SharedNotebook.id" - the shared notebook no longer exists</li>
      /// </ul>
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
      ///          no valid authentication token was provided.
      ///   </li>
      ///   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
      ///          and another username has already been bound to this notebook.
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="shareKeyOrGlobalId"></param>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// This function is used to retrieve extended information about a shared
      /// notebook by a guest who has already authenticated to access that notebook.
      /// This requires an 'authenticationToken' parameter which should be the
      /// resut of a call to authenticateToSharedNotebook(...).
      /// I.e. this is the token that gives access to the particular shared notebook
      /// in someone else's account -- it's not the authenticationToken for the
      /// owner of the notebook itself.
      /// 
      /// @param authenticationToken
      ///   Should be the authentication token retrieved from the reply of
      ///   authenticateToSharedNotebook(), proving access to a particular shared
      ///   notebook.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> PERMISSION_DENIED "authenticationToken" -
      ///          authentication token doesn't correspond to a valid shared notebook
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "SharedNotebook.id" - the shared notebook no longer exists
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> getSharedNotebookByAuth(string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Attempts to send a single note to one or more email recipients.
      /// <p/>
      /// NOTE: This function is generally not available to third party applications.
      /// Calls will result in an EDAMUserException with the error code
      /// PERMISSION_DENIED.
      /// 
      /// @param authenticationToken
      ///    The note will be sent as the user logged in via this token, using that
      ///    user's registered email address.  If the authenticated user doesn't
      ///    have permission to read that note, the emailing will fail.
      /// 
      /// @param parameters
      ///    The note must be specified either by GUID (in which case it will be
      ///    sent using the existing data in the service), or else the full Note
      ///    must be passed to this call.  This also specifies the additional
      ///    email fields that will be used in the email.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
      ///     The email can't be sent because this would exceed the user's daily
      ///     email limit.
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "(email address)" -
      ///     email address malformed
      ///   </li>
      ///   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
      ///     if there are no To: or Cc: addresses provided.
      ///   </li>
      ///   <li> DATA_REQUIRED "Note.title" -
      ///     if the caller provides a Note parameter with no title
      ///   </li>
      ///   <li> DATA_REQUIRED "Note.content" -
      ///     if the caller provides a Note parameter with no content
      ///   </li>
      ///   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
      ///   </li>
      ///   <li> DATA_REQUIRED "NoteEmailParameters.note" -
      ///     if no guid or note provided
      ///   </li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="parameters"></param>
      global::System.Threading.Tasks.Task emailNote(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteEmailParameters parameters, CancellationToken cancellationToken = default);

      /// <summary>
      /// If this note is not already shared publicly (via its own direct URL), then this
      /// will start sharing that note.
      /// This will return the secret "Note Key" for this note that
      /// can currently be used in conjunction with the Note's GUID to gain direct
      /// read-only access to the Note.
      /// If the note is already shared, then this won't make any changes to the
      /// note, and the existing "Note Key" will be returned.  The only way to change
      /// the Note Key for an existing note is to stopSharingNote first, and then
      /// call this function.
      /// 
      /// @param guid
      ///   The GUID of the note to be shared.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing</li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "Note.guid" - not found, by GUID</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task<string> shareNote(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// If this note is shared publicly then this will stop sharing that note
      /// and invalidate its "Note Key", so any existing URLs to access that Note
      /// will stop working.
      /// 
      /// If the Note is not shared, then this function will do nothing.
      /// 
      /// This function does not remove invididual shares for the note. To remove
      /// individual shares, see stopSharingNoteWithRecipients.
      /// 
      /// @param guid
      ///   The GUID of the note to be un-shared.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing</li>
      ///   <li> PERMISSION_DENIED "Note" - private note, user doesn't own</li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"Note.guid" - not found, by GUID</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="guid"></param>
      global::System.Threading.Tasks.Task stopSharingNote(string authenticationToken, string guid, CancellationToken cancellationToken = default);

      /// <summary>
      /// Asks the service to produce an authentication token that can be used to
      /// access the contents of a single Note which was individually shared
      /// from someone's account.
      /// This authenticationToken can be used with the various other NoteStore
      /// calls to find and retrieve the Note and its directly-referenced children.
      /// 
      /// @param guid
      ///   The GUID identifying this Note on this shard.
      /// 
      /// @param noteKey
      ///   The 'noteKey' identifier from the Note that was originally created via
      ///   a call to shareNote() and then given to a recipient to access.
      /// 
      /// @param authenticationToken
      ///   An optional authenticationToken that identifies the user accessing the
      ///   shared note. This parameter may be required to access some shared notes.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
      ///     shared, or the noteKey doesn't match the current key for this note
      ///   </li>
      ///   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
      ///     required to access this Note, but either no authentication token or a
      ///     "non-owner" authentication token was provided.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li> "guid" - the note with that GUID is not found
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMSystemException <ul>
      ///   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
      ///     all requesters).
      ///   </li>
      ///   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
      ///     for the requester because of an IP-based country lookup.
      ///   </ul>
      /// </ul>
      /// </summary>
      /// <param name="guid"></param>
      /// <param name="noteKey"></param>
      /// <param name="authenticationToken"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToSharedNote(string guid, string noteKey, string authenticationToken, CancellationToken cancellationToken = default);

      /// <summary>
      /// Identify related entities on the service, such as notes,
      /// notebooks, tags and users in a business related to notes or content.
      /// 
      /// @param query
      ///   The information about which we are finding related entities.
      /// 
      /// @param resultSpec
      ///   Allows the client to indicate the type and quantity of
      ///   information to be returned, allowing a saving of time and
      ///   bandwidth.
      /// 
      /// @return
      ///   The result of the query, with information considered
      ///   to likely be relevantly related to the information
      ///   described by the query.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
      ///     a zero-length plain text value.
      ///   </li>
      ///   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
      ///     invalid Note GUID, that is, one that does not match the constraints
      ///     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
      ///   </li>
      ///   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
      ///   </li>
      ///   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
      ///     the note identified by RelatedQuery.noteGuid.
      ///   </li>
      ///   <li>PERMISSION_DENIED "authenticationToken" - If the caller has requested to
      ///     findExperts in the context of a non business user (i.e. The authenticationToken
      ///     is not a business auth token).
      ///   </li>
      ///   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
      ///     in the result spec.
      ///   </li>
      /// </ul>
      /// 
      /// @throws EDAMNotFoundException <ul>
      ///   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
      ///     found, if that field has been set in the query.
      ///   </li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="query"></param>
      /// <param name="resultSpec"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.RelatedResult> findRelated(string authenticationToken, global::Evernote.EDAM.NoteStore.RelatedQuery query, global::Evernote.EDAM.NoteStore.RelatedResultSpec resultSpec, CancellationToken cancellationToken = default);

      /// <summary>
      /// Perform the same operation as updateNote() would provided that the update
      /// sequence number on the parameter Note object matches the current update sequence
      /// number that the service has for the note.  If they do <i>not</i> match, then
      /// <i>no</i> update is performed and the return value will have the current server
      /// state in the note field and updated will be false.  If the update sequence
      /// numbers between the client and server do match, then the note will be updated
      /// and the note field of the return value will be returned as it would be for the
      /// updateNote method.  This method allows you to check for an update to the note
      /// on the service, by another client instance, from when you obtained the
      /// note state as a baseline for your edits and the time when you wish to save your
      /// edits.  If your client can merge the conflict, you can avoid overwriting changes
      /// that were saved to the service by the other client.
      /// 
      /// See the updateNote method for information on the exceptions and parameters for
      /// this method.  The only difference is that you must have an update sequence number
      /// defined on the note parameter (equal to the USN of the note as synched to the
      /// client), and the following additional exceptions might be thrown.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>DATA_REQUIRED "Note.updateSequenceNum" - If the update sequence number was
      ///       not provided.  This includes a value that is set as 0.</li>
      ///   <li>BAD_DATA_FORMAT "Note.updateSequenceNum" - If the note has an update
      ///       sequence number that is larger than the current server value, which should
      ///       not happen if your client is working correctly.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="note"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult> updateNoteIfUsnMatches(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default);

      /// <summary>
      /// Manage invitations and memberships associated with a given notebook.
      /// 
      /// <i>Note:</i> Beta method! This method is currently intended for
      /// limited use by Evernote clients that have discussed using this
      /// routine with the platform team.
      /// 
      /// @param parameters A structure containing all parameters for the updates.
      ///    See the structure documentation for details.
      /// 
      /// @throws EDAMUserException <ul>
      ///   <li>EDAMErrorCode.LIMIT_REACHED "SharedNotebook" - Trying to share a
      ///    notebook while the notebook already has EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX
      ///    shares.</li>
      /// </ul>
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="parameters"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult> manageNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters parameters, CancellationToken cancellationToken = default);

      /// <summary>
      /// Return the share relationships for the given notebook, including
      /// both the invitations and the memberships.
      /// 
      /// <i>Note:</i> Beta method! This method is currently intended for
      /// limited use by Evernote clients that have discussed using this
      /// routine with the platform team.
      /// </summary>
      /// <param name="authenticationToken"></param>
      /// <param name="notebookGuid"></param>
      global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ShareRelationships> getNotebookShares(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Service:  NoteStore
    /// <p>
    /// The NoteStore service is used by EDAM clients to exchange information
    /// about the collection of notes in an account. This is primarily used for
    /// synchronization, but could also be used by a "thin" client without a full
    /// local cache.
    /// </p><p>
    /// Most functions take an "authenticationToken" parameter, which is the
    /// value returned by the UserStore which permits access to the account.
    /// </p>
    /// 
    /// Calls which require an authenticationToken may throw an EDAMUserException
    /// for the following reasons:
    ///  <ul>
    ///   <li>DATA_REQUIRED "authenticationToken" - token is empty</li>
    ///   <li>BAD_DATA_FORMAT "authenticationToken" - token is malformed</li>
    ///   <li>INVALID_AUTH "authenticationToken" - token signature is invalid</li>
    ///   <li>AUTH_EXPIRED "authenticationToken" - token has expired or been revoked</li>
    ///   <li>PERMISSION_DENIED "authenticationToken" - token does not grant permission
    ///       to perform the requested action</li>
    ///   <li>BUSINESS_SECURITY_LOGIN_REQUIRED "sso" - the user is a member of a business
    ///       that requires single sign-on, and must complete SSO before accessing business
    ///       content.
    /// </ul>
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> getSyncState(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_getSyncState(authenticationToken, cancellationToken);
        return await recv_getSyncState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getSyncState(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSyncState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp355 = new InternalStructs.getSyncState_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp355.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> recv_getSyncState(CancellationToken cancellationToken = default)
      {
        
        var tmp356 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp356.Type == TMessageType.Exception)
        {
          var tmp357 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp357;
        }

        var tmp358 = new InternalStructs.getSyncState_result();
        await tmp358.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp358.__isset.success)
        {
          return tmp358.Success;
        }
        if (tmp358.__isset.userException)
        {
          throw tmp358.UserException;
        }
        if (tmp358.__isset.systemException)
        {
          throw tmp358.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSyncState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> getFilteredSyncChunk(string authenticationToken, int afterUSN, int maxEntries, global::Evernote.EDAM.NoteStore.SyncChunkFilter filter, CancellationToken cancellationToken = default)
      {
        await send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter, cancellationToken);
        return await recv_getFilteredSyncChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getFilteredSyncChunk(string authenticationToken, int afterUSN, int maxEntries, global::Evernote.EDAM.NoteStore.SyncChunkFilter filter, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFilteredSyncChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp359 = new InternalStructs.getFilteredSyncChunk_args() {
          AuthenticationToken = authenticationToken,
          AfterUSN = afterUSN,
          MaxEntries = maxEntries,
          Filter = filter,
        };
        
        await tmp359.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> recv_getFilteredSyncChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp360 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp360.Type == TMessageType.Exception)
        {
          var tmp361 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp361;
        }

        var tmp362 = new InternalStructs.getFilteredSyncChunk_result();
        await tmp362.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp362.__isset.success)
        {
          return tmp362.Success;
        }
        if (tmp362.__isset.userException)
        {
          throw tmp362.UserException;
        }
        if (tmp362.__isset.systemException)
        {
          throw tmp362.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFilteredSyncChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> getLinkedNotebookSyncState(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook, cancellationToken);
        return await recv_getLinkedNotebookSyncState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getLinkedNotebookSyncState(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp363 = new InternalStructs.getLinkedNotebookSyncState_args() {
          AuthenticationToken = authenticationToken,
          LinkedNotebook = linkedNotebook,
        };
        
        await tmp363.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncState> recv_getLinkedNotebookSyncState(CancellationToken cancellationToken = default)
      {
        
        var tmp364 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp364.Type == TMessageType.Exception)
        {
          var tmp365 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp365;
        }

        var tmp366 = new InternalStructs.getLinkedNotebookSyncState_result();
        await tmp366.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp366.__isset.success)
        {
          return tmp366.Success;
        }
        if (tmp366.__isset.userException)
        {
          throw tmp366.UserException;
        }
        if (tmp366.__isset.systemException)
        {
          throw tmp366.SystemException;
        }
        if (tmp366.__isset.notFoundException)
        {
          throw tmp366.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLinkedNotebookSyncState failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> getLinkedNotebookSyncChunk(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, bool fullSyncOnly, CancellationToken cancellationToken = default)
      {
        await send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly, cancellationToken);
        return await recv_getLinkedNotebookSyncChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getLinkedNotebookSyncChunk(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, bool fullSyncOnly, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp367 = new InternalStructs.getLinkedNotebookSyncChunk_args() {
          AuthenticationToken = authenticationToken,
          LinkedNotebook = linkedNotebook,
          AfterUSN = afterUSN,
          MaxEntries = maxEntries,
          FullSyncOnly = fullSyncOnly,
        };
        
        await tmp367.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.SyncChunk> recv_getLinkedNotebookSyncChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp368 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp368.Type == TMessageType.Exception)
        {
          var tmp369 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp369;
        }

        var tmp370 = new InternalStructs.getLinkedNotebookSyncChunk_result();
        await tmp370.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp370.__isset.success)
        {
          return tmp370.Success;
        }
        if (tmp370.__isset.userException)
        {
          throw tmp370.UserException;
        }
        if (tmp370.__isset.systemException)
        {
          throw tmp370.SystemException;
        }
        if (tmp370.__isset.notFoundException)
        {
          throw tmp370.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLinkedNotebookSyncChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> listNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listNotebooks(authenticationToken, cancellationToken);
        return await recv_listNotebooks(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listNotebooks", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp371 = new InternalStructs.listNotebooks_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp371.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> recv_listNotebooks(CancellationToken cancellationToken = default)
      {
        
        var tmp372 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp372.Type == TMessageType.Exception)
        {
          var tmp373 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp373;
        }

        var tmp374 = new InternalStructs.listNotebooks_result();
        await tmp374.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp374.__isset.success)
        {
          return tmp374.Success;
        }
        if (tmp374.__isset.userException)
        {
          throw tmp374.UserException;
        }
        if (tmp374.__isset.systemException)
        {
          throw tmp374.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listNotebooks failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> listAccessibleBusinessNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listAccessibleBusinessNotebooks(authenticationToken, cancellationToken);
        return await recv_listAccessibleBusinessNotebooks(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listAccessibleBusinessNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listAccessibleBusinessNotebooks", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp375 = new InternalStructs.listAccessibleBusinessNotebooks_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp375.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Notebook>> recv_listAccessibleBusinessNotebooks(CancellationToken cancellationToken = default)
      {
        
        var tmp376 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp376.Type == TMessageType.Exception)
        {
          var tmp377 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp377;
        }

        var tmp378 = new InternalStructs.listAccessibleBusinessNotebooks_result();
        await tmp378.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp378.__isset.success)
        {
          return tmp378.Success;
        }
        if (tmp378.__isset.userException)
        {
          throw tmp378.UserException;
        }
        if (tmp378.__isset.systemException)
        {
          throw tmp378.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listAccessibleBusinessNotebooks failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getNotebook(authenticationToken, guid, cancellationToken);
        return await recv_getNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp379 = new InternalStructs.getNotebook_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp379.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> recv_getNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp380 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp380.Type == TMessageType.Exception)
        {
          var tmp381 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp381;
        }

        var tmp382 = new InternalStructs.getNotebook_result();
        await tmp382.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp382.__isset.success)
        {
          return tmp382.Success;
        }
        if (tmp382.__isset.userException)
        {
          throw tmp382.UserException;
        }
        if (tmp382.__isset.systemException)
        {
          throw tmp382.SystemException;
        }
        if (tmp382.__isset.notFoundException)
        {
          throw tmp382.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getDefaultNotebook(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_getDefaultNotebook(authenticationToken, cancellationToken);
        return await recv_getDefaultNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getDefaultNotebook(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getDefaultNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp383 = new InternalStructs.getDefaultNotebook_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp383.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> recv_getDefaultNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp384 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp384.Type == TMessageType.Exception)
        {
          var tmp385 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp385;
        }

        var tmp386 = new InternalStructs.getDefaultNotebook_result();
        await tmp386.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp386.__isset.success)
        {
          return tmp386.Success;
        }
        if (tmp386.__isset.userException)
        {
          throw tmp386.UserException;
        }
        if (tmp386.__isset.systemException)
        {
          throw tmp386.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDefaultNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> createNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default)
      {
        await send_createNotebook(authenticationToken, notebook, cancellationToken);
        return await recv_createNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp387 = new InternalStructs.createNotebook_args() {
          AuthenticationToken = authenticationToken,
          Notebook = notebook,
        };
        
        await tmp387.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> recv_createNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp388 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp388.Type == TMessageType.Exception)
        {
          var tmp389 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp389;
        }

        var tmp390 = new InternalStructs.createNotebook_result();
        await tmp390.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp390.__isset.success)
        {
          return tmp390.Success;
        }
        if (tmp390.__isset.userException)
        {
          throw tmp390.UserException;
        }
        if (tmp390.__isset.systemException)
        {
          throw tmp390.SystemException;
        }
        if (tmp390.__isset.notFoundException)
        {
          throw tmp390.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default)
      {
        await send_updateNotebook(authenticationToken, notebook, cancellationToken);
        return await recv_updateNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateNotebook(string authenticationToken, global::Evernote.EDAM.Type.Notebook notebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp391 = new InternalStructs.updateNotebook_args() {
          AuthenticationToken = authenticationToken,
          Notebook = notebook,
        };
        
        await tmp391.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp392 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp392.Type == TMessageType.Exception)
        {
          var tmp393 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp393;
        }

        var tmp394 = new InternalStructs.updateNotebook_result();
        await tmp394.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp394.__isset.success)
        {
          return tmp394.Success;
        }
        if (tmp394.__isset.userException)
        {
          throw tmp394.UserException;
        }
        if (tmp394.__isset.systemException)
        {
          throw tmp394.SystemException;
        }
        if (tmp394.__isset.notFoundException)
        {
          throw tmp394.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> expungeNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_expungeNotebook(authenticationToken, guid, cancellationToken);
        return await recv_expungeNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expungeNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expungeNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp395 = new InternalStructs.expungeNotebook_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp395.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_expungeNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp396 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp396.Type == TMessageType.Exception)
        {
          var tmp397 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp397;
        }

        var tmp398 = new InternalStructs.expungeNotebook_result();
        await tmp398.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp398.__isset.success)
        {
          return tmp398.Success;
        }
        if (tmp398.__isset.userException)
        {
          throw tmp398.UserException;
        }
        if (tmp398.__isset.systemException)
        {
          throw tmp398.SystemException;
        }
        if (tmp398.__isset.notFoundException)
        {
          throw tmp398.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> listTags(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listTags(authenticationToken, cancellationToken);
        return await recv_listTags(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listTags(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp399 = new InternalStructs.listTags_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp399.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> recv_listTags(CancellationToken cancellationToken = default)
      {
        
        var tmp400 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp400.Type == TMessageType.Exception)
        {
          var tmp401 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp401;
        }

        var tmp402 = new InternalStructs.listTags_result();
        await tmp402.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp402.__isset.success)
        {
          return tmp402.Success;
        }
        if (tmp402.__isset.userException)
        {
          throw tmp402.UserException;
        }
        if (tmp402.__isset.systemException)
        {
          throw tmp402.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTags failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> listTagsByNotebook(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default)
      {
        await send_listTagsByNotebook(authenticationToken, notebookGuid, cancellationToken);
        return await recv_listTagsByNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listTagsByNotebook(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listTagsByNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp403 = new InternalStructs.listTagsByNotebook_args() {
          AuthenticationToken = authenticationToken,
          NotebookGuid = notebookGuid,
        };
        
        await tmp403.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.Tag>> recv_listTagsByNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp404 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp404.Type == TMessageType.Exception)
        {
          var tmp405 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp405;
        }

        var tmp406 = new InternalStructs.listTagsByNotebook_result();
        await tmp406.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp406.__isset.success)
        {
          return tmp406.Success;
        }
        if (tmp406.__isset.userException)
        {
          throw tmp406.UserException;
        }
        if (tmp406.__isset.systemException)
        {
          throw tmp406.SystemException;
        }
        if (tmp406.__isset.notFoundException)
        {
          throw tmp406.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagsByNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> getTag(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getTag(authenticationToken, guid, cancellationToken);
        return await recv_getTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTag(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp407 = new InternalStructs.getTag_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp407.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> recv_getTag(CancellationToken cancellationToken = default)
      {
        
        var tmp408 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp408.Type == TMessageType.Exception)
        {
          var tmp409 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp409;
        }

        var tmp410 = new InternalStructs.getTag_result();
        await tmp410.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp410.__isset.success)
        {
          return tmp410.Success;
        }
        if (tmp410.__isset.userException)
        {
          throw tmp410.UserException;
        }
        if (tmp410.__isset.systemException)
        {
          throw tmp410.SystemException;
        }
        if (tmp410.__isset.notFoundException)
        {
          throw tmp410.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> createTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default)
      {
        await send_createTag(authenticationToken, tag, cancellationToken);
        return await recv_createTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp411 = new InternalStructs.createTag_args() {
          AuthenticationToken = authenticationToken,
          Tag = tag,
        };
        
        await tmp411.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Tag> recv_createTag(CancellationToken cancellationToken = default)
      {
        
        var tmp412 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp412.Type == TMessageType.Exception)
        {
          var tmp413 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp413;
        }

        var tmp414 = new InternalStructs.createTag_result();
        await tmp414.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp414.__isset.success)
        {
          return tmp414.Success;
        }
        if (tmp414.__isset.userException)
        {
          throw tmp414.UserException;
        }
        if (tmp414.__isset.systemException)
        {
          throw tmp414.SystemException;
        }
        if (tmp414.__isset.notFoundException)
        {
          throw tmp414.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default)
      {
        await send_updateTag(authenticationToken, tag, cancellationToken);
        return await recv_updateTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateTag(string authenticationToken, global::Evernote.EDAM.Type.Tag tag, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp415 = new InternalStructs.updateTag_args() {
          AuthenticationToken = authenticationToken,
          Tag = tag,
        };
        
        await tmp415.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateTag(CancellationToken cancellationToken = default)
      {
        
        var tmp416 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp416.Type == TMessageType.Exception)
        {
          var tmp417 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp417;
        }

        var tmp418 = new InternalStructs.updateTag_result();
        await tmp418.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp418.__isset.success)
        {
          return tmp418.Success;
        }
        if (tmp418.__isset.userException)
        {
          throw tmp418.UserException;
        }
        if (tmp418.__isset.systemException)
        {
          throw tmp418.SystemException;
        }
        if (tmp418.__isset.notFoundException)
        {
          throw tmp418.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task untagAll(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_untagAll(authenticationToken, guid, cancellationToken);
        await recv_untagAll(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_untagAll(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("untagAll", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp419 = new InternalStructs.untagAll_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp419.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_untagAll(CancellationToken cancellationToken = default)
      {
        
        var tmp420 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp420.Type == TMessageType.Exception)
        {
          var tmp421 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp421;
        }

        var tmp422 = new InternalStructs.untagAll_result();
        await tmp422.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp422.__isset.userException)
        {
          throw tmp422.UserException;
        }
        if (tmp422.__isset.systemException)
        {
          throw tmp422.SystemException;
        }
        if (tmp422.__isset.notFoundException)
        {
          throw tmp422.NotFoundException;
        }
      }

      public async global::System.Threading.Tasks.Task<int> expungeTag(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_expungeTag(authenticationToken, guid, cancellationToken);
        return await recv_expungeTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expungeTag(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expungeTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp423 = new InternalStructs.expungeTag_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp423.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_expungeTag(CancellationToken cancellationToken = default)
      {
        
        var tmp424 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp424.Type == TMessageType.Exception)
        {
          var tmp425 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp425;
        }

        var tmp426 = new InternalStructs.expungeTag_result();
        await tmp426.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp426.__isset.success)
        {
          return tmp426.Success;
        }
        if (tmp426.__isset.userException)
        {
          throw tmp426.UserException;
        }
        if (tmp426.__isset.systemException)
        {
          throw tmp426.SystemException;
        }
        if (tmp426.__isset.notFoundException)
        {
          throw tmp426.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SavedSearch>> listSearches(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listSearches(authenticationToken, cancellationToken);
        return await recv_listSearches(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listSearches(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listSearches", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp427 = new InternalStructs.listSearches_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp427.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SavedSearch>> recv_listSearches(CancellationToken cancellationToken = default)
      {
        
        var tmp428 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp428.Type == TMessageType.Exception)
        {
          var tmp429 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp429;
        }

        var tmp430 = new InternalStructs.listSearches_result();
        await tmp430.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp430.__isset.success)
        {
          return tmp430.Success;
        }
        if (tmp430.__isset.userException)
        {
          throw tmp430.UserException;
        }
        if (tmp430.__isset.systemException)
        {
          throw tmp430.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSearches failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> getSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getSearch(authenticationToken, guid, cancellationToken);
        return await recv_getSearch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSearch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp431 = new InternalStructs.getSearch_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp431.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> recv_getSearch(CancellationToken cancellationToken = default)
      {
        
        var tmp432 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp432.Type == TMessageType.Exception)
        {
          var tmp433 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp433;
        }

        var tmp434 = new InternalStructs.getSearch_result();
        await tmp434.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp434.__isset.success)
        {
          return tmp434.Success;
        }
        if (tmp434.__isset.userException)
        {
          throw tmp434.UserException;
        }
        if (tmp434.__isset.systemException)
        {
          throw tmp434.SystemException;
        }
        if (tmp434.__isset.notFoundException)
        {
          throw tmp434.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSearch failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> createSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default)
      {
        await send_createSearch(authenticationToken, search, cancellationToken);
        return await recv_createSearch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSearch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp435 = new InternalStructs.createSearch_args() {
          AuthenticationToken = authenticationToken,
          Search = search,
        };
        
        await tmp435.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SavedSearch> recv_createSearch(CancellationToken cancellationToken = default)
      {
        
        var tmp436 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp436.Type == TMessageType.Exception)
        {
          var tmp437 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp437;
        }

        var tmp438 = new InternalStructs.createSearch_result();
        await tmp438.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp438.__isset.success)
        {
          return tmp438.Success;
        }
        if (tmp438.__isset.userException)
        {
          throw tmp438.UserException;
        }
        if (tmp438.__isset.systemException)
        {
          throw tmp438.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSearch failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default)
      {
        await send_updateSearch(authenticationToken, search, cancellationToken);
        return await recv_updateSearch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateSearch(string authenticationToken, global::Evernote.EDAM.Type.SavedSearch search, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateSearch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp439 = new InternalStructs.updateSearch_args() {
          AuthenticationToken = authenticationToken,
          Search = search,
        };
        
        await tmp439.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateSearch(CancellationToken cancellationToken = default)
      {
        
        var tmp440 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp440.Type == TMessageType.Exception)
        {
          var tmp441 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp441;
        }

        var tmp442 = new InternalStructs.updateSearch_result();
        await tmp442.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp442.__isset.success)
        {
          return tmp442.Success;
        }
        if (tmp442.__isset.userException)
        {
          throw tmp442.UserException;
        }
        if (tmp442.__isset.systemException)
        {
          throw tmp442.SystemException;
        }
        if (tmp442.__isset.notFoundException)
        {
          throw tmp442.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSearch failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> expungeSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_expungeSearch(authenticationToken, guid, cancellationToken);
        return await recv_expungeSearch(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expungeSearch(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expungeSearch", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp443 = new InternalStructs.expungeSearch_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp443.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_expungeSearch(CancellationToken cancellationToken = default)
      {
        
        var tmp444 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp444.Type == TMessageType.Exception)
        {
          var tmp445 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp445;
        }

        var tmp446 = new InternalStructs.expungeSearch_result();
        await tmp446.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp446.__isset.success)
        {
          return tmp446.Success;
        }
        if (tmp446.__isset.userException)
        {
          throw tmp446.UserException;
        }
        if (tmp446.__isset.systemException)
        {
          throw tmp446.SystemException;
        }
        if (tmp446.__isset.notFoundException)
        {
          throw tmp446.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeSearch failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> findNoteOffset(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, string guid, CancellationToken cancellationToken = default)
      {
        await send_findNoteOffset(authenticationToken, filter, guid, cancellationToken);
        return await recv_findNoteOffset(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_findNoteOffset(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("findNoteOffset", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp447 = new InternalStructs.findNoteOffset_args() {
          AuthenticationToken = authenticationToken,
          Filter = filter,
          Guid = guid,
        };
        
        await tmp447.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_findNoteOffset(CancellationToken cancellationToken = default)
      {
        
        var tmp448 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp448.Type == TMessageType.Exception)
        {
          var tmp449 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp449;
        }

        var tmp450 = new InternalStructs.findNoteOffset_result();
        await tmp450.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp450.__isset.success)
        {
          return tmp450.Success;
        }
        if (tmp450.__isset.userException)
        {
          throw tmp450.UserException;
        }
        if (tmp450.__isset.systemException)
        {
          throw tmp450.SystemException;
        }
        if (tmp450.__isset.notFoundException)
        {
          throw tmp450.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNoteOffset failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NotesMetadataList> findNotesMetadata(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, int offset, int maxNotes, global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec, cancellationToken);
        return await recv_findNotesMetadata(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_findNotesMetadata(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, int offset, int maxNotes, global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("findNotesMetadata", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp451 = new InternalStructs.findNotesMetadata_args() {
          AuthenticationToken = authenticationToken,
          Filter = filter,
          Offset = offset,
          MaxNotes = maxNotes,
          ResultSpec = resultSpec,
        };
        
        await tmp451.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NotesMetadataList> recv_findNotesMetadata(CancellationToken cancellationToken = default)
      {
        
        var tmp452 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp452.Type == TMessageType.Exception)
        {
          var tmp453 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp453;
        }

        var tmp454 = new InternalStructs.findNotesMetadata_result();
        await tmp454.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp454.__isset.success)
        {
          return tmp454.Success;
        }
        if (tmp454.__isset.userException)
        {
          throw tmp454.UserException;
        }
        if (tmp454.__isset.systemException)
        {
          throw tmp454.SystemException;
        }
        if (tmp454.__isset.notFoundException)
        {
          throw tmp454.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNotesMetadata failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NoteCollectionCounts> findNoteCounts(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, bool withTrash, CancellationToken cancellationToken = default)
      {
        await send_findNoteCounts(authenticationToken, filter, withTrash, cancellationToken);
        return await recv_findNoteCounts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_findNoteCounts(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteFilter filter, bool withTrash, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("findNoteCounts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp455 = new InternalStructs.findNoteCounts_args() {
          AuthenticationToken = authenticationToken,
          Filter = filter,
          WithTrash = withTrash,
        };
        
        await tmp455.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.NoteCollectionCounts> recv_findNoteCounts(CancellationToken cancellationToken = default)
      {
        
        var tmp456 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp456.Type == TMessageType.Exception)
        {
          var tmp457 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp457;
        }

        var tmp458 = new InternalStructs.findNoteCounts_result();
        await tmp458.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp458.__isset.success)
        {
          return tmp458.Success;
        }
        if (tmp458.__isset.userException)
        {
          throw tmp458.UserException;
        }
        if (tmp458.__isset.systemException)
        {
          throw tmp458.SystemException;
        }
        if (tmp458.__isset.notFoundException)
        {
          throw tmp458.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNoteCounts failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNoteWithResultSpec(string authenticationToken, string guid, global::Evernote.EDAM.NoteStore.NoteResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await send_getNoteWithResultSpec(authenticationToken, guid, resultSpec, cancellationToken);
        return await recv_getNoteWithResultSpec(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteWithResultSpec(string authenticationToken, string guid, global::Evernote.EDAM.NoteStore.NoteResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteWithResultSpec", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp459 = new InternalStructs.getNoteWithResultSpec_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          ResultSpec = resultSpec,
        };
        
        await tmp459.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_getNoteWithResultSpec(CancellationToken cancellationToken = default)
      {
        
        var tmp460 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp460.Type == TMessageType.Exception)
        {
          var tmp461 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp461;
        }

        var tmp462 = new InternalStructs.getNoteWithResultSpec_result();
        await tmp462.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp462.__isset.success)
        {
          return tmp462.Success;
        }
        if (tmp462.__isset.userException)
        {
          throw tmp462.UserException;
        }
        if (tmp462.__isset.systemException)
        {
          throw tmp462.SystemException;
        }
        if (tmp462.__isset.notFoundException)
        {
          throw tmp462.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteWithResultSpec failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNote(string authenticationToken, string guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default)
      {
        await send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData, cancellationToken);
        return await recv_getNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNote(string authenticationToken, string guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp463 = new InternalStructs.getNote_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          WithContent = withContent,
          WithResourcesData = withResourcesData,
          WithResourcesRecognition = withResourcesRecognition,
          WithResourcesAlternateData = withResourcesAlternateData,
        };
        
        await tmp463.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_getNote(CancellationToken cancellationToken = default)
      {
        
        var tmp464 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp464.Type == TMessageType.Exception)
        {
          var tmp465 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp465;
        }

        var tmp466 = new InternalStructs.getNote_result();
        await tmp466.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp466.__isset.success)
        {
          return tmp466.Success;
        }
        if (tmp466.__isset.userException)
        {
          throw tmp466.UserException;
        }
        if (tmp466.__isset.systemException)
        {
          throw tmp466.SystemException;
        }
        if (tmp466.__isset.notFoundException)
        {
          throw tmp466.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> getNoteApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getNoteApplicationData(authenticationToken, guid, cancellationToken);
        return await recv_getNoteApplicationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteApplicationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp467 = new InternalStructs.getNoteApplicationData_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp467.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> recv_getNoteApplicationData(CancellationToken cancellationToken = default)
      {
        
        var tmp468 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp468.Type == TMessageType.Exception)
        {
          var tmp469 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp469;
        }

        var tmp470 = new InternalStructs.getNoteApplicationData_result();
        await tmp470.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp470.__isset.success)
        {
          return tmp470.Success;
        }
        if (tmp470.__isset.userException)
        {
          throw tmp470.UserException;
        }
        if (tmp470.__isset.systemException)
        {
          throw tmp470.SystemException;
        }
        if (tmp470.__isset.notFoundException)
        {
          throw tmp470.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteApplicationData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await send_getNoteApplicationDataEntry(authenticationToken, guid, key, cancellationToken);
        return await recv_getNoteApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp471 = new InternalStructs.getNoteApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
        };
        
        await tmp471.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getNoteApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp472 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp472.Type == TMessageType.Exception)
        {
          var tmp473 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp473;
        }

        var tmp474 = new InternalStructs.getNoteApplicationDataEntry_result();
        await tmp474.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp474.__isset.success)
        {
          return tmp474.Success;
        }
        if (tmp474.__isset.userException)
        {
          throw tmp474.UserException;
        }
        if (tmp474.__isset.systemException)
        {
          throw tmp474.SystemException;
        }
        if (tmp474.__isset.notFoundException)
        {
          throw tmp474.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> setNoteApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default)
      {
        await send_setNoteApplicationDataEntry(authenticationToken, guid, key, @value, cancellationToken);
        return await recv_setNoteApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNoteApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNoteApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp475 = new InternalStructs.setNoteApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
          Value = @value,
        };
        
        await tmp475.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_setNoteApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp476 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp476.Type == TMessageType.Exception)
        {
          var tmp477 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp477;
        }

        var tmp478 = new InternalStructs.setNoteApplicationDataEntry_result();
        await tmp478.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp478.__isset.success)
        {
          return tmp478.Success;
        }
        if (tmp478.__isset.userException)
        {
          throw tmp478.UserException;
        }
        if (tmp478.__isset.systemException)
        {
          throw tmp478.SystemException;
        }
        if (tmp478.__isset.notFoundException)
        {
          throw tmp478.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setNoteApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> unsetNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await send_unsetNoteApplicationDataEntry(authenticationToken, guid, key, cancellationToken);
        return await recv_unsetNoteApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsetNoteApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsetNoteApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp479 = new InternalStructs.unsetNoteApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
        };
        
        await tmp479.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_unsetNoteApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp480 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp480.Type == TMessageType.Exception)
        {
          var tmp481 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp481;
        }

        var tmp482 = new InternalStructs.unsetNoteApplicationDataEntry_result();
        await tmp482.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp482.__isset.success)
        {
          return tmp482.Success;
        }
        if (tmp482.__isset.userException)
        {
          throw tmp482.UserException;
        }
        if (tmp482.__isset.systemException)
        {
          throw tmp482.SystemException;
        }
        if (tmp482.__isset.notFoundException)
        {
          throw tmp482.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unsetNoteApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getNoteContent(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getNoteContent(authenticationToken, guid, cancellationToken);
        return await recv_getNoteContent(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteContent(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteContent", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp483 = new InternalStructs.getNoteContent_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp483.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getNoteContent(CancellationToken cancellationToken = default)
      {
        
        var tmp484 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp484.Type == TMessageType.Exception)
        {
          var tmp485 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp485;
        }

        var tmp486 = new InternalStructs.getNoteContent_result();
        await tmp486.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp486.__isset.success)
        {
          return tmp486.Success;
        }
        if (tmp486.__isset.userException)
        {
          throw tmp486.UserException;
        }
        if (tmp486.__isset.systemException)
        {
          throw tmp486.SystemException;
        }
        if (tmp486.__isset.notFoundException)
        {
          throw tmp486.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteContent failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getNoteSearchText(string authenticationToken, string guid, bool noteOnly, bool tokenizeForIndexing, CancellationToken cancellationToken = default)
      {
        await send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing, cancellationToken);
        return await recv_getNoteSearchText(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteSearchText(string authenticationToken, string guid, bool noteOnly, bool tokenizeForIndexing, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteSearchText", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp487 = new InternalStructs.getNoteSearchText_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          NoteOnly = noteOnly,
          TokenizeForIndexing = tokenizeForIndexing,
        };
        
        await tmp487.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getNoteSearchText(CancellationToken cancellationToken = default)
      {
        
        var tmp488 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp488.Type == TMessageType.Exception)
        {
          var tmp489 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp489;
        }

        var tmp490 = new InternalStructs.getNoteSearchText_result();
        await tmp490.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp490.__isset.success)
        {
          return tmp490.Success;
        }
        if (tmp490.__isset.userException)
        {
          throw tmp490.UserException;
        }
        if (tmp490.__isset.systemException)
        {
          throw tmp490.SystemException;
        }
        if (tmp490.__isset.notFoundException)
        {
          throw tmp490.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteSearchText failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getResourceSearchText(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceSearchText(authenticationToken, guid, cancellationToken);
        return await recv_getResourceSearchText(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceSearchText(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceSearchText", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp491 = new InternalStructs.getResourceSearchText_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp491.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getResourceSearchText(CancellationToken cancellationToken = default)
      {
        
        var tmp492 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp492.Type == TMessageType.Exception)
        {
          var tmp493 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp493;
        }

        var tmp494 = new InternalStructs.getResourceSearchText_result();
        await tmp494.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp494.__isset.success)
        {
          return tmp494.Success;
        }
        if (tmp494.__isset.userException)
        {
          throw tmp494.UserException;
        }
        if (tmp494.__isset.systemException)
        {
          throw tmp494.SystemException;
        }
        if (tmp494.__isset.notFoundException)
        {
          throw tmp494.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceSearchText failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> getNoteTagNames(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getNoteTagNames(authenticationToken, guid, cancellationToken);
        return await recv_getNoteTagNames(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteTagNames(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteTagNames", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp495 = new InternalStructs.getNoteTagNames_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp495.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_getNoteTagNames(CancellationToken cancellationToken = default)
      {
        
        var tmp496 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp496.Type == TMessageType.Exception)
        {
          var tmp497 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp497;
        }

        var tmp498 = new InternalStructs.getNoteTagNames_result();
        await tmp498.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp498.__isset.success)
        {
          return tmp498.Success;
        }
        if (tmp498.__isset.userException)
        {
          throw tmp498.UserException;
        }
        if (tmp498.__isset.systemException)
        {
          throw tmp498.SystemException;
        }
        if (tmp498.__isset.notFoundException)
        {
          throw tmp498.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteTagNames failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> createNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await send_createNote(authenticationToken, note, cancellationToken);
        return await recv_createNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp499 = new InternalStructs.createNote_args() {
          AuthenticationToken = authenticationToken,
          Note = note,
        };
        
        await tmp499.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_createNote(CancellationToken cancellationToken = default)
      {
        
        var tmp500 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp500.Type == TMessageType.Exception)
        {
          var tmp501 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp501;
        }

        var tmp502 = new InternalStructs.createNote_result();
        await tmp502.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp502.__isset.success)
        {
          return tmp502.Success;
        }
        if (tmp502.__isset.userException)
        {
          throw tmp502.UserException;
        }
        if (tmp502.__isset.systemException)
        {
          throw tmp502.SystemException;
        }
        if (tmp502.__isset.notFoundException)
        {
          throw tmp502.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> updateNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await send_updateNote(authenticationToken, note, cancellationToken);
        return await recv_updateNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateNote(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp503 = new InternalStructs.updateNote_args() {
          AuthenticationToken = authenticationToken,
          Note = note,
        };
        
        await tmp503.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_updateNote(CancellationToken cancellationToken = default)
      {
        
        var tmp504 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp504.Type == TMessageType.Exception)
        {
          var tmp505 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp505;
        }

        var tmp506 = new InternalStructs.updateNote_result();
        await tmp506.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp506.__isset.success)
        {
          return tmp506.Success;
        }
        if (tmp506.__isset.userException)
        {
          throw tmp506.UserException;
        }
        if (tmp506.__isset.systemException)
        {
          throw tmp506.SystemException;
        }
        if (tmp506.__isset.notFoundException)
        {
          throw tmp506.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> deleteNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_deleteNote(authenticationToken, guid, cancellationToken);
        return await recv_deleteNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp507 = new InternalStructs.deleteNote_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp507.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_deleteNote(CancellationToken cancellationToken = default)
      {
        
        var tmp508 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp508.Type == TMessageType.Exception)
        {
          var tmp509 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp509;
        }

        var tmp510 = new InternalStructs.deleteNote_result();
        await tmp510.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp510.__isset.success)
        {
          return tmp510.Success;
        }
        if (tmp510.__isset.userException)
        {
          throw tmp510.UserException;
        }
        if (tmp510.__isset.systemException)
        {
          throw tmp510.SystemException;
        }
        if (tmp510.__isset.notFoundException)
        {
          throw tmp510.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> expungeNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_expungeNote(authenticationToken, guid, cancellationToken);
        return await recv_expungeNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expungeNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expungeNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp511 = new InternalStructs.expungeNote_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp511.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_expungeNote(CancellationToken cancellationToken = default)
      {
        
        var tmp512 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp512.Type == TMessageType.Exception)
        {
          var tmp513 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp513;
        }

        var tmp514 = new InternalStructs.expungeNote_result();
        await tmp514.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp514.__isset.success)
        {
          return tmp514.Success;
        }
        if (tmp514.__isset.userException)
        {
          throw tmp514.UserException;
        }
        if (tmp514.__isset.systemException)
        {
          throw tmp514.SystemException;
        }
        if (tmp514.__isset.notFoundException)
        {
          throw tmp514.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> copyNote(string authenticationToken, string noteGuid, string toNotebookGuid, CancellationToken cancellationToken = default)
      {
        await send_copyNote(authenticationToken, noteGuid, toNotebookGuid, cancellationToken);
        return await recv_copyNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_copyNote(string authenticationToken, string noteGuid, string toNotebookGuid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("copyNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp515 = new InternalStructs.copyNote_args() {
          AuthenticationToken = authenticationToken,
          NoteGuid = noteGuid,
          ToNotebookGuid = toNotebookGuid,
        };
        
        await tmp515.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_copyNote(CancellationToken cancellationToken = default)
      {
        
        var tmp516 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp516.Type == TMessageType.Exception)
        {
          var tmp517 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp517;
        }

        var tmp518 = new InternalStructs.copyNote_result();
        await tmp518.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp518.__isset.success)
        {
          return tmp518.Success;
        }
        if (tmp518.__isset.userException)
        {
          throw tmp518.UserException;
        }
        if (tmp518.__isset.systemException)
        {
          throw tmp518.SystemException;
        }
        if (tmp518.__isset.notFoundException)
        {
          throw tmp518.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "copyNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.NoteStore.NoteVersionId>> listNoteVersions(string authenticationToken, string noteGuid, CancellationToken cancellationToken = default)
      {
        await send_listNoteVersions(authenticationToken, noteGuid, cancellationToken);
        return await recv_listNoteVersions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listNoteVersions(string authenticationToken, string noteGuid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listNoteVersions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp519 = new InternalStructs.listNoteVersions_args() {
          AuthenticationToken = authenticationToken,
          NoteGuid = noteGuid,
        };
        
        await tmp519.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.NoteStore.NoteVersionId>> recv_listNoteVersions(CancellationToken cancellationToken = default)
      {
        
        var tmp520 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp520.Type == TMessageType.Exception)
        {
          var tmp521 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp521;
        }

        var tmp522 = new InternalStructs.listNoteVersions_result();
        await tmp522.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp522.__isset.success)
        {
          return tmp522.Success;
        }
        if (tmp522.__isset.userException)
        {
          throw tmp522.UserException;
        }
        if (tmp522.__isset.systemException)
        {
          throw tmp522.SystemException;
        }
        if (tmp522.__isset.notFoundException)
        {
          throw tmp522.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listNoteVersions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> getNoteVersion(string authenticationToken, string noteGuid, int updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default)
      {
        await send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData, cancellationToken);
        return await recv_getNoteVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNoteVersion(string authenticationToken, string noteGuid, int updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNoteVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp523 = new InternalStructs.getNoteVersion_args() {
          AuthenticationToken = authenticationToken,
          NoteGuid = noteGuid,
          UpdateSequenceNum = updateSequenceNum,
          WithResourcesData = withResourcesData,
          WithResourcesRecognition = withResourcesRecognition,
          WithResourcesAlternateData = withResourcesAlternateData,
        };
        
        await tmp523.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Note> recv_getNoteVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp524 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp524.Type == TMessageType.Exception)
        {
          var tmp525 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp525;
        }

        var tmp526 = new InternalStructs.getNoteVersion_result();
        await tmp526.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp526.__isset.success)
        {
          return tmp526.Success;
        }
        if (tmp526.__isset.userException)
        {
          throw tmp526.UserException;
        }
        if (tmp526.__isset.systemException)
        {
          throw tmp526.SystemException;
        }
        if (tmp526.__isset.notFoundException)
        {
          throw tmp526.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteVersion failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData, CancellationToken cancellationToken = default)
      {
        await send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData, cancellationToken);
        return await recv_getResource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResource(string authenticationToken, string guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp527 = new InternalStructs.getResource_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          WithData = withData,
          WithRecognition = withRecognition,
          WithAttributes = withAttributes,
          WithAlternateData = withAlternateData,
        };
        
        await tmp527.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> recv_getResource(CancellationToken cancellationToken = default)
      {
        
        var tmp528 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp528.Type == TMessageType.Exception)
        {
          var tmp529 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp529;
        }

        var tmp530 = new InternalStructs.getResource_result();
        await tmp530.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp530.__isset.success)
        {
          return tmp530.Success;
        }
        if (tmp530.__isset.userException)
        {
          throw tmp530.UserException;
        }
        if (tmp530.__isset.systemException)
        {
          throw tmp530.SystemException;
        }
        if (tmp530.__isset.notFoundException)
        {
          throw tmp530.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> getResourceApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceApplicationData(authenticationToken, guid, cancellationToken);
        return await recv_getResourceApplicationData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceApplicationData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceApplicationData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp531 = new InternalStructs.getResourceApplicationData_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp531.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LazyMap> recv_getResourceApplicationData(CancellationToken cancellationToken = default)
      {
        
        var tmp532 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp532.Type == TMessageType.Exception)
        {
          var tmp533 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp533;
        }

        var tmp534 = new InternalStructs.getResourceApplicationData_result();
        await tmp534.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp534.__isset.success)
        {
          return tmp534.Success;
        }
        if (tmp534.__isset.userException)
        {
          throw tmp534.UserException;
        }
        if (tmp534.__isset.systemException)
        {
          throw tmp534.SystemException;
        }
        if (tmp534.__isset.notFoundException)
        {
          throw tmp534.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceApplicationData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await send_getResourceApplicationDataEntry(authenticationToken, guid, key, cancellationToken);
        return await recv_getResourceApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp535 = new InternalStructs.getResourceApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
        };
        
        await tmp535.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getResourceApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp536 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp536.Type == TMessageType.Exception)
        {
          var tmp537 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp537;
        }

        var tmp538 = new InternalStructs.getResourceApplicationDataEntry_result();
        await tmp538.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp538.__isset.success)
        {
          return tmp538.Success;
        }
        if (tmp538.__isset.userException)
        {
          throw tmp538.UserException;
        }
        if (tmp538.__isset.systemException)
        {
          throw tmp538.SystemException;
        }
        if (tmp538.__isset.notFoundException)
        {
          throw tmp538.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> setResourceApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default)
      {
        await send_setResourceApplicationDataEntry(authenticationToken, guid, key, @value, cancellationToken);
        return await recv_setResourceApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setResourceApplicationDataEntry(string authenticationToken, string guid, string key, string @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setResourceApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp539 = new InternalStructs.setResourceApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
          Value = @value,
        };
        
        await tmp539.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_setResourceApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp540 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp540.Type == TMessageType.Exception)
        {
          var tmp541 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp541;
        }

        var tmp542 = new InternalStructs.setResourceApplicationDataEntry_result();
        await tmp542.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp542.__isset.success)
        {
          return tmp542.Success;
        }
        if (tmp542.__isset.userException)
        {
          throw tmp542.UserException;
        }
        if (tmp542.__isset.systemException)
        {
          throw tmp542.SystemException;
        }
        if (tmp542.__isset.notFoundException)
        {
          throw tmp542.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setResourceApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> unsetResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await send_unsetResourceApplicationDataEntry(authenticationToken, guid, key, cancellationToken);
        return await recv_unsetResourceApplicationDataEntry(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_unsetResourceApplicationDataEntry(string authenticationToken, string guid, string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("unsetResourceApplicationDataEntry", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp543 = new InternalStructs.unsetResourceApplicationDataEntry_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
          Key = key,
        };
        
        await tmp543.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_unsetResourceApplicationDataEntry(CancellationToken cancellationToken = default)
      {
        
        var tmp544 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp544.Type == TMessageType.Exception)
        {
          var tmp545 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp545;
        }

        var tmp546 = new InternalStructs.unsetResourceApplicationDataEntry_result();
        await tmp546.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp546.__isset.success)
        {
          return tmp546.Success;
        }
        if (tmp546.__isset.userException)
        {
          throw tmp546.UserException;
        }
        if (tmp546.__isset.systemException)
        {
          throw tmp546.SystemException;
        }
        if (tmp546.__isset.notFoundException)
        {
          throw tmp546.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unsetResourceApplicationDataEntry failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateResource(string authenticationToken, global::Evernote.EDAM.Type.Resource resource, CancellationToken cancellationToken = default)
      {
        await send_updateResource(authenticationToken, resource, cancellationToken);
        return await recv_updateResource(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateResource(string authenticationToken, global::Evernote.EDAM.Type.Resource resource, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateResource", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp547 = new InternalStructs.updateResource_args() {
          AuthenticationToken = authenticationToken,
          Resource = resource,
        };
        
        await tmp547.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateResource(CancellationToken cancellationToken = default)
      {
        
        var tmp548 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp548.Type == TMessageType.Exception)
        {
          var tmp549 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp549;
        }

        var tmp550 = new InternalStructs.updateResource_result();
        await tmp550.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp550.__isset.success)
        {
          return tmp550.Success;
        }
        if (tmp550.__isset.userException)
        {
          throw tmp550.UserException;
        }
        if (tmp550.__isset.systemException)
        {
          throw tmp550.SystemException;
        }
        if (tmp550.__isset.notFoundException)
        {
          throw tmp550.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateResource failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> getResourceData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceData(authenticationToken, guid, cancellationToken);
        return await recv_getResourceData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp551 = new InternalStructs.getResourceData_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp551.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_getResourceData(CancellationToken cancellationToken = default)
      {
        
        var tmp552 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp552.Type == TMessageType.Exception)
        {
          var tmp553 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp553;
        }

        var tmp554 = new InternalStructs.getResourceData_result();
        await tmp554.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp554.__isset.success)
        {
          return tmp554.Success;
        }
        if (tmp554.__isset.userException)
        {
          throw tmp554.UserException;
        }
        if (tmp554.__isset.systemException)
        {
          throw tmp554.SystemException;
        }
        if (tmp554.__isset.notFoundException)
        {
          throw tmp554.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition, bool withAlternateData, CancellationToken cancellationToken = default)
      {
        await send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData, cancellationToken);
        return await recv_getResourceByHash(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceByHash(string authenticationToken, string noteGuid, byte[] contentHash, bool withData, bool withRecognition, bool withAlternateData, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceByHash", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp555 = new InternalStructs.getResourceByHash_args() {
          AuthenticationToken = authenticationToken,
          NoteGuid = noteGuid,
          ContentHash = contentHash,
          WithData = withData,
          WithRecognition = withRecognition,
          WithAlternateData = withAlternateData,
        };
        
        await tmp555.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Resource> recv_getResourceByHash(CancellationToken cancellationToken = default)
      {
        
        var tmp556 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp556.Type == TMessageType.Exception)
        {
          var tmp557 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp557;
        }

        var tmp558 = new InternalStructs.getResourceByHash_result();
        await tmp558.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp558.__isset.success)
        {
          return tmp558.Success;
        }
        if (tmp558.__isset.userException)
        {
          throw tmp558.UserException;
        }
        if (tmp558.__isset.systemException)
        {
          throw tmp558.SystemException;
        }
        if (tmp558.__isset.notFoundException)
        {
          throw tmp558.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceByHash failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> getResourceRecognition(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceRecognition(authenticationToken, guid, cancellationToken);
        return await recv_getResourceRecognition(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceRecognition(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceRecognition", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp559 = new InternalStructs.getResourceRecognition_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp559.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_getResourceRecognition(CancellationToken cancellationToken = default)
      {
        
        var tmp560 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp560.Type == TMessageType.Exception)
        {
          var tmp561 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp561;
        }

        var tmp562 = new InternalStructs.getResourceRecognition_result();
        await tmp562.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp562.__isset.success)
        {
          return tmp562.Success;
        }
        if (tmp562.__isset.userException)
        {
          throw tmp562.UserException;
        }
        if (tmp562.__isset.systemException)
        {
          throw tmp562.SystemException;
        }
        if (tmp562.__isset.notFoundException)
        {
          throw tmp562.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceRecognition failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> getResourceAlternateData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceAlternateData(authenticationToken, guid, cancellationToken);
        return await recv_getResourceAlternateData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceAlternateData(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceAlternateData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp563 = new InternalStructs.getResourceAlternateData_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp563.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_getResourceAlternateData(CancellationToken cancellationToken = default)
      {
        
        var tmp564 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp564.Type == TMessageType.Exception)
        {
          var tmp565 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp565;
        }

        var tmp566 = new InternalStructs.getResourceAlternateData_result();
        await tmp566.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp566.__isset.success)
        {
          return tmp566.Success;
        }
        if (tmp566.__isset.userException)
        {
          throw tmp566.UserException;
        }
        if (tmp566.__isset.systemException)
        {
          throw tmp566.SystemException;
        }
        if (tmp566.__isset.notFoundException)
        {
          throw tmp566.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceAlternateData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.ResourceAttributes> getResourceAttributes(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_getResourceAttributes(authenticationToken, guid, cancellationToken);
        return await recv_getResourceAttributes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getResourceAttributes(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getResourceAttributes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp567 = new InternalStructs.getResourceAttributes_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp567.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.ResourceAttributes> recv_getResourceAttributes(CancellationToken cancellationToken = default)
      {
        
        var tmp568 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp568.Type == TMessageType.Exception)
        {
          var tmp569 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp569;
        }

        var tmp570 = new InternalStructs.getResourceAttributes_result();
        await tmp570.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp570.__isset.success)
        {
          return tmp570.Success;
        }
        if (tmp570.__isset.userException)
        {
          throw tmp570.UserException;
        }
        if (tmp570.__isset.systemException)
        {
          throw tmp570.SystemException;
        }
        if (tmp570.__isset.notFoundException)
        {
          throw tmp570.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getResourceAttributes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> getPublicNotebook(int userId, string publicUri, CancellationToken cancellationToken = default)
      {
        await send_getPublicNotebook(userId, publicUri, cancellationToken);
        return await recv_getPublicNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getPublicNotebook(int userId, string publicUri, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPublicNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp571 = new InternalStructs.getPublicNotebook_args() {
          UserId = userId,
          PublicUri = publicUri,
        };
        
        await tmp571.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> recv_getPublicNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp572 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp572.Type == TMessageType.Exception)
        {
          var tmp573 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp573;
        }

        var tmp574 = new InternalStructs.getPublicNotebook_result();
        await tmp574.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp574.__isset.success)
        {
          return tmp574.Success;
        }
        if (tmp574.__isset.systemException)
        {
          throw tmp574.SystemException;
        }
        if (tmp574.__isset.notFoundException)
        {
          throw tmp574.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> shareNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, string message, CancellationToken cancellationToken = default)
      {
        await send_shareNotebook(authenticationToken, sharedNotebook, message, cancellationToken);
        return await recv_shareNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shareNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, string message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shareNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp575 = new InternalStructs.shareNotebook_args() {
          AuthenticationToken = authenticationToken,
          SharedNotebook = sharedNotebook,
          Message = message,
        };
        
        await tmp575.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> recv_shareNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp576 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp576.Type == TMessageType.Exception)
        {
          var tmp577 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp577;
        }

        var tmp578 = new InternalStructs.shareNotebook_result();
        await tmp578.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp578.__isset.success)
        {
          return tmp578.Success;
        }
        if (tmp578.__isset.userException)
        {
          throw tmp578.UserException;
        }
        if (tmp578.__isset.notFoundException)
        {
          throw tmp578.NotFoundException;
        }
        if (tmp578.__isset.systemException)
        {
          throw tmp578.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shareNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult> createOrUpdateNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.NotebookShareTemplate shareTemplate, CancellationToken cancellationToken = default)
      {
        await send_createOrUpdateNotebookShares(authenticationToken, shareTemplate, cancellationToken);
        return await recv_createOrUpdateNotebookShares(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createOrUpdateNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.NotebookShareTemplate shareTemplate, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createOrUpdateNotebookShares", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp579 = new InternalStructs.createOrUpdateNotebookShares_args() {
          AuthenticationToken = authenticationToken,
          ShareTemplate = shareTemplate,
        };
        
        await tmp579.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult> recv_createOrUpdateNotebookShares(CancellationToken cancellationToken = default)
      {
        
        var tmp580 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp580.Type == TMessageType.Exception)
        {
          var tmp581 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp581;
        }

        var tmp582 = new InternalStructs.createOrUpdateNotebookShares_result();
        await tmp582.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp582.__isset.success)
        {
          return tmp582.Success;
        }
        if (tmp582.__isset.userException)
        {
          throw tmp582.UserException;
        }
        if (tmp582.__isset.notFoundException)
        {
          throw tmp582.NotFoundException;
        }
        if (tmp582.__isset.systemException)
        {
          throw tmp582.SystemException;
        }
        if (tmp582.__isset.invalidContactsException)
        {
          throw tmp582.InvalidContactsException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createOrUpdateNotebookShares failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateSharedNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, CancellationToken cancellationToken = default)
      {
        await send_updateSharedNotebook(authenticationToken, sharedNotebook, cancellationToken);
        return await recv_updateSharedNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateSharedNotebook(string authenticationToken, global::Evernote.EDAM.Type.SharedNotebook sharedNotebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateSharedNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp583 = new InternalStructs.updateSharedNotebook_args() {
          AuthenticationToken = authenticationToken,
          SharedNotebook = sharedNotebook,
        };
        
        await tmp583.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateSharedNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp584 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp584.Type == TMessageType.Exception)
        {
          var tmp585 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp585;
        }

        var tmp586 = new InternalStructs.updateSharedNotebook_result();
        await tmp586.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp586.__isset.success)
        {
          return tmp586.Success;
        }
        if (tmp586.__isset.userException)
        {
          throw tmp586.UserException;
        }
        if (tmp586.__isset.notFoundException)
        {
          throw tmp586.NotFoundException;
        }
        if (tmp586.__isset.systemException)
        {
          throw tmp586.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSharedNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> setNotebookRecipientSettings(string authenticationToken, string notebookGuid, global::Evernote.EDAM.Type.NotebookRecipientSettings recipientSettings, CancellationToken cancellationToken = default)
      {
        await send_setNotebookRecipientSettings(authenticationToken, notebookGuid, recipientSettings, cancellationToken);
        return await recv_setNotebookRecipientSettings(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setNotebookRecipientSettings(string authenticationToken, string notebookGuid, global::Evernote.EDAM.Type.NotebookRecipientSettings recipientSettings, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setNotebookRecipientSettings", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp587 = new InternalStructs.setNotebookRecipientSettings_args() {
          AuthenticationToken = authenticationToken,
          NotebookGuid = notebookGuid,
          RecipientSettings = recipientSettings,
        };
        
        await tmp587.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.Notebook> recv_setNotebookRecipientSettings(CancellationToken cancellationToken = default)
      {
        
        var tmp588 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp588.Type == TMessageType.Exception)
        {
          var tmp589 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp589;
        }

        var tmp590 = new InternalStructs.setNotebookRecipientSettings_result();
        await tmp590.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp590.__isset.success)
        {
          return tmp590.Success;
        }
        if (tmp590.__isset.userException)
        {
          throw tmp590.UserException;
        }
        if (tmp590.__isset.notFoundException)
        {
          throw tmp590.NotFoundException;
        }
        if (tmp590.__isset.systemException)
        {
          throw tmp590.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setNotebookRecipientSettings failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SharedNotebook>> listSharedNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listSharedNotebooks(authenticationToken, cancellationToken);
        return await recv_listSharedNotebooks(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listSharedNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listSharedNotebooks", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp591 = new InternalStructs.listSharedNotebooks_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp591.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.SharedNotebook>> recv_listSharedNotebooks(CancellationToken cancellationToken = default)
      {
        
        var tmp592 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp592.Type == TMessageType.Exception)
        {
          var tmp593 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp593;
        }

        var tmp594 = new InternalStructs.listSharedNotebooks_result();
        await tmp594.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp594.__isset.success)
        {
          return tmp594.Success;
        }
        if (tmp594.__isset.userException)
        {
          throw tmp594.UserException;
        }
        if (tmp594.__isset.notFoundException)
        {
          throw tmp594.NotFoundException;
        }
        if (tmp594.__isset.systemException)
        {
          throw tmp594.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSharedNotebooks failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LinkedNotebook> createLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await send_createLinkedNotebook(authenticationToken, linkedNotebook, cancellationToken);
        return await recv_createLinkedNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createLinkedNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp595 = new InternalStructs.createLinkedNotebook_args() {
          AuthenticationToken = authenticationToken,
          LinkedNotebook = linkedNotebook,
        };
        
        await tmp595.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.LinkedNotebook> recv_createLinkedNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp596 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp596.Type == TMessageType.Exception)
        {
          var tmp597 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp597;
        }

        var tmp598 = new InternalStructs.createLinkedNotebook_result();
        await tmp598.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp598.__isset.success)
        {
          return tmp598.Success;
        }
        if (tmp598.__isset.userException)
        {
          throw tmp598.UserException;
        }
        if (tmp598.__isset.notFoundException)
        {
          throw tmp598.NotFoundException;
        }
        if (tmp598.__isset.systemException)
        {
          throw tmp598.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createLinkedNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await send_updateLinkedNotebook(authenticationToken, linkedNotebook, cancellationToken);
        return await recv_updateLinkedNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateLinkedNotebook(string authenticationToken, global::Evernote.EDAM.Type.LinkedNotebook linkedNotebook, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateLinkedNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp599 = new InternalStructs.updateLinkedNotebook_args() {
          AuthenticationToken = authenticationToken,
          LinkedNotebook = linkedNotebook,
        };
        
        await tmp599.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateLinkedNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp600 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp600.Type == TMessageType.Exception)
        {
          var tmp601 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp601;
        }

        var tmp602 = new InternalStructs.updateLinkedNotebook_result();
        await tmp602.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp602.__isset.success)
        {
          return tmp602.Success;
        }
        if (tmp602.__isset.userException)
        {
          throw tmp602.UserException;
        }
        if (tmp602.__isset.notFoundException)
        {
          throw tmp602.NotFoundException;
        }
        if (tmp602.__isset.systemException)
        {
          throw tmp602.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateLinkedNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.LinkedNotebook>> listLinkedNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_listLinkedNotebooks(authenticationToken, cancellationToken);
        return await recv_listLinkedNotebooks(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listLinkedNotebooks(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listLinkedNotebooks", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp603 = new InternalStructs.listLinkedNotebooks_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp603.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::Evernote.EDAM.Type.LinkedNotebook>> recv_listLinkedNotebooks(CancellationToken cancellationToken = default)
      {
        
        var tmp604 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp604.Type == TMessageType.Exception)
        {
          var tmp605 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp605;
        }

        var tmp606 = new InternalStructs.listLinkedNotebooks_result();
        await tmp606.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp606.__isset.success)
        {
          return tmp606.Success;
        }
        if (tmp606.__isset.userException)
        {
          throw tmp606.UserException;
        }
        if (tmp606.__isset.notFoundException)
        {
          throw tmp606.NotFoundException;
        }
        if (tmp606.__isset.systemException)
        {
          throw tmp606.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listLinkedNotebooks failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> expungeLinkedNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_expungeLinkedNotebook(authenticationToken, guid, cancellationToken);
        return await recv_expungeLinkedNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_expungeLinkedNotebook(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("expungeLinkedNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp607 = new InternalStructs.expungeLinkedNotebook_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp607.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_expungeLinkedNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp608.Type == TMessageType.Exception)
        {
          var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp609;
        }

        var tmp610 = new InternalStructs.expungeLinkedNotebook_result();
        await tmp610.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp610.__isset.success)
        {
          return tmp610.Success;
        }
        if (tmp610.__isset.userException)
        {
          throw tmp610.UserException;
        }
        if (tmp610.__isset.notFoundException)
        {
          throw tmp610.NotFoundException;
        }
        if (tmp610.__isset.systemException)
        {
          throw tmp610.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "expungeLinkedNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_authenticateToSharedNotebook(shareKeyOrGlobalId, authenticationToken, cancellationToken);
        return await recv_authenticateToSharedNotebook(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticateToSharedNotebook", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp611 = new InternalStructs.authenticateToSharedNotebook_args() {
          ShareKeyOrGlobalId = shareKeyOrGlobalId,
          AuthenticationToken = authenticationToken,
        };
        
        await tmp611.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> recv_authenticateToSharedNotebook(CancellationToken cancellationToken = default)
      {
        
        var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp612.Type == TMessageType.Exception)
        {
          var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp613;
        }

        var tmp614 = new InternalStructs.authenticateToSharedNotebook_result();
        await tmp614.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp614.__isset.success)
        {
          return tmp614.Success;
        }
        if (tmp614.__isset.userException)
        {
          throw tmp614.UserException;
        }
        if (tmp614.__isset.notFoundException)
        {
          throw tmp614.NotFoundException;
        }
        if (tmp614.__isset.systemException)
        {
          throw tmp614.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateToSharedNotebook failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> getSharedNotebookByAuth(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_getSharedNotebookByAuth(authenticationToken, cancellationToken);
        return await recv_getSharedNotebookByAuth(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getSharedNotebookByAuth(string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSharedNotebookByAuth", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp615 = new InternalStructs.getSharedNotebookByAuth_args() {
          AuthenticationToken = authenticationToken,
        };
        
        await tmp615.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.Type.SharedNotebook> recv_getSharedNotebookByAuth(CancellationToken cancellationToken = default)
      {
        
        var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp616.Type == TMessageType.Exception)
        {
          var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp617;
        }

        var tmp618 = new InternalStructs.getSharedNotebookByAuth_result();
        await tmp618.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp618.__isset.success)
        {
          return tmp618.Success;
        }
        if (tmp618.__isset.userException)
        {
          throw tmp618.UserException;
        }
        if (tmp618.__isset.notFoundException)
        {
          throw tmp618.NotFoundException;
        }
        if (tmp618.__isset.systemException)
        {
          throw tmp618.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSharedNotebookByAuth failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task emailNote(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteEmailParameters parameters, CancellationToken cancellationToken = default)
      {
        await send_emailNote(authenticationToken, parameters, cancellationToken);
        await recv_emailNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_emailNote(string authenticationToken, global::Evernote.EDAM.NoteStore.NoteEmailParameters parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("emailNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp619 = new InternalStructs.emailNote_args() {
          AuthenticationToken = authenticationToken,
          Parameters = parameters,
        };
        
        await tmp619.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_emailNote(CancellationToken cancellationToken = default)
      {
        
        var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp620.Type == TMessageType.Exception)
        {
          var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp621;
        }

        var tmp622 = new InternalStructs.emailNote_result();
        await tmp622.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp622.__isset.userException)
        {
          throw tmp622.UserException;
        }
        if (tmp622.__isset.notFoundException)
        {
          throw tmp622.NotFoundException;
        }
        if (tmp622.__isset.systemException)
        {
          throw tmp622.SystemException;
        }
      }

      public async global::System.Threading.Tasks.Task<string> shareNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_shareNote(authenticationToken, guid, cancellationToken);
        return await recv_shareNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shareNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shareNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp623 = new InternalStructs.shareNote_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp623.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_shareNote(CancellationToken cancellationToken = default)
      {
        
        var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp624.Type == TMessageType.Exception)
        {
          var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp625;
        }

        var tmp626 = new InternalStructs.shareNote_result();
        await tmp626.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp626.__isset.success)
        {
          return tmp626.Success;
        }
        if (tmp626.__isset.userException)
        {
          throw tmp626.UserException;
        }
        if (tmp626.__isset.notFoundException)
        {
          throw tmp626.NotFoundException;
        }
        if (tmp626.__isset.systemException)
        {
          throw tmp626.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shareNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task stopSharingNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await send_stopSharingNote(authenticationToken, guid, cancellationToken);
        await recv_stopSharingNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stopSharingNote(string authenticationToken, string guid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stopSharingNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp627 = new InternalStructs.stopSharingNote_args() {
          AuthenticationToken = authenticationToken,
          Guid = guid,
        };
        
        await tmp627.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_stopSharingNote(CancellationToken cancellationToken = default)
      {
        
        var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp628.Type == TMessageType.Exception)
        {
          var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp629;
        }

        var tmp630 = new InternalStructs.stopSharingNote_result();
        await tmp630.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp630.__isset.userException)
        {
          throw tmp630.UserException;
        }
        if (tmp630.__isset.notFoundException)
        {
          throw tmp630.NotFoundException;
        }
        if (tmp630.__isset.systemException)
        {
          throw tmp630.SystemException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> authenticateToSharedNote(string guid, string noteKey, string authenticationToken, CancellationToken cancellationToken = default)
      {
        await send_authenticateToSharedNote(guid, noteKey, authenticationToken, cancellationToken);
        return await recv_authenticateToSharedNote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticateToSharedNote(string guid, string noteKey, string authenticationToken, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticateToSharedNote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp631 = new InternalStructs.authenticateToSharedNote_args() {
          Guid = guid,
          NoteKey = noteKey,
          AuthenticationToken = authenticationToken,
        };
        
        await tmp631.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.UserStore.AuthenticationResult> recv_authenticateToSharedNote(CancellationToken cancellationToken = default)
      {
        
        var tmp632 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp632.Type == TMessageType.Exception)
        {
          var tmp633 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp633;
        }

        var tmp634 = new InternalStructs.authenticateToSharedNote_result();
        await tmp634.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp634.__isset.success)
        {
          return tmp634.Success;
        }
        if (tmp634.__isset.userException)
        {
          throw tmp634.UserException;
        }
        if (tmp634.__isset.notFoundException)
        {
          throw tmp634.NotFoundException;
        }
        if (tmp634.__isset.systemException)
        {
          throw tmp634.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateToSharedNote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.RelatedResult> findRelated(string authenticationToken, global::Evernote.EDAM.NoteStore.RelatedQuery query, global::Evernote.EDAM.NoteStore.RelatedResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await send_findRelated(authenticationToken, query, resultSpec, cancellationToken);
        return await recv_findRelated(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_findRelated(string authenticationToken, global::Evernote.EDAM.NoteStore.RelatedQuery query, global::Evernote.EDAM.NoteStore.RelatedResultSpec resultSpec, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("findRelated", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp635 = new InternalStructs.findRelated_args() {
          AuthenticationToken = authenticationToken,
          Query = query,
          ResultSpec = resultSpec,
        };
        
        await tmp635.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.RelatedResult> recv_findRelated(CancellationToken cancellationToken = default)
      {
        
        var tmp636 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp636.Type == TMessageType.Exception)
        {
          var tmp637 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp637;
        }

        var tmp638 = new InternalStructs.findRelated_result();
        await tmp638.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp638.__isset.success)
        {
          return tmp638.Success;
        }
        if (tmp638.__isset.userException)
        {
          throw tmp638.UserException;
        }
        if (tmp638.__isset.systemException)
        {
          throw tmp638.SystemException;
        }
        if (tmp638.__isset.notFoundException)
        {
          throw tmp638.NotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findRelated failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult> updateNoteIfUsnMatches(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await send_updateNoteIfUsnMatches(authenticationToken, note, cancellationToken);
        return await recv_updateNoteIfUsnMatches(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateNoteIfUsnMatches(string authenticationToken, global::Evernote.EDAM.Type.Note note, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateNoteIfUsnMatches", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp639 = new InternalStructs.updateNoteIfUsnMatches_args() {
          AuthenticationToken = authenticationToken,
          Note = note,
        };
        
        await tmp639.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult> recv_updateNoteIfUsnMatches(CancellationToken cancellationToken = default)
      {
        
        var tmp640 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp640.Type == TMessageType.Exception)
        {
          var tmp641 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp641;
        }

        var tmp642 = new InternalStructs.updateNoteIfUsnMatches_result();
        await tmp642.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp642.__isset.success)
        {
          return tmp642.Success;
        }
        if (tmp642.__isset.userException)
        {
          throw tmp642.UserException;
        }
        if (tmp642.__isset.notFoundException)
        {
          throw tmp642.NotFoundException;
        }
        if (tmp642.__isset.systemException)
        {
          throw tmp642.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNoteIfUsnMatches failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult> manageNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters parameters, CancellationToken cancellationToken = default)
      {
        await send_manageNotebookShares(authenticationToken, parameters, cancellationToken);
        return await recv_manageNotebookShares(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_manageNotebookShares(string authenticationToken, global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("manageNotebookShares", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp643 = new InternalStructs.manageNotebookShares_args() {
          AuthenticationToken = authenticationToken,
          Parameters = parameters,
        };
        
        await tmp643.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult> recv_manageNotebookShares(CancellationToken cancellationToken = default)
      {
        
        var tmp644 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp644.Type == TMessageType.Exception)
        {
          var tmp645 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp645;
        }

        var tmp646 = new InternalStructs.manageNotebookShares_result();
        await tmp646.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp646.__isset.success)
        {
          return tmp646.Success;
        }
        if (tmp646.__isset.userException)
        {
          throw tmp646.UserException;
        }
        if (tmp646.__isset.notFoundException)
        {
          throw tmp646.NotFoundException;
        }
        if (tmp646.__isset.systemException)
        {
          throw tmp646.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "manageNotebookShares failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ShareRelationships> getNotebookShares(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default)
      {
        await send_getNotebookShares(authenticationToken, notebookGuid, cancellationToken);
        return await recv_getNotebookShares(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNotebookShares(string authenticationToken, string notebookGuid, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNotebookShares", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp647 = new InternalStructs.getNotebookShares_args() {
          AuthenticationToken = authenticationToken,
          NotebookGuid = notebookGuid,
        };
        
        await tmp647.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Evernote.EDAM.NoteStore.ShareRelationships> recv_getNotebookShares(CancellationToken cancellationToken = default)
      {
        
        var tmp648 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp648.Type == TMessageType.Exception)
        {
          var tmp649 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp649;
        }

        var tmp650 = new InternalStructs.getNotebookShares_result();
        await tmp650.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp650.__isset.success)
        {
          return tmp650.Success;
        }
        if (tmp650.__isset.userException)
        {
          throw tmp650.UserException;
        }
        if (tmp650.__isset.notFoundException)
        {
          throw tmp650.NotFoundException;
        }
        if (tmp650.__isset.systemException)
        {
          throw tmp650.SystemException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotebookShares failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["getSyncState"] = getSyncState_ProcessAsync;
        processMap_["getFilteredSyncChunk"] = getFilteredSyncChunk_ProcessAsync;
        processMap_["getLinkedNotebookSyncState"] = getLinkedNotebookSyncState_ProcessAsync;
        processMap_["getLinkedNotebookSyncChunk"] = getLinkedNotebookSyncChunk_ProcessAsync;
        processMap_["listNotebooks"] = listNotebooks_ProcessAsync;
        processMap_["listAccessibleBusinessNotebooks"] = listAccessibleBusinessNotebooks_ProcessAsync;
        processMap_["getNotebook"] = getNotebook_ProcessAsync;
        processMap_["getDefaultNotebook"] = getDefaultNotebook_ProcessAsync;
        processMap_["createNotebook"] = createNotebook_ProcessAsync;
        processMap_["updateNotebook"] = updateNotebook_ProcessAsync;
        processMap_["expungeNotebook"] = expungeNotebook_ProcessAsync;
        processMap_["listTags"] = listTags_ProcessAsync;
        processMap_["listTagsByNotebook"] = listTagsByNotebook_ProcessAsync;
        processMap_["getTag"] = getTag_ProcessAsync;
        processMap_["createTag"] = createTag_ProcessAsync;
        processMap_["updateTag"] = updateTag_ProcessAsync;
        processMap_["untagAll"] = untagAll_ProcessAsync;
        processMap_["expungeTag"] = expungeTag_ProcessAsync;
        processMap_["listSearches"] = listSearches_ProcessAsync;
        processMap_["getSearch"] = getSearch_ProcessAsync;
        processMap_["createSearch"] = createSearch_ProcessAsync;
        processMap_["updateSearch"] = updateSearch_ProcessAsync;
        processMap_["expungeSearch"] = expungeSearch_ProcessAsync;
        processMap_["findNoteOffset"] = findNoteOffset_ProcessAsync;
        processMap_["findNotesMetadata"] = findNotesMetadata_ProcessAsync;
        processMap_["findNoteCounts"] = findNoteCounts_ProcessAsync;
        processMap_["getNoteWithResultSpec"] = getNoteWithResultSpec_ProcessAsync;
        processMap_["getNote"] = getNote_ProcessAsync;
        processMap_["getNoteApplicationData"] = getNoteApplicationData_ProcessAsync;
        processMap_["getNoteApplicationDataEntry"] = getNoteApplicationDataEntry_ProcessAsync;
        processMap_["setNoteApplicationDataEntry"] = setNoteApplicationDataEntry_ProcessAsync;
        processMap_["unsetNoteApplicationDataEntry"] = unsetNoteApplicationDataEntry_ProcessAsync;
        processMap_["getNoteContent"] = getNoteContent_ProcessAsync;
        processMap_["getNoteSearchText"] = getNoteSearchText_ProcessAsync;
        processMap_["getResourceSearchText"] = getResourceSearchText_ProcessAsync;
        processMap_["getNoteTagNames"] = getNoteTagNames_ProcessAsync;
        processMap_["createNote"] = createNote_ProcessAsync;
        processMap_["updateNote"] = updateNote_ProcessAsync;
        processMap_["deleteNote"] = deleteNote_ProcessAsync;
        processMap_["expungeNote"] = expungeNote_ProcessAsync;
        processMap_["copyNote"] = copyNote_ProcessAsync;
        processMap_["listNoteVersions"] = listNoteVersions_ProcessAsync;
        processMap_["getNoteVersion"] = getNoteVersion_ProcessAsync;
        processMap_["getResource"] = getResource_ProcessAsync;
        processMap_["getResourceApplicationData"] = getResourceApplicationData_ProcessAsync;
        processMap_["getResourceApplicationDataEntry"] = getResourceApplicationDataEntry_ProcessAsync;
        processMap_["setResourceApplicationDataEntry"] = setResourceApplicationDataEntry_ProcessAsync;
        processMap_["unsetResourceApplicationDataEntry"] = unsetResourceApplicationDataEntry_ProcessAsync;
        processMap_["updateResource"] = updateResource_ProcessAsync;
        processMap_["getResourceData"] = getResourceData_ProcessAsync;
        processMap_["getResourceByHash"] = getResourceByHash_ProcessAsync;
        processMap_["getResourceRecognition"] = getResourceRecognition_ProcessAsync;
        processMap_["getResourceAlternateData"] = getResourceAlternateData_ProcessAsync;
        processMap_["getResourceAttributes"] = getResourceAttributes_ProcessAsync;
        processMap_["getPublicNotebook"] = getPublicNotebook_ProcessAsync;
        processMap_["shareNotebook"] = shareNotebook_ProcessAsync;
        processMap_["createOrUpdateNotebookShares"] = createOrUpdateNotebookShares_ProcessAsync;
        processMap_["updateSharedNotebook"] = updateSharedNotebook_ProcessAsync;
        processMap_["setNotebookRecipientSettings"] = setNotebookRecipientSettings_ProcessAsync;
        processMap_["listSharedNotebooks"] = listSharedNotebooks_ProcessAsync;
        processMap_["createLinkedNotebook"] = createLinkedNotebook_ProcessAsync;
        processMap_["updateLinkedNotebook"] = updateLinkedNotebook_ProcessAsync;
        processMap_["listLinkedNotebooks"] = listLinkedNotebooks_ProcessAsync;
        processMap_["expungeLinkedNotebook"] = expungeLinkedNotebook_ProcessAsync;
        processMap_["authenticateToSharedNotebook"] = authenticateToSharedNotebook_ProcessAsync;
        processMap_["getSharedNotebookByAuth"] = getSharedNotebookByAuth_ProcessAsync;
        processMap_["emailNote"] = emailNote_ProcessAsync;
        processMap_["shareNote"] = shareNote_ProcessAsync;
        processMap_["stopSharingNote"] = stopSharingNote_ProcessAsync;
        processMap_["authenticateToSharedNote"] = authenticateToSharedNote_ProcessAsync;
        processMap_["findRelated"] = findRelated_ProcessAsync;
        processMap_["updateNoteIfUsnMatches"] = updateNoteIfUsnMatches_ProcessAsync;
        processMap_["manageNotebookShares"] = manageNotebookShares_ProcessAsync;
        processMap_["getNotebookShares"] = getNotebookShares_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task getSyncState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp651 = new InternalStructs.getSyncState_args();
        await tmp651.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp652 = new InternalStructs.getSyncState_result();
        try
        {
          try
          {
            tmp652.Success = await _iAsync.getSyncState(tmp651.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp653)
          {
            tmp652.UserException = tmp653;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp654)
          {
            tmp652.SystemException = tmp654;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getSyncState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp652.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp655)
        {
          var tmp656 = $"Error occurred in {GetType().FullName}: {tmp655.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp655, tmp656);
          else
            Console.Error.WriteLine(tmp656);
          var tmp657 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSyncState", TMessageType.Exception, seqid), cancellationToken);
          await tmp657.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getFilteredSyncChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp658 = new InternalStructs.getFilteredSyncChunk_args();
        await tmp658.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp659 = new InternalStructs.getFilteredSyncChunk_result();
        try
        {
          try
          {
            tmp659.Success = await _iAsync.getFilteredSyncChunk(tmp658.AuthenticationToken, tmp658.AfterUSN, tmp658.MaxEntries, tmp658.Filter, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp660)
          {
            tmp659.UserException = tmp660;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp661)
          {
            tmp659.SystemException = tmp661;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getFilteredSyncChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp659.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp662)
        {
          var tmp663 = $"Error occurred in {GetType().FullName}: {tmp662.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp662, tmp663);
          else
            Console.Error.WriteLine(tmp663);
          var tmp664 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFilteredSyncChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp664.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getLinkedNotebookSyncState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp665 = new InternalStructs.getLinkedNotebookSyncState_args();
        await tmp665.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp666 = new InternalStructs.getLinkedNotebookSyncState_result();
        try
        {
          try
          {
            tmp666.Success = await _iAsync.getLinkedNotebookSyncState(tmp665.AuthenticationToken, tmp665.LinkedNotebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp667)
          {
            tmp666.UserException = tmp667;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp668)
          {
            tmp666.SystemException = tmp668;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp669)
          {
            tmp666.NotFoundException = tmp669;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp666.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp670)
        {
          var tmp671 = $"Error occurred in {GetType().FullName}: {tmp670.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp670, tmp671);
          else
            Console.Error.WriteLine(tmp671);
          var tmp672 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncState", TMessageType.Exception, seqid), cancellationToken);
          await tmp672.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getLinkedNotebookSyncChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp673 = new InternalStructs.getLinkedNotebookSyncChunk_args();
        await tmp673.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp674 = new InternalStructs.getLinkedNotebookSyncChunk_result();
        try
        {
          try
          {
            tmp674.Success = await _iAsync.getLinkedNotebookSyncChunk(tmp673.AuthenticationToken, tmp673.LinkedNotebook, tmp673.AfterUSN, tmp673.MaxEntries, tmp673.FullSyncOnly, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp675)
          {
            tmp674.UserException = tmp675;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp676)
          {
            tmp674.SystemException = tmp676;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp677)
          {
            tmp674.NotFoundException = tmp677;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp674.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp678)
        {
          var tmp679 = $"Error occurred in {GetType().FullName}: {tmp678.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp678, tmp679);
          else
            Console.Error.WriteLine(tmp679);
          var tmp680 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getLinkedNotebookSyncChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp680.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listNotebooks_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp681 = new InternalStructs.listNotebooks_args();
        await tmp681.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp682 = new InternalStructs.listNotebooks_result();
        try
        {
          try
          {
            tmp682.Success = await _iAsync.listNotebooks(tmp681.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp683)
          {
            tmp682.UserException = tmp683;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp684)
          {
            tmp682.SystemException = tmp684;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listNotebooks", TMessageType.Reply, seqid), cancellationToken); 
          await tmp682.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp685)
        {
          var tmp686 = $"Error occurred in {GetType().FullName}: {tmp685.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp685, tmp686);
          else
            Console.Error.WriteLine(tmp686);
          var tmp687 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listNotebooks", TMessageType.Exception, seqid), cancellationToken);
          await tmp687.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listAccessibleBusinessNotebooks_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp688 = new InternalStructs.listAccessibleBusinessNotebooks_args();
        await tmp688.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp689 = new InternalStructs.listAccessibleBusinessNotebooks_result();
        try
        {
          try
          {
            tmp689.Success = await _iAsync.listAccessibleBusinessNotebooks(tmp688.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp690)
          {
            tmp689.UserException = tmp690;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp691)
          {
            tmp689.SystemException = tmp691;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listAccessibleBusinessNotebooks", TMessageType.Reply, seqid), cancellationToken); 
          await tmp689.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp692)
        {
          var tmp693 = $"Error occurred in {GetType().FullName}: {tmp692.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp692, tmp693);
          else
            Console.Error.WriteLine(tmp693);
          var tmp694 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listAccessibleBusinessNotebooks", TMessageType.Exception, seqid), cancellationToken);
          await tmp694.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp695 = new InternalStructs.getNotebook_args();
        await tmp695.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp696 = new InternalStructs.getNotebook_result();
        try
        {
          try
          {
            tmp696.Success = await _iAsync.getNotebook(tmp695.AuthenticationToken, tmp695.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp697)
          {
            tmp696.UserException = tmp697;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp698)
          {
            tmp696.SystemException = tmp698;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp699)
          {
            tmp696.NotFoundException = tmp699;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp696.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp700)
        {
          var tmp701 = $"Error occurred in {GetType().FullName}: {tmp700.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp700, tmp701);
          else
            Console.Error.WriteLine(tmp701);
          var tmp702 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp702.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getDefaultNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp703 = new InternalStructs.getDefaultNotebook_args();
        await tmp703.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp704 = new InternalStructs.getDefaultNotebook_result();
        try
        {
          try
          {
            tmp704.Success = await _iAsync.getDefaultNotebook(tmp703.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp705)
          {
            tmp704.UserException = tmp705;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp706)
          {
            tmp704.SystemException = tmp706;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getDefaultNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp704.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp707)
        {
          var tmp708 = $"Error occurred in {GetType().FullName}: {tmp707.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp707, tmp708);
          else
            Console.Error.WriteLine(tmp708);
          var tmp709 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getDefaultNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp709.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp710 = new InternalStructs.createNotebook_args();
        await tmp710.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp711 = new InternalStructs.createNotebook_result();
        try
        {
          try
          {
            tmp711.Success = await _iAsync.createNotebook(tmp710.AuthenticationToken, tmp710.Notebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp712)
          {
            tmp711.UserException = tmp712;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp713)
          {
            tmp711.SystemException = tmp713;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp714)
          {
            tmp711.NotFoundException = tmp714;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp711.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp715)
        {
          var tmp716 = $"Error occurred in {GetType().FullName}: {tmp715.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp715, tmp716);
          else
            Console.Error.WriteLine(tmp716);
          var tmp717 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp717.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp718 = new InternalStructs.updateNotebook_args();
        await tmp718.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp719 = new InternalStructs.updateNotebook_result();
        try
        {
          try
          {
            tmp719.Success = await _iAsync.updateNotebook(tmp718.AuthenticationToken, tmp718.Notebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp720)
          {
            tmp719.UserException = tmp720;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp721)
          {
            tmp719.SystemException = tmp721;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp722)
          {
            tmp719.NotFoundException = tmp722;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp719.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp723)
        {
          var tmp724 = $"Error occurred in {GetType().FullName}: {tmp723.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp723, tmp724);
          else
            Console.Error.WriteLine(tmp724);
          var tmp725 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp725.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expungeNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp726 = new InternalStructs.expungeNotebook_args();
        await tmp726.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp727 = new InternalStructs.expungeNotebook_result();
        try
        {
          try
          {
            tmp727.Success = await _iAsync.expungeNotebook(tmp726.AuthenticationToken, tmp726.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp728)
          {
            tmp727.UserException = tmp728;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp729)
          {
            tmp727.SystemException = tmp729;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp730)
          {
            tmp727.NotFoundException = tmp730;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("expungeNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp727.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp731)
        {
          var tmp732 = $"Error occurred in {GetType().FullName}: {tmp731.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp731, tmp732);
          else
            Console.Error.WriteLine(tmp732);
          var tmp733 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expungeNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp733.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listTags_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp734 = new InternalStructs.listTags_args();
        await tmp734.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp735 = new InternalStructs.listTags_result();
        try
        {
          try
          {
            tmp735.Success = await _iAsync.listTags(tmp734.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp736)
          {
            tmp735.UserException = tmp736;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp737)
          {
            tmp735.SystemException = tmp737;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Reply, seqid), cancellationToken); 
          await tmp735.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp738)
        {
          var tmp739 = $"Error occurred in {GetType().FullName}: {tmp738.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp738, tmp739);
          else
            Console.Error.WriteLine(tmp739);
          var tmp740 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Exception, seqid), cancellationToken);
          await tmp740.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listTagsByNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp741 = new InternalStructs.listTagsByNotebook_args();
        await tmp741.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp742 = new InternalStructs.listTagsByNotebook_result();
        try
        {
          try
          {
            tmp742.Success = await _iAsync.listTagsByNotebook(tmp741.AuthenticationToken, tmp741.NotebookGuid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp743)
          {
            tmp742.UserException = tmp743;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp744)
          {
            tmp742.SystemException = tmp744;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp745)
          {
            tmp742.NotFoundException = tmp745;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listTagsByNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp742.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp746)
        {
          var tmp747 = $"Error occurred in {GetType().FullName}: {tmp746.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp746, tmp747);
          else
            Console.Error.WriteLine(tmp747);
          var tmp748 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listTagsByNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp748.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp749 = new InternalStructs.getTag_args();
        await tmp749.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp750 = new InternalStructs.getTag_result();
        try
        {
          try
          {
            tmp750.Success = await _iAsync.getTag(tmp749.AuthenticationToken, tmp749.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp751)
          {
            tmp750.UserException = tmp751;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp752)
          {
            tmp750.SystemException = tmp752;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp753)
          {
            tmp750.NotFoundException = tmp753;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp750.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp754)
        {
          var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
          else
            Console.Error.WriteLine(tmp755);
          var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp756.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp757 = new InternalStructs.createTag_args();
        await tmp757.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp758 = new InternalStructs.createTag_result();
        try
        {
          try
          {
            tmp758.Success = await _iAsync.createTag(tmp757.AuthenticationToken, tmp757.Tag, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp759)
          {
            tmp758.UserException = tmp759;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp760)
          {
            tmp758.SystemException = tmp760;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp761)
          {
            tmp758.NotFoundException = tmp761;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp758.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp762)
        {
          var tmp763 = $"Error occurred in {GetType().FullName}: {tmp762.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp762, tmp763);
          else
            Console.Error.WriteLine(tmp763);
          var tmp764 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp764.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp765 = new InternalStructs.updateTag_args();
        await tmp765.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp766 = new InternalStructs.updateTag_result();
        try
        {
          try
          {
            tmp766.Success = await _iAsync.updateTag(tmp765.AuthenticationToken, tmp765.Tag, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp767)
          {
            tmp766.UserException = tmp767;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp768)
          {
            tmp766.SystemException = tmp768;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp769)
          {
            tmp766.NotFoundException = tmp769;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp766.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp770)
        {
          var tmp771 = $"Error occurred in {GetType().FullName}: {tmp770.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp770, tmp771);
          else
            Console.Error.WriteLine(tmp771);
          var tmp772 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp772.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task untagAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp773 = new InternalStructs.untagAll_args();
        await tmp773.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp774 = new InternalStructs.untagAll_result();
        try
        {
          try
          {
            await _iAsync.untagAll(tmp773.AuthenticationToken, tmp773.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp775)
          {
            tmp774.UserException = tmp775;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp776)
          {
            tmp774.SystemException = tmp776;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp777)
          {
            tmp774.NotFoundException = tmp777;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("untagAll", TMessageType.Reply, seqid), cancellationToken); 
          await tmp774.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp778)
        {
          var tmp779 = $"Error occurred in {GetType().FullName}: {tmp778.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp778, tmp779);
          else
            Console.Error.WriteLine(tmp779);
          var tmp780 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("untagAll", TMessageType.Exception, seqid), cancellationToken);
          await tmp780.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expungeTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp781 = new InternalStructs.expungeTag_args();
        await tmp781.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp782 = new InternalStructs.expungeTag_result();
        try
        {
          try
          {
            tmp782.Success = await _iAsync.expungeTag(tmp781.AuthenticationToken, tmp781.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp783)
          {
            tmp782.UserException = tmp783;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp784)
          {
            tmp782.SystemException = tmp784;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp785)
          {
            tmp782.NotFoundException = tmp785;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("expungeTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp782.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp786)
        {
          var tmp787 = $"Error occurred in {GetType().FullName}: {tmp786.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp786, tmp787);
          else
            Console.Error.WriteLine(tmp787);
          var tmp788 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expungeTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp788.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listSearches_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp789 = new InternalStructs.listSearches_args();
        await tmp789.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp790 = new InternalStructs.listSearches_result();
        try
        {
          try
          {
            tmp790.Success = await _iAsync.listSearches(tmp789.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp791)
          {
            tmp790.UserException = tmp791;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp792)
          {
            tmp790.SystemException = tmp792;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listSearches", TMessageType.Reply, seqid), cancellationToken); 
          await tmp790.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp793)
        {
          var tmp794 = $"Error occurred in {GetType().FullName}: {tmp793.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp793, tmp794);
          else
            Console.Error.WriteLine(tmp794);
          var tmp795 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listSearches", TMessageType.Exception, seqid), cancellationToken);
          await tmp795.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getSearch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp796 = new InternalStructs.getSearch_args();
        await tmp796.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp797 = new InternalStructs.getSearch_result();
        try
        {
          try
          {
            tmp797.Success = await _iAsync.getSearch(tmp796.AuthenticationToken, tmp796.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp798)
          {
            tmp797.UserException = tmp798;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp799)
          {
            tmp797.SystemException = tmp799;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp800)
          {
            tmp797.NotFoundException = tmp800;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getSearch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp797.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp801)
        {
          var tmp802 = $"Error occurred in {GetType().FullName}: {tmp801.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp801, tmp802);
          else
            Console.Error.WriteLine(tmp802);
          var tmp803 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSearch", TMessageType.Exception, seqid), cancellationToken);
          await tmp803.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createSearch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp804 = new InternalStructs.createSearch_args();
        await tmp804.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp805 = new InternalStructs.createSearch_result();
        try
        {
          try
          {
            tmp805.Success = await _iAsync.createSearch(tmp804.AuthenticationToken, tmp804.Search, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp806)
          {
            tmp805.UserException = tmp806;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp807)
          {
            tmp805.SystemException = tmp807;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createSearch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp805.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp808)
        {
          var tmp809 = $"Error occurred in {GetType().FullName}: {tmp808.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp808, tmp809);
          else
            Console.Error.WriteLine(tmp809);
          var tmp810 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createSearch", TMessageType.Exception, seqid), cancellationToken);
          await tmp810.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateSearch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp811 = new InternalStructs.updateSearch_args();
        await tmp811.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp812 = new InternalStructs.updateSearch_result();
        try
        {
          try
          {
            tmp812.Success = await _iAsync.updateSearch(tmp811.AuthenticationToken, tmp811.Search, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp813)
          {
            tmp812.UserException = tmp813;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp814)
          {
            tmp812.SystemException = tmp814;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp815)
          {
            tmp812.NotFoundException = tmp815;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateSearch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp812.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp816)
        {
          var tmp817 = $"Error occurred in {GetType().FullName}: {tmp816.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp816, tmp817);
          else
            Console.Error.WriteLine(tmp817);
          var tmp818 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateSearch", TMessageType.Exception, seqid), cancellationToken);
          await tmp818.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expungeSearch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp819 = new InternalStructs.expungeSearch_args();
        await tmp819.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp820 = new InternalStructs.expungeSearch_result();
        try
        {
          try
          {
            tmp820.Success = await _iAsync.expungeSearch(tmp819.AuthenticationToken, tmp819.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp821)
          {
            tmp820.UserException = tmp821;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp822)
          {
            tmp820.SystemException = tmp822;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp823)
          {
            tmp820.NotFoundException = tmp823;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("expungeSearch", TMessageType.Reply, seqid), cancellationToken); 
          await tmp820.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp824)
        {
          var tmp825 = $"Error occurred in {GetType().FullName}: {tmp824.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp824, tmp825);
          else
            Console.Error.WriteLine(tmp825);
          var tmp826 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expungeSearch", TMessageType.Exception, seqid), cancellationToken);
          await tmp826.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task findNoteOffset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp827 = new InternalStructs.findNoteOffset_args();
        await tmp827.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp828 = new InternalStructs.findNoteOffset_result();
        try
        {
          try
          {
            tmp828.Success = await _iAsync.findNoteOffset(tmp827.AuthenticationToken, tmp827.Filter, tmp827.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp829)
          {
            tmp828.UserException = tmp829;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp830)
          {
            tmp828.SystemException = tmp830;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp831)
          {
            tmp828.NotFoundException = tmp831;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("findNoteOffset", TMessageType.Reply, seqid), cancellationToken); 
          await tmp828.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp832)
        {
          var tmp833 = $"Error occurred in {GetType().FullName}: {tmp832.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp832, tmp833);
          else
            Console.Error.WriteLine(tmp833);
          var tmp834 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("findNoteOffset", TMessageType.Exception, seqid), cancellationToken);
          await tmp834.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task findNotesMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp835 = new InternalStructs.findNotesMetadata_args();
        await tmp835.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp836 = new InternalStructs.findNotesMetadata_result();
        try
        {
          try
          {
            tmp836.Success = await _iAsync.findNotesMetadata(tmp835.AuthenticationToken, tmp835.Filter, tmp835.Offset, tmp835.MaxNotes, tmp835.ResultSpec, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp837)
          {
            tmp836.UserException = tmp837;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp838)
          {
            tmp836.SystemException = tmp838;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp839)
          {
            tmp836.NotFoundException = tmp839;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("findNotesMetadata", TMessageType.Reply, seqid), cancellationToken); 
          await tmp836.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp840)
        {
          var tmp841 = $"Error occurred in {GetType().FullName}: {tmp840.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp840, tmp841);
          else
            Console.Error.WriteLine(tmp841);
          var tmp842 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("findNotesMetadata", TMessageType.Exception, seqid), cancellationToken);
          await tmp842.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task findNoteCounts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp843 = new InternalStructs.findNoteCounts_args();
        await tmp843.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp844 = new InternalStructs.findNoteCounts_result();
        try
        {
          try
          {
            tmp844.Success = await _iAsync.findNoteCounts(tmp843.AuthenticationToken, tmp843.Filter, tmp843.WithTrash, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp845)
          {
            tmp844.UserException = tmp845;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp846)
          {
            tmp844.SystemException = tmp846;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp847)
          {
            tmp844.NotFoundException = tmp847;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("findNoteCounts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp844.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp848)
        {
          var tmp849 = $"Error occurred in {GetType().FullName}: {tmp848.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp848, tmp849);
          else
            Console.Error.WriteLine(tmp849);
          var tmp850 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("findNoteCounts", TMessageType.Exception, seqid), cancellationToken);
          await tmp850.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteWithResultSpec_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp851 = new InternalStructs.getNoteWithResultSpec_args();
        await tmp851.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp852 = new InternalStructs.getNoteWithResultSpec_result();
        try
        {
          try
          {
            tmp852.Success = await _iAsync.getNoteWithResultSpec(tmp851.AuthenticationToken, tmp851.Guid, tmp851.ResultSpec, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp853)
          {
            tmp852.UserException = tmp853;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp854)
          {
            tmp852.SystemException = tmp854;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp855)
          {
            tmp852.NotFoundException = tmp855;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteWithResultSpec", TMessageType.Reply, seqid), cancellationToken); 
          await tmp852.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp856)
        {
          var tmp857 = $"Error occurred in {GetType().FullName}: {tmp856.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp856, tmp857);
          else
            Console.Error.WriteLine(tmp857);
          var tmp858 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteWithResultSpec", TMessageType.Exception, seqid), cancellationToken);
          await tmp858.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp859 = new InternalStructs.getNote_args();
        await tmp859.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp860 = new InternalStructs.getNote_result();
        try
        {
          try
          {
            tmp860.Success = await _iAsync.getNote(tmp859.AuthenticationToken, tmp859.Guid, tmp859.WithContent, tmp859.WithResourcesData, tmp859.WithResourcesRecognition, tmp859.WithResourcesAlternateData, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp861)
          {
            tmp860.UserException = tmp861;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp862)
          {
            tmp860.SystemException = tmp862;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp863)
          {
            tmp860.NotFoundException = tmp863;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp860.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp864)
        {
          var tmp865 = $"Error occurred in {GetType().FullName}: {tmp864.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp864, tmp865);
          else
            Console.Error.WriteLine(tmp865);
          var tmp866 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp866.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteApplicationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp867 = new InternalStructs.getNoteApplicationData_args();
        await tmp867.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp868 = new InternalStructs.getNoteApplicationData_result();
        try
        {
          try
          {
            tmp868.Success = await _iAsync.getNoteApplicationData(tmp867.AuthenticationToken, tmp867.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp869)
          {
            tmp868.UserException = tmp869;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp870)
          {
            tmp868.SystemException = tmp870;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp871)
          {
            tmp868.NotFoundException = tmp871;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteApplicationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp868.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp872)
        {
          var tmp873 = $"Error occurred in {GetType().FullName}: {tmp872.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp872, tmp873);
          else
            Console.Error.WriteLine(tmp873);
          var tmp874 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteApplicationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp874.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp875 = new InternalStructs.getNoteApplicationDataEntry_args();
        await tmp875.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp876 = new InternalStructs.getNoteApplicationDataEntry_result();
        try
        {
          try
          {
            tmp876.Success = await _iAsync.getNoteApplicationDataEntry(tmp875.AuthenticationToken, tmp875.Guid, tmp875.Key, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp877)
          {
            tmp876.UserException = tmp877;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp878)
          {
            tmp876.SystemException = tmp878;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp879)
          {
            tmp876.NotFoundException = tmp879;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp876.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp880)
        {
          var tmp881 = $"Error occurred in {GetType().FullName}: {tmp880.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp880, tmp881);
          else
            Console.Error.WriteLine(tmp881);
          var tmp882 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp882.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNoteApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp883 = new InternalStructs.setNoteApplicationDataEntry_args();
        await tmp883.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp884 = new InternalStructs.setNoteApplicationDataEntry_result();
        try
        {
          try
          {
            tmp884.Success = await _iAsync.setNoteApplicationDataEntry(tmp883.AuthenticationToken, tmp883.Guid, tmp883.Key, tmp883.Value, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp885)
          {
            tmp884.UserException = tmp885;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp886)
          {
            tmp884.SystemException = tmp886;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp887)
          {
            tmp884.NotFoundException = tmp887;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setNoteApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp884.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp888)
        {
          var tmp889 = $"Error occurred in {GetType().FullName}: {tmp888.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp888, tmp889);
          else
            Console.Error.WriteLine(tmp889);
          var tmp890 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setNoteApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp890.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsetNoteApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp891 = new InternalStructs.unsetNoteApplicationDataEntry_args();
        await tmp891.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp892 = new InternalStructs.unsetNoteApplicationDataEntry_result();
        try
        {
          try
          {
            tmp892.Success = await _iAsync.unsetNoteApplicationDataEntry(tmp891.AuthenticationToken, tmp891.Guid, tmp891.Key, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp893)
          {
            tmp892.UserException = tmp893;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp894)
          {
            tmp892.SystemException = tmp894;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp895)
          {
            tmp892.NotFoundException = tmp895;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unsetNoteApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp892.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp896)
        {
          var tmp897 = $"Error occurred in {GetType().FullName}: {tmp896.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp896, tmp897);
          else
            Console.Error.WriteLine(tmp897);
          var tmp898 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsetNoteApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp898.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteContent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp899 = new InternalStructs.getNoteContent_args();
        await tmp899.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp900 = new InternalStructs.getNoteContent_result();
        try
        {
          try
          {
            tmp900.Success = await _iAsync.getNoteContent(tmp899.AuthenticationToken, tmp899.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp901)
          {
            tmp900.UserException = tmp901;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp902)
          {
            tmp900.SystemException = tmp902;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp903)
          {
            tmp900.NotFoundException = tmp903;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteContent", TMessageType.Reply, seqid), cancellationToken); 
          await tmp900.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp904)
        {
          var tmp905 = $"Error occurred in {GetType().FullName}: {tmp904.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp904, tmp905);
          else
            Console.Error.WriteLine(tmp905);
          var tmp906 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteContent", TMessageType.Exception, seqid), cancellationToken);
          await tmp906.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteSearchText_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp907 = new InternalStructs.getNoteSearchText_args();
        await tmp907.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp908 = new InternalStructs.getNoteSearchText_result();
        try
        {
          try
          {
            tmp908.Success = await _iAsync.getNoteSearchText(tmp907.AuthenticationToken, tmp907.Guid, tmp907.NoteOnly, tmp907.TokenizeForIndexing, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp909)
          {
            tmp908.UserException = tmp909;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp910)
          {
            tmp908.SystemException = tmp910;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp911)
          {
            tmp908.NotFoundException = tmp911;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteSearchText", TMessageType.Reply, seqid), cancellationToken); 
          await tmp908.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp912)
        {
          var tmp913 = $"Error occurred in {GetType().FullName}: {tmp912.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp912, tmp913);
          else
            Console.Error.WriteLine(tmp913);
          var tmp914 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteSearchText", TMessageType.Exception, seqid), cancellationToken);
          await tmp914.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceSearchText_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp915 = new InternalStructs.getResourceSearchText_args();
        await tmp915.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp916 = new InternalStructs.getResourceSearchText_result();
        try
        {
          try
          {
            tmp916.Success = await _iAsync.getResourceSearchText(tmp915.AuthenticationToken, tmp915.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp917)
          {
            tmp916.UserException = tmp917;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp918)
          {
            tmp916.SystemException = tmp918;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp919)
          {
            tmp916.NotFoundException = tmp919;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceSearchText", TMessageType.Reply, seqid), cancellationToken); 
          await tmp916.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp920)
        {
          var tmp921 = $"Error occurred in {GetType().FullName}: {tmp920.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp920, tmp921);
          else
            Console.Error.WriteLine(tmp921);
          var tmp922 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceSearchText", TMessageType.Exception, seqid), cancellationToken);
          await tmp922.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteTagNames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp923 = new InternalStructs.getNoteTagNames_args();
        await tmp923.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp924 = new InternalStructs.getNoteTagNames_result();
        try
        {
          try
          {
            tmp924.Success = await _iAsync.getNoteTagNames(tmp923.AuthenticationToken, tmp923.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp925)
          {
            tmp924.UserException = tmp925;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp926)
          {
            tmp924.SystemException = tmp926;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp927)
          {
            tmp924.NotFoundException = tmp927;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteTagNames", TMessageType.Reply, seqid), cancellationToken); 
          await tmp924.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp928)
        {
          var tmp929 = $"Error occurred in {GetType().FullName}: {tmp928.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp928, tmp929);
          else
            Console.Error.WriteLine(tmp929);
          var tmp930 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteTagNames", TMessageType.Exception, seqid), cancellationToken);
          await tmp930.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp931 = new InternalStructs.createNote_args();
        await tmp931.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp932 = new InternalStructs.createNote_result();
        try
        {
          try
          {
            tmp932.Success = await _iAsync.createNote(tmp931.AuthenticationToken, tmp931.Note, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp933)
          {
            tmp932.UserException = tmp933;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp934)
          {
            tmp932.SystemException = tmp934;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp935)
          {
            tmp932.NotFoundException = tmp935;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp932.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp936)
        {
          var tmp937 = $"Error occurred in {GetType().FullName}: {tmp936.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp936, tmp937);
          else
            Console.Error.WriteLine(tmp937);
          var tmp938 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp938.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp939 = new InternalStructs.updateNote_args();
        await tmp939.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp940 = new InternalStructs.updateNote_result();
        try
        {
          try
          {
            tmp940.Success = await _iAsync.updateNote(tmp939.AuthenticationToken, tmp939.Note, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp941)
          {
            tmp940.UserException = tmp941;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp942)
          {
            tmp940.SystemException = tmp942;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp943)
          {
            tmp940.NotFoundException = tmp943;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp940.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp944)
        {
          var tmp945 = $"Error occurred in {GetType().FullName}: {tmp944.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp944, tmp945);
          else
            Console.Error.WriteLine(tmp945);
          var tmp946 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp946.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp947 = new InternalStructs.deleteNote_args();
        await tmp947.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp948 = new InternalStructs.deleteNote_result();
        try
        {
          try
          {
            tmp948.Success = await _iAsync.deleteNote(tmp947.AuthenticationToken, tmp947.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp949)
          {
            tmp948.UserException = tmp949;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp950)
          {
            tmp948.SystemException = tmp950;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp951)
          {
            tmp948.NotFoundException = tmp951;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp948.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp952)
        {
          var tmp953 = $"Error occurred in {GetType().FullName}: {tmp952.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp952, tmp953);
          else
            Console.Error.WriteLine(tmp953);
          var tmp954 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp954.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expungeNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp955 = new InternalStructs.expungeNote_args();
        await tmp955.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp956 = new InternalStructs.expungeNote_result();
        try
        {
          try
          {
            tmp956.Success = await _iAsync.expungeNote(tmp955.AuthenticationToken, tmp955.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp957)
          {
            tmp956.UserException = tmp957;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp958)
          {
            tmp956.SystemException = tmp958;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp959)
          {
            tmp956.NotFoundException = tmp959;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("expungeNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp956.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp960)
        {
          var tmp961 = $"Error occurred in {GetType().FullName}: {tmp960.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp960, tmp961);
          else
            Console.Error.WriteLine(tmp961);
          var tmp962 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expungeNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp962.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task copyNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp963 = new InternalStructs.copyNote_args();
        await tmp963.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp964 = new InternalStructs.copyNote_result();
        try
        {
          try
          {
            tmp964.Success = await _iAsync.copyNote(tmp963.AuthenticationToken, tmp963.NoteGuid, tmp963.ToNotebookGuid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp965)
          {
            tmp964.UserException = tmp965;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp966)
          {
            tmp964.SystemException = tmp966;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp967)
          {
            tmp964.NotFoundException = tmp967;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("copyNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp964.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp968)
        {
          var tmp969 = $"Error occurred in {GetType().FullName}: {tmp968.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp968, tmp969);
          else
            Console.Error.WriteLine(tmp969);
          var tmp970 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("copyNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp970.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listNoteVersions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp971 = new InternalStructs.listNoteVersions_args();
        await tmp971.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp972 = new InternalStructs.listNoteVersions_result();
        try
        {
          try
          {
            tmp972.Success = await _iAsync.listNoteVersions(tmp971.AuthenticationToken, tmp971.NoteGuid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp973)
          {
            tmp972.UserException = tmp973;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp974)
          {
            tmp972.SystemException = tmp974;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp975)
          {
            tmp972.NotFoundException = tmp975;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listNoteVersions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp972.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp976)
        {
          var tmp977 = $"Error occurred in {GetType().FullName}: {tmp976.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp976, tmp977);
          else
            Console.Error.WriteLine(tmp977);
          var tmp978 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listNoteVersions", TMessageType.Exception, seqid), cancellationToken);
          await tmp978.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNoteVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp979 = new InternalStructs.getNoteVersion_args();
        await tmp979.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp980 = new InternalStructs.getNoteVersion_result();
        try
        {
          try
          {
            tmp980.Success = await _iAsync.getNoteVersion(tmp979.AuthenticationToken, tmp979.NoteGuid, tmp979.UpdateSequenceNum, tmp979.WithResourcesData, tmp979.WithResourcesRecognition, tmp979.WithResourcesAlternateData, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp981)
          {
            tmp980.UserException = tmp981;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp982)
          {
            tmp980.SystemException = tmp982;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp983)
          {
            tmp980.NotFoundException = tmp983;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp980.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp984)
        {
          var tmp985 = $"Error occurred in {GetType().FullName}: {tmp984.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp984, tmp985);
          else
            Console.Error.WriteLine(tmp985);
          var tmp986 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNoteVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp986.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp987 = new InternalStructs.getResource_args();
        await tmp987.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp988 = new InternalStructs.getResource_result();
        try
        {
          try
          {
            tmp988.Success = await _iAsync.getResource(tmp987.AuthenticationToken, tmp987.Guid, tmp987.WithData, tmp987.WithRecognition, tmp987.WithAttributes, tmp987.WithAlternateData, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp989)
          {
            tmp988.UserException = tmp989;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp990)
          {
            tmp988.SystemException = tmp990;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp991)
          {
            tmp988.NotFoundException = tmp991;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp988.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp992)
        {
          var tmp993 = $"Error occurred in {GetType().FullName}: {tmp992.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp992, tmp993);
          else
            Console.Error.WriteLine(tmp993);
          var tmp994 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResource", TMessageType.Exception, seqid), cancellationToken);
          await tmp994.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceApplicationData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp995 = new InternalStructs.getResourceApplicationData_args();
        await tmp995.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp996 = new InternalStructs.getResourceApplicationData_result();
        try
        {
          try
          {
            tmp996.Success = await _iAsync.getResourceApplicationData(tmp995.AuthenticationToken, tmp995.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp997)
          {
            tmp996.UserException = tmp997;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp998)
          {
            tmp996.SystemException = tmp998;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp999)
          {
            tmp996.NotFoundException = tmp999;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceApplicationData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp996.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1000)
        {
          var tmp1001 = $"Error occurred in {GetType().FullName}: {tmp1000.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1000, tmp1001);
          else
            Console.Error.WriteLine(tmp1001);
          var tmp1002 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceApplicationData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1002.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1003 = new InternalStructs.getResourceApplicationDataEntry_args();
        await tmp1003.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1004 = new InternalStructs.getResourceApplicationDataEntry_result();
        try
        {
          try
          {
            tmp1004.Success = await _iAsync.getResourceApplicationDataEntry(tmp1003.AuthenticationToken, tmp1003.Guid, tmp1003.Key, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1005)
          {
            tmp1004.UserException = tmp1005;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1006)
          {
            tmp1004.SystemException = tmp1006;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1007)
          {
            tmp1004.NotFoundException = tmp1007;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1004.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1008)
        {
          var tmp1009 = $"Error occurred in {GetType().FullName}: {tmp1008.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1008, tmp1009);
          else
            Console.Error.WriteLine(tmp1009);
          var tmp1010 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp1010.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setResourceApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1011 = new InternalStructs.setResourceApplicationDataEntry_args();
        await tmp1011.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1012 = new InternalStructs.setResourceApplicationDataEntry_result();
        try
        {
          try
          {
            tmp1012.Success = await _iAsync.setResourceApplicationDataEntry(tmp1011.AuthenticationToken, tmp1011.Guid, tmp1011.Key, tmp1011.Value, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1013)
          {
            tmp1012.UserException = tmp1013;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1014)
          {
            tmp1012.SystemException = tmp1014;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1015)
          {
            tmp1012.NotFoundException = tmp1015;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setResourceApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1012.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1016)
        {
          var tmp1017 = $"Error occurred in {GetType().FullName}: {tmp1016.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1016, tmp1017);
          else
            Console.Error.WriteLine(tmp1017);
          var tmp1018 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setResourceApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp1018.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task unsetResourceApplicationDataEntry_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1019 = new InternalStructs.unsetResourceApplicationDataEntry_args();
        await tmp1019.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1020 = new InternalStructs.unsetResourceApplicationDataEntry_result();
        try
        {
          try
          {
            tmp1020.Success = await _iAsync.unsetResourceApplicationDataEntry(tmp1019.AuthenticationToken, tmp1019.Guid, tmp1019.Key, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1021)
          {
            tmp1020.UserException = tmp1021;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1022)
          {
            tmp1020.SystemException = tmp1022;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1023)
          {
            tmp1020.NotFoundException = tmp1023;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("unsetResourceApplicationDataEntry", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1020.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1024)
        {
          var tmp1025 = $"Error occurred in {GetType().FullName}: {tmp1024.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1024, tmp1025);
          else
            Console.Error.WriteLine(tmp1025);
          var tmp1026 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("unsetResourceApplicationDataEntry", TMessageType.Exception, seqid), cancellationToken);
          await tmp1026.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateResource_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1027 = new InternalStructs.updateResource_args();
        await tmp1027.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1028 = new InternalStructs.updateResource_result();
        try
        {
          try
          {
            tmp1028.Success = await _iAsync.updateResource(tmp1027.AuthenticationToken, tmp1027.Resource, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1029)
          {
            tmp1028.UserException = tmp1029;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1030)
          {
            tmp1028.SystemException = tmp1030;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1031)
          {
            tmp1028.NotFoundException = tmp1031;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateResource", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1028.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1032)
        {
          var tmp1033 = $"Error occurred in {GetType().FullName}: {tmp1032.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1032, tmp1033);
          else
            Console.Error.WriteLine(tmp1033);
          var tmp1034 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateResource", TMessageType.Exception, seqid), cancellationToken);
          await tmp1034.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1035 = new InternalStructs.getResourceData_args();
        await tmp1035.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1036 = new InternalStructs.getResourceData_result();
        try
        {
          try
          {
            tmp1036.Success = await _iAsync.getResourceData(tmp1035.AuthenticationToken, tmp1035.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1037)
          {
            tmp1036.UserException = tmp1037;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1038)
          {
            tmp1036.SystemException = tmp1038;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1039)
          {
            tmp1036.NotFoundException = tmp1039;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1036.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1040)
        {
          var tmp1041 = $"Error occurred in {GetType().FullName}: {tmp1040.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1040, tmp1041);
          else
            Console.Error.WriteLine(tmp1041);
          var tmp1042 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1042.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceByHash_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1043 = new InternalStructs.getResourceByHash_args();
        await tmp1043.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1044 = new InternalStructs.getResourceByHash_result();
        try
        {
          try
          {
            tmp1044.Success = await _iAsync.getResourceByHash(tmp1043.AuthenticationToken, tmp1043.NoteGuid, tmp1043.ContentHash, tmp1043.WithData, tmp1043.WithRecognition, tmp1043.WithAlternateData, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1045)
          {
            tmp1044.UserException = tmp1045;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1046)
          {
            tmp1044.SystemException = tmp1046;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1047)
          {
            tmp1044.NotFoundException = tmp1047;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceByHash", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1044.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1048)
        {
          var tmp1049 = $"Error occurred in {GetType().FullName}: {tmp1048.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1048, tmp1049);
          else
            Console.Error.WriteLine(tmp1049);
          var tmp1050 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceByHash", TMessageType.Exception, seqid), cancellationToken);
          await tmp1050.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceRecognition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1051 = new InternalStructs.getResourceRecognition_args();
        await tmp1051.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1052 = new InternalStructs.getResourceRecognition_result();
        try
        {
          try
          {
            tmp1052.Success = await _iAsync.getResourceRecognition(tmp1051.AuthenticationToken, tmp1051.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1053)
          {
            tmp1052.UserException = tmp1053;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1054)
          {
            tmp1052.SystemException = tmp1054;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1055)
          {
            tmp1052.NotFoundException = tmp1055;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceRecognition", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1052.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1056)
        {
          var tmp1057 = $"Error occurred in {GetType().FullName}: {tmp1056.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1056, tmp1057);
          else
            Console.Error.WriteLine(tmp1057);
          var tmp1058 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceRecognition", TMessageType.Exception, seqid), cancellationToken);
          await tmp1058.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceAlternateData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1059 = new InternalStructs.getResourceAlternateData_args();
        await tmp1059.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1060 = new InternalStructs.getResourceAlternateData_result();
        try
        {
          try
          {
            tmp1060.Success = await _iAsync.getResourceAlternateData(tmp1059.AuthenticationToken, tmp1059.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1061)
          {
            tmp1060.UserException = tmp1061;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1062)
          {
            tmp1060.SystemException = tmp1062;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1063)
          {
            tmp1060.NotFoundException = tmp1063;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceAlternateData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1060.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1064)
        {
          var tmp1065 = $"Error occurred in {GetType().FullName}: {tmp1064.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1064, tmp1065);
          else
            Console.Error.WriteLine(tmp1065);
          var tmp1066 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceAlternateData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1066.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getResourceAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1067 = new InternalStructs.getResourceAttributes_args();
        await tmp1067.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1068 = new InternalStructs.getResourceAttributes_result();
        try
        {
          try
          {
            tmp1068.Success = await _iAsync.getResourceAttributes(tmp1067.AuthenticationToken, tmp1067.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1069)
          {
            tmp1068.UserException = tmp1069;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1070)
          {
            tmp1068.SystemException = tmp1070;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1071)
          {
            tmp1068.NotFoundException = tmp1071;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceAttributes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1068.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1072)
        {
          var tmp1073 = $"Error occurred in {GetType().FullName}: {tmp1072.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1072, tmp1073);
          else
            Console.Error.WriteLine(tmp1073);
          var tmp1074 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getResourceAttributes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1074.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getPublicNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1075 = new InternalStructs.getPublicNotebook_args();
        await tmp1075.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1076 = new InternalStructs.getPublicNotebook_result();
        try
        {
          try
          {
            tmp1076.Success = await _iAsync.getPublicNotebook(tmp1075.UserId, tmp1075.PublicUri, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1077)
          {
            tmp1076.SystemException = tmp1077;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1078)
          {
            tmp1076.NotFoundException = tmp1078;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getPublicNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1076.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1079)
        {
          var tmp1080 = $"Error occurred in {GetType().FullName}: {tmp1079.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1079, tmp1080);
          else
            Console.Error.WriteLine(tmp1080);
          var tmp1081 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getPublicNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1081.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shareNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1082 = new InternalStructs.shareNotebook_args();
        await tmp1082.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1083 = new InternalStructs.shareNotebook_result();
        try
        {
          try
          {
            tmp1083.Success = await _iAsync.shareNotebook(tmp1082.AuthenticationToken, tmp1082.SharedNotebook, tmp1082.Message, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1084)
          {
            tmp1083.UserException = tmp1084;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1085)
          {
            tmp1083.NotFoundException = tmp1085;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1086)
          {
            tmp1083.SystemException = tmp1086;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("shareNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1083.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1087)
        {
          var tmp1088 = $"Error occurred in {GetType().FullName}: {tmp1087.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1087, tmp1088);
          else
            Console.Error.WriteLine(tmp1088);
          var tmp1089 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shareNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1089.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createOrUpdateNotebookShares_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1090 = new InternalStructs.createOrUpdateNotebookShares_args();
        await tmp1090.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1091 = new InternalStructs.createOrUpdateNotebookShares_result();
        try
        {
          try
          {
            tmp1091.Success = await _iAsync.createOrUpdateNotebookShares(tmp1090.AuthenticationToken, tmp1090.ShareTemplate, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1092)
          {
            tmp1091.UserException = tmp1092;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1093)
          {
            tmp1091.NotFoundException = tmp1093;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1094)
          {
            tmp1091.SystemException = tmp1094;
          }
          catch (global::Evernote.EDAM.Error.EDAMInvalidContactsException tmp1095)
          {
            tmp1091.InvalidContactsException = tmp1095;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createOrUpdateNotebookShares", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1091.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1096)
        {
          var tmp1097 = $"Error occurred in {GetType().FullName}: {tmp1096.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1096, tmp1097);
          else
            Console.Error.WriteLine(tmp1097);
          var tmp1098 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createOrUpdateNotebookShares", TMessageType.Exception, seqid), cancellationToken);
          await tmp1098.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateSharedNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1099 = new InternalStructs.updateSharedNotebook_args();
        await tmp1099.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1100 = new InternalStructs.updateSharedNotebook_result();
        try
        {
          try
          {
            tmp1100.Success = await _iAsync.updateSharedNotebook(tmp1099.AuthenticationToken, tmp1099.SharedNotebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1101)
          {
            tmp1100.UserException = tmp1101;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1102)
          {
            tmp1100.NotFoundException = tmp1102;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1103)
          {
            tmp1100.SystemException = tmp1103;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateSharedNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1100.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1104)
        {
          var tmp1105 = $"Error occurred in {GetType().FullName}: {tmp1104.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1104, tmp1105);
          else
            Console.Error.WriteLine(tmp1105);
          var tmp1106 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateSharedNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1106.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setNotebookRecipientSettings_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1107 = new InternalStructs.setNotebookRecipientSettings_args();
        await tmp1107.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1108 = new InternalStructs.setNotebookRecipientSettings_result();
        try
        {
          try
          {
            tmp1108.Success = await _iAsync.setNotebookRecipientSettings(tmp1107.AuthenticationToken, tmp1107.NotebookGuid, tmp1107.RecipientSettings, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1109)
          {
            tmp1108.UserException = tmp1109;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1110)
          {
            tmp1108.NotFoundException = tmp1110;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1111)
          {
            tmp1108.SystemException = tmp1111;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setNotebookRecipientSettings", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1108.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1112)
        {
          var tmp1113 = $"Error occurred in {GetType().FullName}: {tmp1112.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1112, tmp1113);
          else
            Console.Error.WriteLine(tmp1113);
          var tmp1114 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setNotebookRecipientSettings", TMessageType.Exception, seqid), cancellationToken);
          await tmp1114.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listSharedNotebooks_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1115 = new InternalStructs.listSharedNotebooks_args();
        await tmp1115.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1116 = new InternalStructs.listSharedNotebooks_result();
        try
        {
          try
          {
            tmp1116.Success = await _iAsync.listSharedNotebooks(tmp1115.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1117)
          {
            tmp1116.UserException = tmp1117;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1118)
          {
            tmp1116.NotFoundException = tmp1118;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1119)
          {
            tmp1116.SystemException = tmp1119;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listSharedNotebooks", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1116.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1120)
        {
          var tmp1121 = $"Error occurred in {GetType().FullName}: {tmp1120.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1120, tmp1121);
          else
            Console.Error.WriteLine(tmp1121);
          var tmp1122 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listSharedNotebooks", TMessageType.Exception, seqid), cancellationToken);
          await tmp1122.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createLinkedNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1123 = new InternalStructs.createLinkedNotebook_args();
        await tmp1123.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1124 = new InternalStructs.createLinkedNotebook_result();
        try
        {
          try
          {
            tmp1124.Success = await _iAsync.createLinkedNotebook(tmp1123.AuthenticationToken, tmp1123.LinkedNotebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1125)
          {
            tmp1124.UserException = tmp1125;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1126)
          {
            tmp1124.NotFoundException = tmp1126;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1127)
          {
            tmp1124.SystemException = tmp1127;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createLinkedNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1124.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1128)
        {
          var tmp1129 = $"Error occurred in {GetType().FullName}: {tmp1128.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1128, tmp1129);
          else
            Console.Error.WriteLine(tmp1129);
          var tmp1130 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createLinkedNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1130.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateLinkedNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1131 = new InternalStructs.updateLinkedNotebook_args();
        await tmp1131.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1132 = new InternalStructs.updateLinkedNotebook_result();
        try
        {
          try
          {
            tmp1132.Success = await _iAsync.updateLinkedNotebook(tmp1131.AuthenticationToken, tmp1131.LinkedNotebook, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1133)
          {
            tmp1132.UserException = tmp1133;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1134)
          {
            tmp1132.NotFoundException = tmp1134;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1135)
          {
            tmp1132.SystemException = tmp1135;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateLinkedNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1132.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1136)
        {
          var tmp1137 = $"Error occurred in {GetType().FullName}: {tmp1136.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1136, tmp1137);
          else
            Console.Error.WriteLine(tmp1137);
          var tmp1138 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateLinkedNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1138.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listLinkedNotebooks_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1139 = new InternalStructs.listLinkedNotebooks_args();
        await tmp1139.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1140 = new InternalStructs.listLinkedNotebooks_result();
        try
        {
          try
          {
            tmp1140.Success = await _iAsync.listLinkedNotebooks(tmp1139.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1141)
          {
            tmp1140.UserException = tmp1141;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1142)
          {
            tmp1140.NotFoundException = tmp1142;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1143)
          {
            tmp1140.SystemException = tmp1143;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("listLinkedNotebooks", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1140.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1144)
        {
          var tmp1145 = $"Error occurred in {GetType().FullName}: {tmp1144.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1144, tmp1145);
          else
            Console.Error.WriteLine(tmp1145);
          var tmp1146 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listLinkedNotebooks", TMessageType.Exception, seqid), cancellationToken);
          await tmp1146.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task expungeLinkedNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1147 = new InternalStructs.expungeLinkedNotebook_args();
        await tmp1147.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1148 = new InternalStructs.expungeLinkedNotebook_result();
        try
        {
          try
          {
            tmp1148.Success = await _iAsync.expungeLinkedNotebook(tmp1147.AuthenticationToken, tmp1147.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1149)
          {
            tmp1148.UserException = tmp1149;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1150)
          {
            tmp1148.NotFoundException = tmp1150;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1151)
          {
            tmp1148.SystemException = tmp1151;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("expungeLinkedNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1148.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1152)
        {
          var tmp1153 = $"Error occurred in {GetType().FullName}: {tmp1152.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1152, tmp1153);
          else
            Console.Error.WriteLine(tmp1153);
          var tmp1154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("expungeLinkedNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task authenticateToSharedNotebook_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1155 = new InternalStructs.authenticateToSharedNotebook_args();
        await tmp1155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1156 = new InternalStructs.authenticateToSharedNotebook_result();
        try
        {
          try
          {
            tmp1156.Success = await _iAsync.authenticateToSharedNotebook(tmp1155.ShareKeyOrGlobalId, tmp1155.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1157)
          {
            tmp1156.UserException = tmp1157;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1158)
          {
            tmp1156.NotFoundException = tmp1158;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1159)
          {
            tmp1156.SystemException = tmp1159;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToSharedNotebook", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1160)
        {
          var tmp1161 = $"Error occurred in {GetType().FullName}: {tmp1160.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1160, tmp1161);
          else
            Console.Error.WriteLine(tmp1161);
          var tmp1162 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToSharedNotebook", TMessageType.Exception, seqid), cancellationToken);
          await tmp1162.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getSharedNotebookByAuth_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1163 = new InternalStructs.getSharedNotebookByAuth_args();
        await tmp1163.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1164 = new InternalStructs.getSharedNotebookByAuth_result();
        try
        {
          try
          {
            tmp1164.Success = await _iAsync.getSharedNotebookByAuth(tmp1163.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1165)
          {
            tmp1164.UserException = tmp1165;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1166)
          {
            tmp1164.NotFoundException = tmp1166;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1167)
          {
            tmp1164.SystemException = tmp1167;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getSharedNotebookByAuth", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1164.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1168)
        {
          var tmp1169 = $"Error occurred in {GetType().FullName}: {tmp1168.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1168, tmp1169);
          else
            Console.Error.WriteLine(tmp1169);
          var tmp1170 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSharedNotebookByAuth", TMessageType.Exception, seqid), cancellationToken);
          await tmp1170.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task emailNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1171 = new InternalStructs.emailNote_args();
        await tmp1171.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1172 = new InternalStructs.emailNote_result();
        try
        {
          try
          {
            await _iAsync.emailNote(tmp1171.AuthenticationToken, tmp1171.Parameters, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1173)
          {
            tmp1172.UserException = tmp1173;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1174)
          {
            tmp1172.NotFoundException = tmp1174;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1175)
          {
            tmp1172.SystemException = tmp1175;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("emailNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1172.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1176)
        {
          var tmp1177 = $"Error occurred in {GetType().FullName}: {tmp1176.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1176, tmp1177);
          else
            Console.Error.WriteLine(tmp1177);
          var tmp1178 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("emailNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp1178.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shareNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1179 = new InternalStructs.shareNote_args();
        await tmp1179.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1180 = new InternalStructs.shareNote_result();
        try
        {
          try
          {
            tmp1180.Success = await _iAsync.shareNote(tmp1179.AuthenticationToken, tmp1179.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1181)
          {
            tmp1180.UserException = tmp1181;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1182)
          {
            tmp1180.NotFoundException = tmp1182;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1183)
          {
            tmp1180.SystemException = tmp1183;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("shareNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1180.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1184)
        {
          var tmp1185 = $"Error occurred in {GetType().FullName}: {tmp1184.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1184, tmp1185);
          else
            Console.Error.WriteLine(tmp1185);
          var tmp1186 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shareNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp1186.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stopSharingNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1187 = new InternalStructs.stopSharingNote_args();
        await tmp1187.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1188 = new InternalStructs.stopSharingNote_result();
        try
        {
          try
          {
            await _iAsync.stopSharingNote(tmp1187.AuthenticationToken, tmp1187.Guid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1189)
          {
            tmp1188.UserException = tmp1189;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1190)
          {
            tmp1188.NotFoundException = tmp1190;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1191)
          {
            tmp1188.SystemException = tmp1191;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("stopSharingNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1188.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1192)
        {
          var tmp1193 = $"Error occurred in {GetType().FullName}: {tmp1192.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1192, tmp1193);
          else
            Console.Error.WriteLine(tmp1193);
          var tmp1194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stopSharingNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp1194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task authenticateToSharedNote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1195 = new InternalStructs.authenticateToSharedNote_args();
        await tmp1195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1196 = new InternalStructs.authenticateToSharedNote_result();
        try
        {
          try
          {
            tmp1196.Success = await _iAsync.authenticateToSharedNote(tmp1195.Guid, tmp1195.NoteKey, tmp1195.AuthenticationToken, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1197)
          {
            tmp1196.UserException = tmp1197;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1198)
          {
            tmp1196.NotFoundException = tmp1198;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1199)
          {
            tmp1196.SystemException = tmp1199;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToSharedNote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1200)
        {
          var tmp1201 = $"Error occurred in {GetType().FullName}: {tmp1200.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1200, tmp1201);
          else
            Console.Error.WriteLine(tmp1201);
          var tmp1202 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticateToSharedNote", TMessageType.Exception, seqid), cancellationToken);
          await tmp1202.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task findRelated_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1203 = new InternalStructs.findRelated_args();
        await tmp1203.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1204 = new InternalStructs.findRelated_result();
        try
        {
          try
          {
            tmp1204.Success = await _iAsync.findRelated(tmp1203.AuthenticationToken, tmp1203.Query, tmp1203.ResultSpec, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1205)
          {
            tmp1204.UserException = tmp1205;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1206)
          {
            tmp1204.SystemException = tmp1206;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1207)
          {
            tmp1204.NotFoundException = tmp1207;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("findRelated", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1204.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1208)
        {
          var tmp1209 = $"Error occurred in {GetType().FullName}: {tmp1208.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1208, tmp1209);
          else
            Console.Error.WriteLine(tmp1209);
          var tmp1210 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("findRelated", TMessageType.Exception, seqid), cancellationToken);
          await tmp1210.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateNoteIfUsnMatches_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1211 = new InternalStructs.updateNoteIfUsnMatches_args();
        await tmp1211.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1212 = new InternalStructs.updateNoteIfUsnMatches_result();
        try
        {
          try
          {
            tmp1212.Success = await _iAsync.updateNoteIfUsnMatches(tmp1211.AuthenticationToken, tmp1211.Note, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1213)
          {
            tmp1212.UserException = tmp1213;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1214)
          {
            tmp1212.NotFoundException = tmp1214;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1215)
          {
            tmp1212.SystemException = tmp1215;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateNoteIfUsnMatches", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1212.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1216)
        {
          var tmp1217 = $"Error occurred in {GetType().FullName}: {tmp1216.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1216, tmp1217);
          else
            Console.Error.WriteLine(tmp1217);
          var tmp1218 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateNoteIfUsnMatches", TMessageType.Exception, seqid), cancellationToken);
          await tmp1218.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task manageNotebookShares_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1219 = new InternalStructs.manageNotebookShares_args();
        await tmp1219.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1220 = new InternalStructs.manageNotebookShares_result();
        try
        {
          try
          {
            tmp1220.Success = await _iAsync.manageNotebookShares(tmp1219.AuthenticationToken, tmp1219.Parameters, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1221)
          {
            tmp1220.UserException = tmp1221;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1222)
          {
            tmp1220.NotFoundException = tmp1222;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1223)
          {
            tmp1220.SystemException = tmp1223;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("manageNotebookShares", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1220.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1224)
        {
          var tmp1225 = $"Error occurred in {GetType().FullName}: {tmp1224.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1224, tmp1225);
          else
            Console.Error.WriteLine(tmp1225);
          var tmp1226 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("manageNotebookShares", TMessageType.Exception, seqid), cancellationToken);
          await tmp1226.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNotebookShares_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1227 = new InternalStructs.getNotebookShares_args();
        await tmp1227.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1228 = new InternalStructs.getNotebookShares_result();
        try
        {
          try
          {
            tmp1228.Success = await _iAsync.getNotebookShares(tmp1227.AuthenticationToken, tmp1227.NotebookGuid, cancellationToken);
          }
          catch (global::Evernote.EDAM.Error.EDAMUserException tmp1229)
          {
            tmp1228.UserException = tmp1229;
          }
          catch (global::Evernote.EDAM.Error.EDAMNotFoundException tmp1230)
          {
            tmp1228.NotFoundException = tmp1230;
          }
          catch (global::Evernote.EDAM.Error.EDAMSystemException tmp1231)
          {
            tmp1228.SystemException = tmp1231;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNotebookShares", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1228.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1232)
        {
          var tmp1233 = $"Error occurred in {GetType().FullName}: {tmp1232.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1232, tmp1233);
          else
            Console.Error.WriteLine(tmp1233);
          var tmp1234 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNotebookShares", TMessageType.Exception, seqid), cancellationToken);
          await tmp1234.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class getSyncState_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public getSyncState_args()
        {
        }

        public getSyncState_args DeepCopy()
        {
          var tmp1235 = new getSyncState_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1235.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1235.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1236 = new TStruct("getSyncState_args");
            await oprot.WriteStructBeginAsync(tmp1236, cancellationToken);
            var tmp1237 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1237.Name = "authenticationToken";
              tmp1237.Type = TType.String;
              tmp1237.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1237, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSyncState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1238 = new StringBuilder("getSyncState_args(");
          int tmp1239 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1239++) { tmp1238.Append(", "); }
            tmp1238.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1238);
          }
          tmp1238.Append(')');
          return tmp1238.ToString();
        }
      }


      public partial class getSyncState_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.SyncState _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.NoteStore.SyncState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public getSyncState_result()
        {
        }

        public getSyncState_result DeepCopy()
        {
          var tmp1240 = new getSyncState_result();
          if((Success != null) && __isset.success)
          {
            tmp1240.Success = (global::Evernote.EDAM.NoteStore.SyncState)this.Success.DeepCopy();
          }
          tmp1240.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1240.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1240.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1240.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1240.__isset.systemException = this.__isset.systemException;
          return tmp1240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.SyncState();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1241 = new TStruct("getSyncState_result");
            await oprot.WriteStructBeginAsync(tmp1241, cancellationToken);
            var tmp1242 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1242.Name = "Success";
                tmp1242.Type = TType.Struct;
                tmp1242.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1242, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1242.Name = "UserException";
                tmp1242.Type = TType.Struct;
                tmp1242.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1242, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1242.Name = "SystemException";
                tmp1242.Type = TType.Struct;
                tmp1242.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1242, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSyncState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1243 = new StringBuilder("getSyncState_result(");
          int tmp1244 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1244++) { tmp1243.Append(", "); }
            tmp1243.Append("Success: ");
            Success.ToString(tmp1243);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1244++) { tmp1243.Append(", "); }
            tmp1243.Append("UserException: ");
            UserException.ToString(tmp1243);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1244++) { tmp1243.Append(", "); }
            tmp1243.Append("SystemException: ");
            SystemException.ToString(tmp1243);
          }
          tmp1243.Append(')');
          return tmp1243.ToString();
        }
      }


      public partial class getFilteredSyncChunk_args : TBase
      {
        private string _authenticationToken;
        private int _afterUSN;
        private int _maxEntries;
        private global::Evernote.EDAM.NoteStore.SyncChunkFilter _filter;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public int AfterUSN
        {
          get
          {
            return _afterUSN;
          }
          set
          {
            __isset.afterUSN = true;
            this._afterUSN = value;
          }
        }

        public int MaxEntries
        {
          get
          {
            return _maxEntries;
          }
          set
          {
            __isset.maxEntries = true;
            this._maxEntries = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.SyncChunkFilter Filter
        {
          get
          {
            return _filter;
          }
          set
          {
            __isset.filter = true;
            this._filter = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool afterUSN;
          public bool maxEntries;
          public bool filter;
        }

        public getFilteredSyncChunk_args()
        {
        }

        public getFilteredSyncChunk_args DeepCopy()
        {
          var tmp1245 = new getFilteredSyncChunk_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1245.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1245.__isset.authenticationToken = this.__isset.authenticationToken;
          if(__isset.afterUSN)
          {
            tmp1245.AfterUSN = this.AfterUSN;
          }
          tmp1245.__isset.afterUSN = this.__isset.afterUSN;
          if(__isset.maxEntries)
          {
            tmp1245.MaxEntries = this.MaxEntries;
          }
          tmp1245.__isset.maxEntries = this.__isset.maxEntries;
          if((Filter != null) && __isset.filter)
          {
            tmp1245.Filter = (global::Evernote.EDAM.NoteStore.SyncChunkFilter)this.Filter.DeepCopy();
          }
          tmp1245.__isset.filter = this.__isset.filter;
          return tmp1245;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    AfterUSN = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    MaxEntries = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Filter = new global::Evernote.EDAM.NoteStore.SyncChunkFilter();
                    await Filter.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1246 = new TStruct("getFilteredSyncChunk_args");
            await oprot.WriteStructBeginAsync(tmp1246, cancellationToken);
            var tmp1247 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1247.Name = "authenticationToken";
              tmp1247.Type = TType.String;
              tmp1247.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.afterUSN)
            {
              tmp1247.Name = "afterUSN";
              tmp1247.Type = TType.I32;
              tmp1247.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
              await oprot.WriteI32Async(AfterUSN, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.maxEntries)
            {
              tmp1247.Name = "maxEntries";
              tmp1247.Type = TType.I32;
              tmp1247.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
              await oprot.WriteI32Async(MaxEntries, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Filter != null) && __isset.filter)
            {
              tmp1247.Name = "filter";
              tmp1247.Type = TType.Struct;
              tmp1247.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
              await Filter.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getFilteredSyncChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.afterUSN == other.__isset.afterUSN) && ((!__isset.afterUSN) || (global::System.Object.Equals(AfterUSN, other.AfterUSN))))
            && ((__isset.maxEntries == other.__isset.maxEntries) && ((!__isset.maxEntries) || (global::System.Object.Equals(MaxEntries, other.MaxEntries))))
            && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (global::System.Object.Equals(Filter, other.Filter))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if(__isset.afterUSN)
            {
              hashcode = (hashcode * 397) + AfterUSN.GetHashCode();
            }
            if(__isset.maxEntries)
            {
              hashcode = (hashcode * 397) + MaxEntries.GetHashCode();
            }
            if((Filter != null) && __isset.filter)
            {
              hashcode = (hashcode * 397) + Filter.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1248 = new StringBuilder("getFilteredSyncChunk_args(");
          int tmp1249 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1248);
          }
          if(__isset.afterUSN)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("AfterUSN: ");
            AfterUSN.ToString(tmp1248);
          }
          if(__isset.maxEntries)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("MaxEntries: ");
            MaxEntries.ToString(tmp1248);
          }
          if((Filter != null) && __isset.filter)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("Filter: ");
            Filter.ToString(tmp1248);
          }
          tmp1248.Append(')');
          return tmp1248.ToString();
        }
      }


      public partial class getFilteredSyncChunk_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.SyncChunk _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.NoteStore.SyncChunk Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public getFilteredSyncChunk_result()
        {
        }

        public getFilteredSyncChunk_result DeepCopy()
        {
          var tmp1250 = new getFilteredSyncChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp1250.Success = (global::Evernote.EDAM.NoteStore.SyncChunk)this.Success.DeepCopy();
          }
          tmp1250.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1250.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1250.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1250.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1250.__isset.systemException = this.__isset.systemException;
          return tmp1250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.SyncChunk();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1251 = new TStruct("getFilteredSyncChunk_result");
            await oprot.WriteStructBeginAsync(tmp1251, cancellationToken);
            var tmp1252 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1252.Name = "Success";
                tmp1252.Type = TType.Struct;
                tmp1252.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1252, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1252.Name = "UserException";
                tmp1252.Type = TType.Struct;
                tmp1252.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1252, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1252.Name = "SystemException";
                tmp1252.Type = TType.Struct;
                tmp1252.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1252, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getFilteredSyncChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1253 = new StringBuilder("getFilteredSyncChunk_result(");
          int tmp1254 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1254++) { tmp1253.Append(", "); }
            tmp1253.Append("Success: ");
            Success.ToString(tmp1253);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1254++) { tmp1253.Append(", "); }
            tmp1253.Append("UserException: ");
            UserException.ToString(tmp1253);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1254++) { tmp1253.Append(", "); }
            tmp1253.Append("SystemException: ");
            SystemException.ToString(tmp1253);
          }
          tmp1253.Append(')');
          return tmp1253.ToString();
        }
      }


      public partial class getLinkedNotebookSyncState_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.LinkedNotebook _linkedNotebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
        {
          get
          {
            return _linkedNotebook;
          }
          set
          {
            __isset.linkedNotebook = true;
            this._linkedNotebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool linkedNotebook;
        }

        public getLinkedNotebookSyncState_args()
        {
        }

        public getLinkedNotebookSyncState_args DeepCopy()
        {
          var tmp1255 = new getLinkedNotebookSyncState_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1255.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1255.__isset.authenticationToken = this.__isset.authenticationToken;
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            tmp1255.LinkedNotebook = (global::Evernote.EDAM.Type.LinkedNotebook)this.LinkedNotebook.DeepCopy();
          }
          tmp1255.__isset.linkedNotebook = this.__isset.linkedNotebook;
          return tmp1255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    LinkedNotebook = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await LinkedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1256 = new TStruct("getLinkedNotebookSyncState_args");
            await oprot.WriteStructBeginAsync(tmp1256, cancellationToken);
            var tmp1257 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1257.Name = "authenticationToken";
              tmp1257.Type = TType.String;
              tmp1257.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1257, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              tmp1257.Name = "linkedNotebook";
              tmp1257.Type = TType.Struct;
              tmp1257.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1257, cancellationToken);
              await LinkedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLinkedNotebookSyncState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.linkedNotebook == other.__isset.linkedNotebook) && ((!__isset.linkedNotebook) || (global::System.Object.Equals(LinkedNotebook, other.LinkedNotebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              hashcode = (hashcode * 397) + LinkedNotebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1258 = new StringBuilder("getLinkedNotebookSyncState_args(");
          int tmp1259 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1259++) { tmp1258.Append(", "); }
            tmp1258.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1258);
          }
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            if(0 < tmp1259++) { tmp1258.Append(", "); }
            tmp1258.Append("LinkedNotebook: ");
            LinkedNotebook.ToString(tmp1258);
          }
          tmp1258.Append(')');
          return tmp1258.ToString();
        }
      }


      public partial class getLinkedNotebookSyncState_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.SyncState _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.NoteStore.SyncState Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getLinkedNotebookSyncState_result()
        {
        }

        public getLinkedNotebookSyncState_result DeepCopy()
        {
          var tmp1260 = new getLinkedNotebookSyncState_result();
          if((Success != null) && __isset.success)
          {
            tmp1260.Success = (global::Evernote.EDAM.NoteStore.SyncState)this.Success.DeepCopy();
          }
          tmp1260.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1260.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1260.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1260.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1260.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1260.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1260.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.SyncState();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1261 = new TStruct("getLinkedNotebookSyncState_result");
            await oprot.WriteStructBeginAsync(tmp1261, cancellationToken);
            var tmp1262 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1262.Name = "Success";
                tmp1262.Type = TType.Struct;
                tmp1262.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1262.Name = "UserException";
                tmp1262.Type = TType.Struct;
                tmp1262.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1262.Name = "SystemException";
                tmp1262.Type = TType.Struct;
                tmp1262.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1262.Name = "NotFoundException";
                tmp1262.Type = TType.Struct;
                tmp1262.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLinkedNotebookSyncState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1263 = new StringBuilder("getLinkedNotebookSyncState_result(");
          int tmp1264 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("Success: ");
            Success.ToString(tmp1263);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("UserException: ");
            UserException.ToString(tmp1263);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("SystemException: ");
            SystemException.ToString(tmp1263);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1263);
          }
          tmp1263.Append(')');
          return tmp1263.ToString();
        }
      }


      public partial class getLinkedNotebookSyncChunk_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.LinkedNotebook _linkedNotebook;
        private int _afterUSN;
        private int _maxEntries;
        private bool _fullSyncOnly;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
        {
          get
          {
            return _linkedNotebook;
          }
          set
          {
            __isset.linkedNotebook = true;
            this._linkedNotebook = value;
          }
        }

        public int AfterUSN
        {
          get
          {
            return _afterUSN;
          }
          set
          {
            __isset.afterUSN = true;
            this._afterUSN = value;
          }
        }

        public int MaxEntries
        {
          get
          {
            return _maxEntries;
          }
          set
          {
            __isset.maxEntries = true;
            this._maxEntries = value;
          }
        }

        public bool FullSyncOnly
        {
          get
          {
            return _fullSyncOnly;
          }
          set
          {
            __isset.fullSyncOnly = true;
            this._fullSyncOnly = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool linkedNotebook;
          public bool afterUSN;
          public bool maxEntries;
          public bool fullSyncOnly;
        }

        public getLinkedNotebookSyncChunk_args()
        {
        }

        public getLinkedNotebookSyncChunk_args DeepCopy()
        {
          var tmp1265 = new getLinkedNotebookSyncChunk_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1265.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1265.__isset.authenticationToken = this.__isset.authenticationToken;
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            tmp1265.LinkedNotebook = (global::Evernote.EDAM.Type.LinkedNotebook)this.LinkedNotebook.DeepCopy();
          }
          tmp1265.__isset.linkedNotebook = this.__isset.linkedNotebook;
          if(__isset.afterUSN)
          {
            tmp1265.AfterUSN = this.AfterUSN;
          }
          tmp1265.__isset.afterUSN = this.__isset.afterUSN;
          if(__isset.maxEntries)
          {
            tmp1265.MaxEntries = this.MaxEntries;
          }
          tmp1265.__isset.maxEntries = this.__isset.maxEntries;
          if(__isset.fullSyncOnly)
          {
            tmp1265.FullSyncOnly = this.FullSyncOnly;
          }
          tmp1265.__isset.fullSyncOnly = this.__isset.fullSyncOnly;
          return tmp1265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    LinkedNotebook = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await LinkedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    AfterUSN = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    MaxEntries = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    FullSyncOnly = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1266 = new TStruct("getLinkedNotebookSyncChunk_args");
            await oprot.WriteStructBeginAsync(tmp1266, cancellationToken);
            var tmp1267 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1267.Name = "authenticationToken";
              tmp1267.Type = TType.String;
              tmp1267.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              tmp1267.Name = "linkedNotebook";
              tmp1267.Type = TType.Struct;
              tmp1267.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
              await LinkedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.afterUSN)
            {
              tmp1267.Name = "afterUSN";
              tmp1267.Type = TType.I32;
              tmp1267.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
              await oprot.WriteI32Async(AfterUSN, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.maxEntries)
            {
              tmp1267.Name = "maxEntries";
              tmp1267.Type = TType.I32;
              tmp1267.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
              await oprot.WriteI32Async(MaxEntries, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.fullSyncOnly)
            {
              tmp1267.Name = "fullSyncOnly";
              tmp1267.Type = TType.Bool;
              tmp1267.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
              await oprot.WriteBoolAsync(FullSyncOnly, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLinkedNotebookSyncChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.linkedNotebook == other.__isset.linkedNotebook) && ((!__isset.linkedNotebook) || (global::System.Object.Equals(LinkedNotebook, other.LinkedNotebook))))
            && ((__isset.afterUSN == other.__isset.afterUSN) && ((!__isset.afterUSN) || (global::System.Object.Equals(AfterUSN, other.AfterUSN))))
            && ((__isset.maxEntries == other.__isset.maxEntries) && ((!__isset.maxEntries) || (global::System.Object.Equals(MaxEntries, other.MaxEntries))))
            && ((__isset.fullSyncOnly == other.__isset.fullSyncOnly) && ((!__isset.fullSyncOnly) || (global::System.Object.Equals(FullSyncOnly, other.FullSyncOnly))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              hashcode = (hashcode * 397) + LinkedNotebook.GetHashCode();
            }
            if(__isset.afterUSN)
            {
              hashcode = (hashcode * 397) + AfterUSN.GetHashCode();
            }
            if(__isset.maxEntries)
            {
              hashcode = (hashcode * 397) + MaxEntries.GetHashCode();
            }
            if(__isset.fullSyncOnly)
            {
              hashcode = (hashcode * 397) + FullSyncOnly.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1268 = new StringBuilder("getLinkedNotebookSyncChunk_args(");
          int tmp1269 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1268);
          }
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("LinkedNotebook: ");
            LinkedNotebook.ToString(tmp1268);
          }
          if(__isset.afterUSN)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("AfterUSN: ");
            AfterUSN.ToString(tmp1268);
          }
          if(__isset.maxEntries)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("MaxEntries: ");
            MaxEntries.ToString(tmp1268);
          }
          if(__isset.fullSyncOnly)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("FullSyncOnly: ");
            FullSyncOnly.ToString(tmp1268);
          }
          tmp1268.Append(')');
          return tmp1268.ToString();
        }
      }


      public partial class getLinkedNotebookSyncChunk_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.SyncChunk _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.NoteStore.SyncChunk Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getLinkedNotebookSyncChunk_result()
        {
        }

        public getLinkedNotebookSyncChunk_result DeepCopy()
        {
          var tmp1270 = new getLinkedNotebookSyncChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp1270.Success = (global::Evernote.EDAM.NoteStore.SyncChunk)this.Success.DeepCopy();
          }
          tmp1270.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1270.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1270.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1270.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1270.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1270.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1270.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.SyncChunk();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1271 = new TStruct("getLinkedNotebookSyncChunk_result");
            await oprot.WriteStructBeginAsync(tmp1271, cancellationToken);
            var tmp1272 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1272.Name = "Success";
                tmp1272.Type = TType.Struct;
                tmp1272.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1272.Name = "UserException";
                tmp1272.Type = TType.Struct;
                tmp1272.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1272.Name = "SystemException";
                tmp1272.Type = TType.Struct;
                tmp1272.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1272.Name = "NotFoundException";
                tmp1272.Type = TType.Struct;
                tmp1272.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLinkedNotebookSyncChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1273 = new StringBuilder("getLinkedNotebookSyncChunk_result(");
          int tmp1274 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("Success: ");
            Success.ToString(tmp1273);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("UserException: ");
            UserException.ToString(tmp1273);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("SystemException: ");
            SystemException.ToString(tmp1273);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1273);
          }
          tmp1273.Append(')');
          return tmp1273.ToString();
        }
      }


      public partial class listNotebooks_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listNotebooks_args()
        {
        }

        public listNotebooks_args DeepCopy()
        {
          var tmp1275 = new listNotebooks_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1275.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1275.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1276 = new TStruct("listNotebooks_args");
            await oprot.WriteStructBeginAsync(tmp1276, cancellationToken);
            var tmp1277 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1277.Name = "authenticationToken";
              tmp1277.Type = TType.String;
              tmp1277.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listNotebooks_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1278 = new StringBuilder("listNotebooks_args(");
          int tmp1279 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1279++) { tmp1278.Append(", "); }
            tmp1278.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1278);
          }
          tmp1278.Append(')');
          return tmp1278.ToString();
        }
      }


      public partial class listNotebooks_result : TBase
      {
        private List<global::Evernote.EDAM.Type.Notebook> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.Notebook> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listNotebooks_result()
        {
        }

        public listNotebooks_result DeepCopy()
        {
          var tmp1280 = new listNotebooks_result();
          if((Success != null) && __isset.success)
          {
            tmp1280.Success = this.Success.DeepCopy();
          }
          tmp1280.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1280.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1280.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1280.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1280.__isset.systemException = this.__isset.systemException;
          return tmp1280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1281 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.Notebook>(_list1281.Count);
                      for(int _i1282 = 0; _i1282 < _list1281.Count; ++_i1282)
                      {
                        global::Evernote.EDAM.Type.Notebook _elem1283;
                        _elem1283 = new global::Evernote.EDAM.Type.Notebook();
                        await _elem1283.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1283);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1284 = new TStruct("listNotebooks_result");
            await oprot.WriteStructBeginAsync(tmp1284, cancellationToken);
            var tmp1285 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1285.Name = "Success";
                tmp1285.Type = TType.List;
                tmp1285.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1285, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.Notebook _iter1286 in Success)
                  {
                    await _iter1286.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1285.Name = "UserException";
                tmp1285.Type = TType.Struct;
                tmp1285.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1285, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1285.Name = "SystemException";
                tmp1285.Type = TType.Struct;
                tmp1285.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1285, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listNotebooks_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1287 = new StringBuilder("listNotebooks_result(");
          int tmp1288 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1288++) { tmp1287.Append(", "); }
            tmp1287.Append("Success: ");
            Success.ToString(tmp1287);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1288++) { tmp1287.Append(", "); }
            tmp1287.Append("UserException: ");
            UserException.ToString(tmp1287);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1288++) { tmp1287.Append(", "); }
            tmp1287.Append("SystemException: ");
            SystemException.ToString(tmp1287);
          }
          tmp1287.Append(')');
          return tmp1287.ToString();
        }
      }


      public partial class listAccessibleBusinessNotebooks_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listAccessibleBusinessNotebooks_args()
        {
        }

        public listAccessibleBusinessNotebooks_args DeepCopy()
        {
          var tmp1289 = new listAccessibleBusinessNotebooks_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1289.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1289.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1290 = new TStruct("listAccessibleBusinessNotebooks_args");
            await oprot.WriteStructBeginAsync(tmp1290, cancellationToken);
            var tmp1291 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1291.Name = "authenticationToken";
              tmp1291.Type = TType.String;
              tmp1291.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1291, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAccessibleBusinessNotebooks_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1292 = new StringBuilder("listAccessibleBusinessNotebooks_args(");
          int tmp1293 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1293++) { tmp1292.Append(", "); }
            tmp1292.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1292);
          }
          tmp1292.Append(')');
          return tmp1292.ToString();
        }
      }


      public partial class listAccessibleBusinessNotebooks_result : TBase
      {
        private List<global::Evernote.EDAM.Type.Notebook> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.Notebook> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listAccessibleBusinessNotebooks_result()
        {
        }

        public listAccessibleBusinessNotebooks_result DeepCopy()
        {
          var tmp1294 = new listAccessibleBusinessNotebooks_result();
          if((Success != null) && __isset.success)
          {
            tmp1294.Success = this.Success.DeepCopy();
          }
          tmp1294.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1294.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1294.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1294.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1294.__isset.systemException = this.__isset.systemException;
          return tmp1294;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1295 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.Notebook>(_list1295.Count);
                      for(int _i1296 = 0; _i1296 < _list1295.Count; ++_i1296)
                      {
                        global::Evernote.EDAM.Type.Notebook _elem1297;
                        _elem1297 = new global::Evernote.EDAM.Type.Notebook();
                        await _elem1297.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1297);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1298 = new TStruct("listAccessibleBusinessNotebooks_result");
            await oprot.WriteStructBeginAsync(tmp1298, cancellationToken);
            var tmp1299 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1299.Name = "Success";
                tmp1299.Type = TType.List;
                tmp1299.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1299, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.Notebook _iter1300 in Success)
                  {
                    await _iter1300.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1299.Name = "UserException";
                tmp1299.Type = TType.Struct;
                tmp1299.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1299, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1299.Name = "SystemException";
                tmp1299.Type = TType.Struct;
                tmp1299.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1299, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listAccessibleBusinessNotebooks_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1301 = new StringBuilder("listAccessibleBusinessNotebooks_result(");
          int tmp1302 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1302++) { tmp1301.Append(", "); }
            tmp1301.Append("Success: ");
            Success.ToString(tmp1301);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1302++) { tmp1301.Append(", "); }
            tmp1301.Append("UserException: ");
            UserException.ToString(tmp1301);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1302++) { tmp1301.Append(", "); }
            tmp1301.Append("SystemException: ");
            SystemException.ToString(tmp1301);
          }
          tmp1301.Append(')');
          return tmp1301.ToString();
        }
      }


      public partial class getNotebook_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getNotebook_args()
        {
        }

        public getNotebook_args DeepCopy()
        {
          var tmp1303 = new getNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1303.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1303.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1303.Guid = this.Guid;
          }
          tmp1303.__isset.guid = this.__isset.guid;
          return tmp1303;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1304 = new TStruct("getNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1304, cancellationToken);
            var tmp1305 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1305.Name = "authenticationToken";
              tmp1305.Type = TType.String;
              tmp1305.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1305, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1305.Name = "guid";
              tmp1305.Type = TType.String;
              tmp1305.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1305, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1306 = new StringBuilder("getNotebook_args(");
          int tmp1307 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1307++) { tmp1306.Append(", "); }
            tmp1306.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1306);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1307++) { tmp1306.Append(", "); }
            tmp1306.Append("Guid: ");
            Guid.ToString(tmp1306);
          }
          tmp1306.Append(')');
          return tmp1306.ToString();
        }
      }


      public partial class getNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.Notebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Notebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNotebook_result()
        {
        }

        public getNotebook_result DeepCopy()
        {
          var tmp1308 = new getNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1308.Success = (global::Evernote.EDAM.Type.Notebook)this.Success.DeepCopy();
          }
          tmp1308.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1308.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1308.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1308.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1308.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1308.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1308.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1308;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Notebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1309 = new TStruct("getNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1309, cancellationToken);
            var tmp1310 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1310.Name = "Success";
                tmp1310.Type = TType.Struct;
                tmp1310.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1310.Name = "UserException";
                tmp1310.Type = TType.Struct;
                tmp1310.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1310.Name = "SystemException";
                tmp1310.Type = TType.Struct;
                tmp1310.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1310.Name = "NotFoundException";
                tmp1310.Type = TType.Struct;
                tmp1310.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1310, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1311 = new StringBuilder("getNotebook_result(");
          int tmp1312 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("Success: ");
            Success.ToString(tmp1311);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("UserException: ");
            UserException.ToString(tmp1311);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("SystemException: ");
            SystemException.ToString(tmp1311);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1312++) { tmp1311.Append(", "); }
            tmp1311.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1311);
          }
          tmp1311.Append(')');
          return tmp1311.ToString();
        }
      }


      public partial class getDefaultNotebook_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public getDefaultNotebook_args()
        {
        }

        public getDefaultNotebook_args DeepCopy()
        {
          var tmp1313 = new getDefaultNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1313.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1313.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1313;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1314 = new TStruct("getDefaultNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1314, cancellationToken);
            var tmp1315 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1315.Name = "authenticationToken";
              tmp1315.Type = TType.String;
              tmp1315.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1315, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getDefaultNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1316 = new StringBuilder("getDefaultNotebook_args(");
          int tmp1317 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1317++) { tmp1316.Append(", "); }
            tmp1316.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1316);
          }
          tmp1316.Append(')');
          return tmp1316.ToString();
        }
      }


      public partial class getDefaultNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.Notebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.Notebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public getDefaultNotebook_result()
        {
        }

        public getDefaultNotebook_result DeepCopy()
        {
          var tmp1318 = new getDefaultNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1318.Success = (global::Evernote.EDAM.Type.Notebook)this.Success.DeepCopy();
          }
          tmp1318.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1318.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1318.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1318.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1318.__isset.systemException = this.__isset.systemException;
          return tmp1318;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Notebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1319 = new TStruct("getDefaultNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1319, cancellationToken);
            var tmp1320 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1320.Name = "Success";
                tmp1320.Type = TType.Struct;
                tmp1320.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1320.Name = "UserException";
                tmp1320.Type = TType.Struct;
                tmp1320.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1320.Name = "SystemException";
                tmp1320.Type = TType.Struct;
                tmp1320.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getDefaultNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1321 = new StringBuilder("getDefaultNotebook_result(");
          int tmp1322 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("Success: ");
            Success.ToString(tmp1321);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("UserException: ");
            UserException.ToString(tmp1321);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("SystemException: ");
            SystemException.ToString(tmp1321);
          }
          tmp1321.Append(')');
          return tmp1321.ToString();
        }
      }


      public partial class createNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Notebook _notebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Notebook Notebook
        {
          get
          {
            return _notebook;
          }
          set
          {
            __isset.notebook = true;
            this._notebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool notebook;
        }

        public createNotebook_args()
        {
        }

        public createNotebook_args DeepCopy()
        {
          var tmp1323 = new createNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1323.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1323.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Notebook != null) && __isset.notebook)
          {
            tmp1323.Notebook = (global::Evernote.EDAM.Type.Notebook)this.Notebook.DeepCopy();
          }
          tmp1323.__isset.notebook = this.__isset.notebook;
          return tmp1323;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Notebook = new global::Evernote.EDAM.Type.Notebook();
                    await Notebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1324 = new TStruct("createNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1324, cancellationToken);
            var tmp1325 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1325.Name = "authenticationToken";
              tmp1325.Type = TType.String;
              tmp1325.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1325, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Notebook != null) && __isset.notebook)
            {
              tmp1325.Name = "notebook";
              tmp1325.Type = TType.Struct;
              tmp1325.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1325, cancellationToken);
              await Notebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.notebook == other.__isset.notebook) && ((!__isset.notebook) || (global::System.Object.Equals(Notebook, other.Notebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Notebook != null) && __isset.notebook)
            {
              hashcode = (hashcode * 397) + Notebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1326 = new StringBuilder("createNotebook_args(");
          int tmp1327 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1327++) { tmp1326.Append(", "); }
            tmp1326.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1326);
          }
          if((Notebook != null) && __isset.notebook)
          {
            if(0 < tmp1327++) { tmp1326.Append(", "); }
            tmp1326.Append("Notebook: ");
            Notebook.ToString(tmp1326);
          }
          tmp1326.Append(')');
          return tmp1326.ToString();
        }
      }


      public partial class createNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.Notebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Notebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public createNotebook_result()
        {
        }

        public createNotebook_result DeepCopy()
        {
          var tmp1328 = new createNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1328.Success = (global::Evernote.EDAM.Type.Notebook)this.Success.DeepCopy();
          }
          tmp1328.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1328.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1328.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1328.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1328.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1328.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1328.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1328;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Notebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1329 = new TStruct("createNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1329, cancellationToken);
            var tmp1330 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1330.Name = "Success";
                tmp1330.Type = TType.Struct;
                tmp1330.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1330.Name = "UserException";
                tmp1330.Type = TType.Struct;
                tmp1330.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1330.Name = "SystemException";
                tmp1330.Type = TType.Struct;
                tmp1330.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1330.Name = "NotFoundException";
                tmp1330.Type = TType.Struct;
                tmp1330.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1330, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1331 = new StringBuilder("createNotebook_result(");
          int tmp1332 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("Success: ");
            Success.ToString(tmp1331);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("UserException: ");
            UserException.ToString(tmp1331);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("SystemException: ");
            SystemException.ToString(tmp1331);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1332++) { tmp1331.Append(", "); }
            tmp1331.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1331);
          }
          tmp1331.Append(')');
          return tmp1331.ToString();
        }
      }


      public partial class updateNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Notebook _notebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Notebook Notebook
        {
          get
          {
            return _notebook;
          }
          set
          {
            __isset.notebook = true;
            this._notebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool notebook;
        }

        public updateNotebook_args()
        {
        }

        public updateNotebook_args DeepCopy()
        {
          var tmp1333 = new updateNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1333.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1333.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Notebook != null) && __isset.notebook)
          {
            tmp1333.Notebook = (global::Evernote.EDAM.Type.Notebook)this.Notebook.DeepCopy();
          }
          tmp1333.__isset.notebook = this.__isset.notebook;
          return tmp1333;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Notebook = new global::Evernote.EDAM.Type.Notebook();
                    await Notebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1334 = new TStruct("updateNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1334, cancellationToken);
            var tmp1335 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1335.Name = "authenticationToken";
              tmp1335.Type = TType.String;
              tmp1335.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1335, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Notebook != null) && __isset.notebook)
            {
              tmp1335.Name = "notebook";
              tmp1335.Type = TType.Struct;
              tmp1335.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1335, cancellationToken);
              await Notebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.notebook == other.__isset.notebook) && ((!__isset.notebook) || (global::System.Object.Equals(Notebook, other.Notebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Notebook != null) && __isset.notebook)
            {
              hashcode = (hashcode * 397) + Notebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1336 = new StringBuilder("updateNotebook_args(");
          int tmp1337 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1337++) { tmp1336.Append(", "); }
            tmp1336.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1336);
          }
          if((Notebook != null) && __isset.notebook)
          {
            if(0 < tmp1337++) { tmp1336.Append(", "); }
            tmp1336.Append("Notebook: ");
            Notebook.ToString(tmp1336);
          }
          tmp1336.Append(')');
          return tmp1336.ToString();
        }
      }


      public partial class updateNotebook_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateNotebook_result()
        {
        }

        public updateNotebook_result DeepCopy()
        {
          var tmp1338 = new updateNotebook_result();
          if(__isset.success)
          {
            tmp1338.Success = this.Success;
          }
          tmp1338.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1338.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1338.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1338.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1338.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1338.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1338.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1338;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1339 = new TStruct("updateNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1339, cancellationToken);
            var tmp1340 = new TField();

            if(this.__isset.success)
            {
              tmp1340.Name = "Success";
              tmp1340.Type = TType.I32;
              tmp1340.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1340.Name = "UserException";
                tmp1340.Type = TType.Struct;
                tmp1340.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1340.Name = "SystemException";
                tmp1340.Type = TType.Struct;
                tmp1340.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1340.Name = "NotFoundException";
                tmp1340.Type = TType.Struct;
                tmp1340.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1340, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1341 = new StringBuilder("updateNotebook_result(");
          int tmp1342 = 0;
          if(__isset.success)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("Success: ");
            Success.ToString(tmp1341);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("UserException: ");
            UserException.ToString(tmp1341);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("SystemException: ");
            SystemException.ToString(tmp1341);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1342++) { tmp1341.Append(", "); }
            tmp1341.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1341);
          }
          tmp1341.Append(')');
          return tmp1341.ToString();
        }
      }


      public partial class expungeNotebook_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public expungeNotebook_args()
        {
        }

        public expungeNotebook_args DeepCopy()
        {
          var tmp1343 = new expungeNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1343.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1343.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1343.Guid = this.Guid;
          }
          tmp1343.__isset.guid = this.__isset.guid;
          return tmp1343;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1344 = new TStruct("expungeNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1344, cancellationToken);
            var tmp1345 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1345.Name = "authenticationToken";
              tmp1345.Type = TType.String;
              tmp1345.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1345, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1345.Name = "guid";
              tmp1345.Type = TType.String;
              tmp1345.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1345, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1346 = new StringBuilder("expungeNotebook_args(");
          int tmp1347 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1347++) { tmp1346.Append(", "); }
            tmp1346.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1346);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1347++) { tmp1346.Append(", "); }
            tmp1346.Append("Guid: ");
            Guid.ToString(tmp1346);
          }
          tmp1346.Append(')');
          return tmp1346.ToString();
        }
      }


      public partial class expungeNotebook_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public expungeNotebook_result()
        {
        }

        public expungeNotebook_result DeepCopy()
        {
          var tmp1348 = new expungeNotebook_result();
          if(__isset.success)
          {
            tmp1348.Success = this.Success;
          }
          tmp1348.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1348.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1348.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1348.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1348.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1348.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1348.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1348;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1349 = new TStruct("expungeNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1349, cancellationToken);
            var tmp1350 = new TField();

            if(this.__isset.success)
            {
              tmp1350.Name = "Success";
              tmp1350.Type = TType.I32;
              tmp1350.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1350.Name = "UserException";
                tmp1350.Type = TType.Struct;
                tmp1350.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1350.Name = "SystemException";
                tmp1350.Type = TType.Struct;
                tmp1350.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1350.Name = "NotFoundException";
                tmp1350.Type = TType.Struct;
                tmp1350.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1350, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1351 = new StringBuilder("expungeNotebook_result(");
          int tmp1352 = 0;
          if(__isset.success)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("Success: ");
            Success.ToString(tmp1351);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("UserException: ");
            UserException.ToString(tmp1351);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("SystemException: ");
            SystemException.ToString(tmp1351);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1352++) { tmp1351.Append(", "); }
            tmp1351.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1351);
          }
          tmp1351.Append(')');
          return tmp1351.ToString();
        }
      }


      public partial class listTags_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listTags_args()
        {
        }

        public listTags_args DeepCopy()
        {
          var tmp1353 = new listTags_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1353.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1353.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1353;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1354 = new TStruct("listTags_args");
            await oprot.WriteStructBeginAsync(tmp1354, cancellationToken);
            var tmp1355 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1355.Name = "authenticationToken";
              tmp1355.Type = TType.String;
              tmp1355.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1355, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTags_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1356 = new StringBuilder("listTags_args(");
          int tmp1357 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1357++) { tmp1356.Append(", "); }
            tmp1356.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1356);
          }
          tmp1356.Append(')');
          return tmp1356.ToString();
        }
      }


      public partial class listTags_result : TBase
      {
        private List<global::Evernote.EDAM.Type.Tag> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.Tag> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listTags_result()
        {
        }

        public listTags_result DeepCopy()
        {
          var tmp1358 = new listTags_result();
          if((Success != null) && __isset.success)
          {
            tmp1358.Success = this.Success.DeepCopy();
          }
          tmp1358.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1358.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1358.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1358.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1358.__isset.systemException = this.__isset.systemException;
          return tmp1358;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1359 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.Tag>(_list1359.Count);
                      for(int _i1360 = 0; _i1360 < _list1359.Count; ++_i1360)
                      {
                        global::Evernote.EDAM.Type.Tag _elem1361;
                        _elem1361 = new global::Evernote.EDAM.Type.Tag();
                        await _elem1361.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1361);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1362 = new TStruct("listTags_result");
            await oprot.WriteStructBeginAsync(tmp1362, cancellationToken);
            var tmp1363 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1363.Name = "Success";
                tmp1363.Type = TType.List;
                tmp1363.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1363, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.Tag _iter1364 in Success)
                  {
                    await _iter1364.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1363.Name = "UserException";
                tmp1363.Type = TType.Struct;
                tmp1363.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1363, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1363.Name = "SystemException";
                tmp1363.Type = TType.Struct;
                tmp1363.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1363, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTags_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1365 = new StringBuilder("listTags_result(");
          int tmp1366 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1366++) { tmp1365.Append(", "); }
            tmp1365.Append("Success: ");
            Success.ToString(tmp1365);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1366++) { tmp1365.Append(", "); }
            tmp1365.Append("UserException: ");
            UserException.ToString(tmp1365);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1366++) { tmp1365.Append(", "); }
            tmp1365.Append("SystemException: ");
            SystemException.ToString(tmp1365);
          }
          tmp1365.Append(')');
          return tmp1365.ToString();
        }
      }


      public partial class listTagsByNotebook_args : TBase
      {
        private string _authenticationToken;
        private string _notebookGuid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NotebookGuid
        {
          get
          {
            return _notebookGuid;
          }
          set
          {
            __isset.notebookGuid = true;
            this._notebookGuid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool notebookGuid;
        }

        public listTagsByNotebook_args()
        {
        }

        public listTagsByNotebook_args DeepCopy()
        {
          var tmp1367 = new listTagsByNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1367.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1367.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            tmp1367.NotebookGuid = this.NotebookGuid;
          }
          tmp1367.__isset.notebookGuid = this.__isset.notebookGuid;
          return tmp1367;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1368 = new TStruct("listTagsByNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1368, cancellationToken);
            var tmp1369 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1369.Name = "authenticationToken";
              tmp1369.Type = TType.String;
              tmp1369.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1369, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              tmp1369.Name = "notebookGuid";
              tmp1369.Type = TType.String;
              tmp1369.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1369, cancellationToken);
              await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagsByNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1370 = new StringBuilder("listTagsByNotebook_args(");
          int tmp1371 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1371++) { tmp1370.Append(", "); }
            tmp1370.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1370);
          }
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            if(0 < tmp1371++) { tmp1370.Append(", "); }
            tmp1370.Append("NotebookGuid: ");
            NotebookGuid.ToString(tmp1370);
          }
          tmp1370.Append(')');
          return tmp1370.ToString();
        }
      }


      public partial class listTagsByNotebook_result : TBase
      {
        private List<global::Evernote.EDAM.Type.Tag> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public List<global::Evernote.EDAM.Type.Tag> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public listTagsByNotebook_result()
        {
        }

        public listTagsByNotebook_result DeepCopy()
        {
          var tmp1372 = new listTagsByNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1372.Success = this.Success.DeepCopy();
          }
          tmp1372.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1372.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1372.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1372.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1372.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1372.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1372.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1372;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1373 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.Tag>(_list1373.Count);
                      for(int _i1374 = 0; _i1374 < _list1373.Count; ++_i1374)
                      {
                        global::Evernote.EDAM.Type.Tag _elem1375;
                        _elem1375 = new global::Evernote.EDAM.Type.Tag();
                        await _elem1375.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1375);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1376 = new TStruct("listTagsByNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1376, cancellationToken);
            var tmp1377 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1377.Name = "Success";
                tmp1377.Type = TType.List;
                tmp1377.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1377, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.Tag _iter1378 in Success)
                  {
                    await _iter1378.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1377.Name = "UserException";
                tmp1377.Type = TType.Struct;
                tmp1377.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1377, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1377.Name = "SystemException";
                tmp1377.Type = TType.Struct;
                tmp1377.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1377, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1377.Name = "NotFoundException";
                tmp1377.Type = TType.Struct;
                tmp1377.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1377, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagsByNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1379 = new StringBuilder("listTagsByNotebook_result(");
          int tmp1380 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("Success: ");
            Success.ToString(tmp1379);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("UserException: ");
            UserException.ToString(tmp1379);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("SystemException: ");
            SystemException.ToString(tmp1379);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1380++) { tmp1379.Append(", "); }
            tmp1379.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1379);
          }
          tmp1379.Append(')');
          return tmp1379.ToString();
        }
      }


      public partial class getTag_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getTag_args()
        {
        }

        public getTag_args DeepCopy()
        {
          var tmp1381 = new getTag_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1381.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1381.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1381.Guid = this.Guid;
          }
          tmp1381.__isset.guid = this.__isset.guid;
          return tmp1381;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1382 = new TStruct("getTag_args");
            await oprot.WriteStructBeginAsync(tmp1382, cancellationToken);
            var tmp1383 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1383.Name = "authenticationToken";
              tmp1383.Type = TType.String;
              tmp1383.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1383, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1383.Name = "guid";
              tmp1383.Type = TType.String;
              tmp1383.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1383, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1384 = new StringBuilder("getTag_args(");
          int tmp1385 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1385++) { tmp1384.Append(", "); }
            tmp1384.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1384);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1385++) { tmp1384.Append(", "); }
            tmp1384.Append("Guid: ");
            Guid.ToString(tmp1384);
          }
          tmp1384.Append(')');
          return tmp1384.ToString();
        }
      }


      public partial class getTag_result : TBase
      {
        private global::Evernote.EDAM.Type.Tag _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Tag Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getTag_result()
        {
        }

        public getTag_result DeepCopy()
        {
          var tmp1386 = new getTag_result();
          if((Success != null) && __isset.success)
          {
            tmp1386.Success = (global::Evernote.EDAM.Type.Tag)this.Success.DeepCopy();
          }
          tmp1386.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1386.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1386.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1386.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1386.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1386.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1386.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1386;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Tag();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1387 = new TStruct("getTag_result");
            await oprot.WriteStructBeginAsync(tmp1387, cancellationToken);
            var tmp1388 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1388.Name = "Success";
                tmp1388.Type = TType.Struct;
                tmp1388.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1388, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1388.Name = "UserException";
                tmp1388.Type = TType.Struct;
                tmp1388.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1388, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1388.Name = "SystemException";
                tmp1388.Type = TType.Struct;
                tmp1388.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1388, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1388.Name = "NotFoundException";
                tmp1388.Type = TType.Struct;
                tmp1388.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1388, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1389 = new StringBuilder("getTag_result(");
          int tmp1390 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1390++) { tmp1389.Append(", "); }
            tmp1389.Append("Success: ");
            Success.ToString(tmp1389);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1390++) { tmp1389.Append(", "); }
            tmp1389.Append("UserException: ");
            UserException.ToString(tmp1389);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1390++) { tmp1389.Append(", "); }
            tmp1389.Append("SystemException: ");
            SystemException.ToString(tmp1389);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1390++) { tmp1389.Append(", "); }
            tmp1389.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1389);
          }
          tmp1389.Append(')');
          return tmp1389.ToString();
        }
      }


      public partial class createTag_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Tag _tag;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Tag Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool tag;
        }

        public createTag_args()
        {
        }

        public createTag_args DeepCopy()
        {
          var tmp1391 = new createTag_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1391.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1391.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Tag != null) && __isset.tag)
          {
            tmp1391.Tag = (global::Evernote.EDAM.Type.Tag)this.Tag.DeepCopy();
          }
          tmp1391.__isset.tag = this.__isset.tag;
          return tmp1391;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Tag = new global::Evernote.EDAM.Type.Tag();
                    await Tag.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1392 = new TStruct("createTag_args");
            await oprot.WriteStructBeginAsync(tmp1392, cancellationToken);
            var tmp1393 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1393.Name = "authenticationToken";
              tmp1393.Type = TType.String;
              tmp1393.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1393, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp1393.Name = "tag";
              tmp1393.Type = TType.Struct;
              tmp1393.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1393, cancellationToken);
              await Tag.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1394 = new StringBuilder("createTag_args(");
          int tmp1395 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1395++) { tmp1394.Append(", "); }
            tmp1394.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1394);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp1395++) { tmp1394.Append(", "); }
            tmp1394.Append("Tag: ");
            Tag.ToString(tmp1394);
          }
          tmp1394.Append(')');
          return tmp1394.ToString();
        }
      }


      public partial class createTag_result : TBase
      {
        private global::Evernote.EDAM.Type.Tag _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Tag Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public createTag_result()
        {
        }

        public createTag_result DeepCopy()
        {
          var tmp1396 = new createTag_result();
          if((Success != null) && __isset.success)
          {
            tmp1396.Success = (global::Evernote.EDAM.Type.Tag)this.Success.DeepCopy();
          }
          tmp1396.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1396.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1396.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1396.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1396.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1396.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1396.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1396;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Tag();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1397 = new TStruct("createTag_result");
            await oprot.WriteStructBeginAsync(tmp1397, cancellationToken);
            var tmp1398 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1398.Name = "Success";
                tmp1398.Type = TType.Struct;
                tmp1398.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1398, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1398.Name = "UserException";
                tmp1398.Type = TType.Struct;
                tmp1398.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1398, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1398.Name = "SystemException";
                tmp1398.Type = TType.Struct;
                tmp1398.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1398, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1398.Name = "NotFoundException";
                tmp1398.Type = TType.Struct;
                tmp1398.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1398, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1399 = new StringBuilder("createTag_result(");
          int tmp1400 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1400++) { tmp1399.Append(", "); }
            tmp1399.Append("Success: ");
            Success.ToString(tmp1399);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1400++) { tmp1399.Append(", "); }
            tmp1399.Append("UserException: ");
            UserException.ToString(tmp1399);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1400++) { tmp1399.Append(", "); }
            tmp1399.Append("SystemException: ");
            SystemException.ToString(tmp1399);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1400++) { tmp1399.Append(", "); }
            tmp1399.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1399);
          }
          tmp1399.Append(')');
          return tmp1399.ToString();
        }
      }


      public partial class updateTag_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Tag _tag;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Tag Tag
        {
          get
          {
            return _tag;
          }
          set
          {
            __isset.tag = true;
            this._tag = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool tag;
        }

        public updateTag_args()
        {
        }

        public updateTag_args DeepCopy()
        {
          var tmp1401 = new updateTag_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1401.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1401.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Tag != null) && __isset.tag)
          {
            tmp1401.Tag = (global::Evernote.EDAM.Type.Tag)this.Tag.DeepCopy();
          }
          tmp1401.__isset.tag = this.__isset.tag;
          return tmp1401;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Tag = new global::Evernote.EDAM.Type.Tag();
                    await Tag.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1402 = new TStruct("updateTag_args");
            await oprot.WriteStructBeginAsync(tmp1402, cancellationToken);
            var tmp1403 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1403.Name = "authenticationToken";
              tmp1403.Type = TType.String;
              tmp1403.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Tag != null) && __isset.tag)
            {
              tmp1403.Name = "tag";
              tmp1403.Type = TType.Struct;
              tmp1403.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1403, cancellationToken);
              await Tag.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.tag == other.__isset.tag) && ((!__isset.tag) || (global::System.Object.Equals(Tag, other.Tag))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Tag != null) && __isset.tag)
            {
              hashcode = (hashcode * 397) + Tag.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1404 = new StringBuilder("updateTag_args(");
          int tmp1405 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1405++) { tmp1404.Append(", "); }
            tmp1404.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1404);
          }
          if((Tag != null) && __isset.tag)
          {
            if(0 < tmp1405++) { tmp1404.Append(", "); }
            tmp1404.Append("Tag: ");
            Tag.ToString(tmp1404);
          }
          tmp1404.Append(')');
          return tmp1404.ToString();
        }
      }


      public partial class updateTag_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateTag_result()
        {
        }

        public updateTag_result DeepCopy()
        {
          var tmp1406 = new updateTag_result();
          if(__isset.success)
          {
            tmp1406.Success = this.Success;
          }
          tmp1406.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1406.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1406.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1406.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1406.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1406.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1406.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1406;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1407 = new TStruct("updateTag_result");
            await oprot.WriteStructBeginAsync(tmp1407, cancellationToken);
            var tmp1408 = new TField();

            if(this.__isset.success)
            {
              tmp1408.Name = "Success";
              tmp1408.Type = TType.I32;
              tmp1408.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1408, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1408.Name = "UserException";
                tmp1408.Type = TType.Struct;
                tmp1408.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1408, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1408.Name = "SystemException";
                tmp1408.Type = TType.Struct;
                tmp1408.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1408, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1408.Name = "NotFoundException";
                tmp1408.Type = TType.Struct;
                tmp1408.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1408, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1409 = new StringBuilder("updateTag_result(");
          int tmp1410 = 0;
          if(__isset.success)
          {
            if(0 < tmp1410++) { tmp1409.Append(", "); }
            tmp1409.Append("Success: ");
            Success.ToString(tmp1409);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1410++) { tmp1409.Append(", "); }
            tmp1409.Append("UserException: ");
            UserException.ToString(tmp1409);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1410++) { tmp1409.Append(", "); }
            tmp1409.Append("SystemException: ");
            SystemException.ToString(tmp1409);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1410++) { tmp1409.Append(", "); }
            tmp1409.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1409);
          }
          tmp1409.Append(')');
          return tmp1409.ToString();
        }
      }


      public partial class untagAll_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public untagAll_args()
        {
        }

        public untagAll_args DeepCopy()
        {
          var tmp1411 = new untagAll_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1411.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1411.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1411.Guid = this.Guid;
          }
          tmp1411.__isset.guid = this.__isset.guid;
          return tmp1411;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1412 = new TStruct("untagAll_args");
            await oprot.WriteStructBeginAsync(tmp1412, cancellationToken);
            var tmp1413 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1413.Name = "authenticationToken";
              tmp1413.Type = TType.String;
              tmp1413.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1413, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1413.Name = "guid";
              tmp1413.Type = TType.String;
              tmp1413.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1413, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is untagAll_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1414 = new StringBuilder("untagAll_args(");
          int tmp1415 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1415++) { tmp1414.Append(", "); }
            tmp1414.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1414);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1415++) { tmp1414.Append(", "); }
            tmp1414.Append("Guid: ");
            Guid.ToString(tmp1414);
          }
          tmp1414.Append(')');
          return tmp1414.ToString();
        }
      }


      public partial class untagAll_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public untagAll_result()
        {
        }

        public untagAll_result DeepCopy()
        {
          var tmp1416 = new untagAll_result();
          if((UserException != null) && __isset.userException)
          {
            tmp1416.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1416.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1416.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1416.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1416.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1416.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1416;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1417 = new TStruct("untagAll_result");
            await oprot.WriteStructBeginAsync(tmp1417, cancellationToken);
            var tmp1418 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1418.Name = "UserException";
                tmp1418.Type = TType.Struct;
                tmp1418.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1418, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1418.Name = "SystemException";
                tmp1418.Type = TType.Struct;
                tmp1418.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1418, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1418.Name = "NotFoundException";
                tmp1418.Type = TType.Struct;
                tmp1418.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1418, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is untagAll_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1419 = new StringBuilder("untagAll_result(");
          int tmp1420 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1420++) { tmp1419.Append(", "); }
            tmp1419.Append("UserException: ");
            UserException.ToString(tmp1419);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1420++) { tmp1419.Append(", "); }
            tmp1419.Append("SystemException: ");
            SystemException.ToString(tmp1419);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1420++) { tmp1419.Append(", "); }
            tmp1419.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1419);
          }
          tmp1419.Append(')');
          return tmp1419.ToString();
        }
      }


      public partial class expungeTag_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public expungeTag_args()
        {
        }

        public expungeTag_args DeepCopy()
        {
          var tmp1421 = new expungeTag_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1421.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1421.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1421.Guid = this.Guid;
          }
          tmp1421.__isset.guid = this.__isset.guid;
          return tmp1421;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1422 = new TStruct("expungeTag_args");
            await oprot.WriteStructBeginAsync(tmp1422, cancellationToken);
            var tmp1423 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1423.Name = "authenticationToken";
              tmp1423.Type = TType.String;
              tmp1423.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1423.Name = "guid";
              tmp1423.Type = TType.String;
              tmp1423.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1423, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1424 = new StringBuilder("expungeTag_args(");
          int tmp1425 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1424);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1425++) { tmp1424.Append(", "); }
            tmp1424.Append("Guid: ");
            Guid.ToString(tmp1424);
          }
          tmp1424.Append(')');
          return tmp1424.ToString();
        }
      }


      public partial class expungeTag_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public expungeTag_result()
        {
        }

        public expungeTag_result DeepCopy()
        {
          var tmp1426 = new expungeTag_result();
          if(__isset.success)
          {
            tmp1426.Success = this.Success;
          }
          tmp1426.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1426.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1426.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1426.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1426.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1426.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1426.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1426;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1427 = new TStruct("expungeTag_result");
            await oprot.WriteStructBeginAsync(tmp1427, cancellationToken);
            var tmp1428 = new TField();

            if(this.__isset.success)
            {
              tmp1428.Name = "Success";
              tmp1428.Type = TType.I32;
              tmp1428.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1428, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1428.Name = "UserException";
                tmp1428.Type = TType.Struct;
                tmp1428.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1428, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1428.Name = "SystemException";
                tmp1428.Type = TType.Struct;
                tmp1428.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1428, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1428.Name = "NotFoundException";
                tmp1428.Type = TType.Struct;
                tmp1428.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1428, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1429 = new StringBuilder("expungeTag_result(");
          int tmp1430 = 0;
          if(__isset.success)
          {
            if(0 < tmp1430++) { tmp1429.Append(", "); }
            tmp1429.Append("Success: ");
            Success.ToString(tmp1429);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1430++) { tmp1429.Append(", "); }
            tmp1429.Append("UserException: ");
            UserException.ToString(tmp1429);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1430++) { tmp1429.Append(", "); }
            tmp1429.Append("SystemException: ");
            SystemException.ToString(tmp1429);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1430++) { tmp1429.Append(", "); }
            tmp1429.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1429);
          }
          tmp1429.Append(')');
          return tmp1429.ToString();
        }
      }


      public partial class listSearches_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listSearches_args()
        {
        }

        public listSearches_args DeepCopy()
        {
          var tmp1431 = new listSearches_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1431.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1431.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1431;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1432 = new TStruct("listSearches_args");
            await oprot.WriteStructBeginAsync(tmp1432, cancellationToken);
            var tmp1433 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1433.Name = "authenticationToken";
              tmp1433.Type = TType.String;
              tmp1433.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1433, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSearches_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1434 = new StringBuilder("listSearches_args(");
          int tmp1435 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1435++) { tmp1434.Append(", "); }
            tmp1434.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1434);
          }
          tmp1434.Append(')');
          return tmp1434.ToString();
        }
      }


      public partial class listSearches_result : TBase
      {
        private List<global::Evernote.EDAM.Type.SavedSearch> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.SavedSearch> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public listSearches_result()
        {
        }

        public listSearches_result DeepCopy()
        {
          var tmp1436 = new listSearches_result();
          if((Success != null) && __isset.success)
          {
            tmp1436.Success = this.Success.DeepCopy();
          }
          tmp1436.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1436.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1436.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1436.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1436.__isset.systemException = this.__isset.systemException;
          return tmp1436;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1437 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.SavedSearch>(_list1437.Count);
                      for(int _i1438 = 0; _i1438 < _list1437.Count; ++_i1438)
                      {
                        global::Evernote.EDAM.Type.SavedSearch _elem1439;
                        _elem1439 = new global::Evernote.EDAM.Type.SavedSearch();
                        await _elem1439.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1439);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1440 = new TStruct("listSearches_result");
            await oprot.WriteStructBeginAsync(tmp1440, cancellationToken);
            var tmp1441 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1441.Name = "Success";
                tmp1441.Type = TType.List;
                tmp1441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1441, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.SavedSearch _iter1442 in Success)
                  {
                    await _iter1442.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1441.Name = "UserException";
                tmp1441.Type = TType.Struct;
                tmp1441.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1441, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1441.Name = "SystemException";
                tmp1441.Type = TType.Struct;
                tmp1441.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1441, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSearches_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1443 = new StringBuilder("listSearches_result(");
          int tmp1444 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1444++) { tmp1443.Append(", "); }
            tmp1443.Append("Success: ");
            Success.ToString(tmp1443);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1444++) { tmp1443.Append(", "); }
            tmp1443.Append("UserException: ");
            UserException.ToString(tmp1443);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1444++) { tmp1443.Append(", "); }
            tmp1443.Append("SystemException: ");
            SystemException.ToString(tmp1443);
          }
          tmp1443.Append(')');
          return tmp1443.ToString();
        }
      }


      public partial class getSearch_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getSearch_args()
        {
        }

        public getSearch_args DeepCopy()
        {
          var tmp1445 = new getSearch_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1445.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1445.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1445.Guid = this.Guid;
          }
          tmp1445.__isset.guid = this.__isset.guid;
          return tmp1445;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1446 = new TStruct("getSearch_args");
            await oprot.WriteStructBeginAsync(tmp1446, cancellationToken);
            var tmp1447 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1447.Name = "authenticationToken";
              tmp1447.Type = TType.String;
              tmp1447.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1447, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1447.Name = "guid";
              tmp1447.Type = TType.String;
              tmp1447.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1447, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSearch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1448 = new StringBuilder("getSearch_args(");
          int tmp1449 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1449++) { tmp1448.Append(", "); }
            tmp1448.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1448);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1449++) { tmp1448.Append(", "); }
            tmp1448.Append("Guid: ");
            Guid.ToString(tmp1448);
          }
          tmp1448.Append(')');
          return tmp1448.ToString();
        }
      }


      public partial class getSearch_result : TBase
      {
        private global::Evernote.EDAM.Type.SavedSearch _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.SavedSearch Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getSearch_result()
        {
        }

        public getSearch_result DeepCopy()
        {
          var tmp1450 = new getSearch_result();
          if((Success != null) && __isset.success)
          {
            tmp1450.Success = (global::Evernote.EDAM.Type.SavedSearch)this.Success.DeepCopy();
          }
          tmp1450.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1450.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1450.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1450.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1450.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1450.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1450.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1450;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.SavedSearch();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1451 = new TStruct("getSearch_result");
            await oprot.WriteStructBeginAsync(tmp1451, cancellationToken);
            var tmp1452 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1452.Name = "Success";
                tmp1452.Type = TType.Struct;
                tmp1452.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1452, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1452.Name = "UserException";
                tmp1452.Type = TType.Struct;
                tmp1452.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1452, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1452.Name = "SystemException";
                tmp1452.Type = TType.Struct;
                tmp1452.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1452, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1452.Name = "NotFoundException";
                tmp1452.Type = TType.Struct;
                tmp1452.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1452, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSearch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1453 = new StringBuilder("getSearch_result(");
          int tmp1454 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1454++) { tmp1453.Append(", "); }
            tmp1453.Append("Success: ");
            Success.ToString(tmp1453);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1454++) { tmp1453.Append(", "); }
            tmp1453.Append("UserException: ");
            UserException.ToString(tmp1453);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1454++) { tmp1453.Append(", "); }
            tmp1453.Append("SystemException: ");
            SystemException.ToString(tmp1453);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1454++) { tmp1453.Append(", "); }
            tmp1453.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1453);
          }
          tmp1453.Append(')');
          return tmp1453.ToString();
        }
      }


      public partial class createSearch_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.SavedSearch _search;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.SavedSearch Search
        {
          get
          {
            return _search;
          }
          set
          {
            __isset.search = true;
            this._search = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool search;
        }

        public createSearch_args()
        {
        }

        public createSearch_args DeepCopy()
        {
          var tmp1455 = new createSearch_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1455.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1455.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Search != null) && __isset.search)
          {
            tmp1455.Search = (global::Evernote.EDAM.Type.SavedSearch)this.Search.DeepCopy();
          }
          tmp1455.__isset.search = this.__isset.search;
          return tmp1455;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Search = new global::Evernote.EDAM.Type.SavedSearch();
                    await Search.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1456 = new TStruct("createSearch_args");
            await oprot.WriteStructBeginAsync(tmp1456, cancellationToken);
            var tmp1457 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1457.Name = "authenticationToken";
              tmp1457.Type = TType.String;
              tmp1457.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1457, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Search != null) && __isset.search)
            {
              tmp1457.Name = "search";
              tmp1457.Type = TType.Struct;
              tmp1457.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1457, cancellationToken);
              await Search.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSearch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.search == other.__isset.search) && ((!__isset.search) || (global::System.Object.Equals(Search, other.Search))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Search != null) && __isset.search)
            {
              hashcode = (hashcode * 397) + Search.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1458 = new StringBuilder("createSearch_args(");
          int tmp1459 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1459++) { tmp1458.Append(", "); }
            tmp1458.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1458);
          }
          if((Search != null) && __isset.search)
          {
            if(0 < tmp1459++) { tmp1458.Append(", "); }
            tmp1458.Append("Search: ");
            Search.ToString(tmp1458);
          }
          tmp1458.Append(')');
          return tmp1458.ToString();
        }
      }


      public partial class createSearch_result : TBase
      {
        private global::Evernote.EDAM.Type.SavedSearch _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.SavedSearch Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
        }

        public createSearch_result()
        {
        }

        public createSearch_result DeepCopy()
        {
          var tmp1460 = new createSearch_result();
          if((Success != null) && __isset.success)
          {
            tmp1460.Success = (global::Evernote.EDAM.Type.SavedSearch)this.Success.DeepCopy();
          }
          tmp1460.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1460.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1460.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1460.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1460.__isset.systemException = this.__isset.systemException;
          return tmp1460;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.SavedSearch();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1461 = new TStruct("createSearch_result");
            await oprot.WriteStructBeginAsync(tmp1461, cancellationToken);
            var tmp1462 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1462.Name = "Success";
                tmp1462.Type = TType.Struct;
                tmp1462.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1462.Name = "UserException";
                tmp1462.Type = TType.Struct;
                tmp1462.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1462.Name = "SystemException";
                tmp1462.Type = TType.Struct;
                tmp1462.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1462, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSearch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1463 = new StringBuilder("createSearch_result(");
          int tmp1464 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1464++) { tmp1463.Append(", "); }
            tmp1463.Append("Success: ");
            Success.ToString(tmp1463);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1464++) { tmp1463.Append(", "); }
            tmp1463.Append("UserException: ");
            UserException.ToString(tmp1463);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1464++) { tmp1463.Append(", "); }
            tmp1463.Append("SystemException: ");
            SystemException.ToString(tmp1463);
          }
          tmp1463.Append(')');
          return tmp1463.ToString();
        }
      }


      public partial class updateSearch_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.SavedSearch _search;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.SavedSearch Search
        {
          get
          {
            return _search;
          }
          set
          {
            __isset.search = true;
            this._search = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool search;
        }

        public updateSearch_args()
        {
        }

        public updateSearch_args DeepCopy()
        {
          var tmp1465 = new updateSearch_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1465.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1465.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Search != null) && __isset.search)
          {
            tmp1465.Search = (global::Evernote.EDAM.Type.SavedSearch)this.Search.DeepCopy();
          }
          tmp1465.__isset.search = this.__isset.search;
          return tmp1465;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Search = new global::Evernote.EDAM.Type.SavedSearch();
                    await Search.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1466 = new TStruct("updateSearch_args");
            await oprot.WriteStructBeginAsync(tmp1466, cancellationToken);
            var tmp1467 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1467.Name = "authenticationToken";
              tmp1467.Type = TType.String;
              tmp1467.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1467, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Search != null) && __isset.search)
            {
              tmp1467.Name = "search";
              tmp1467.Type = TType.Struct;
              tmp1467.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1467, cancellationToken);
              await Search.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSearch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.search == other.__isset.search) && ((!__isset.search) || (global::System.Object.Equals(Search, other.Search))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Search != null) && __isset.search)
            {
              hashcode = (hashcode * 397) + Search.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1468 = new StringBuilder("updateSearch_args(");
          int tmp1469 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1469++) { tmp1468.Append(", "); }
            tmp1468.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1468);
          }
          if((Search != null) && __isset.search)
          {
            if(0 < tmp1469++) { tmp1468.Append(", "); }
            tmp1468.Append("Search: ");
            Search.ToString(tmp1468);
          }
          tmp1468.Append(')');
          return tmp1468.ToString();
        }
      }


      public partial class updateSearch_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateSearch_result()
        {
        }

        public updateSearch_result DeepCopy()
        {
          var tmp1470 = new updateSearch_result();
          if(__isset.success)
          {
            tmp1470.Success = this.Success;
          }
          tmp1470.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1470.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1470.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1470.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1470.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1470.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1470.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1470;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1471 = new TStruct("updateSearch_result");
            await oprot.WriteStructBeginAsync(tmp1471, cancellationToken);
            var tmp1472 = new TField();

            if(this.__isset.success)
            {
              tmp1472.Name = "Success";
              tmp1472.Type = TType.I32;
              tmp1472.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1472, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1472.Name = "UserException";
                tmp1472.Type = TType.Struct;
                tmp1472.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1472, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1472.Name = "SystemException";
                tmp1472.Type = TType.Struct;
                tmp1472.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1472, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1472.Name = "NotFoundException";
                tmp1472.Type = TType.Struct;
                tmp1472.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1472, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSearch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1473 = new StringBuilder("updateSearch_result(");
          int tmp1474 = 0;
          if(__isset.success)
          {
            if(0 < tmp1474++) { tmp1473.Append(", "); }
            tmp1473.Append("Success: ");
            Success.ToString(tmp1473);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1474++) { tmp1473.Append(", "); }
            tmp1473.Append("UserException: ");
            UserException.ToString(tmp1473);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1474++) { tmp1473.Append(", "); }
            tmp1473.Append("SystemException: ");
            SystemException.ToString(tmp1473);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1474++) { tmp1473.Append(", "); }
            tmp1473.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1473);
          }
          tmp1473.Append(')');
          return tmp1473.ToString();
        }
      }


      public partial class expungeSearch_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public expungeSearch_args()
        {
        }

        public expungeSearch_args DeepCopy()
        {
          var tmp1475 = new expungeSearch_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1475.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1475.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1475.Guid = this.Guid;
          }
          tmp1475.__isset.guid = this.__isset.guid;
          return tmp1475;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1476 = new TStruct("expungeSearch_args");
            await oprot.WriteStructBeginAsync(tmp1476, cancellationToken);
            var tmp1477 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1477.Name = "authenticationToken";
              tmp1477.Type = TType.String;
              tmp1477.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1477, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1477.Name = "guid";
              tmp1477.Type = TType.String;
              tmp1477.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1477, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeSearch_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1478 = new StringBuilder("expungeSearch_args(");
          int tmp1479 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1479++) { tmp1478.Append(", "); }
            tmp1478.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1478);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1479++) { tmp1478.Append(", "); }
            tmp1478.Append("Guid: ");
            Guid.ToString(tmp1478);
          }
          tmp1478.Append(')');
          return tmp1478.ToString();
        }
      }


      public partial class expungeSearch_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public expungeSearch_result()
        {
        }

        public expungeSearch_result DeepCopy()
        {
          var tmp1480 = new expungeSearch_result();
          if(__isset.success)
          {
            tmp1480.Success = this.Success;
          }
          tmp1480.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1480.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1480.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1480.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1480.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1480.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1480.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1480;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1481 = new TStruct("expungeSearch_result");
            await oprot.WriteStructBeginAsync(tmp1481, cancellationToken);
            var tmp1482 = new TField();

            if(this.__isset.success)
            {
              tmp1482.Name = "Success";
              tmp1482.Type = TType.I32;
              tmp1482.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1482.Name = "UserException";
                tmp1482.Type = TType.Struct;
                tmp1482.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1482.Name = "SystemException";
                tmp1482.Type = TType.Struct;
                tmp1482.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1482.Name = "NotFoundException";
                tmp1482.Type = TType.Struct;
                tmp1482.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1482, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeSearch_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1483 = new StringBuilder("expungeSearch_result(");
          int tmp1484 = 0;
          if(__isset.success)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("Success: ");
            Success.ToString(tmp1483);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("UserException: ");
            UserException.ToString(tmp1483);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("SystemException: ");
            SystemException.ToString(tmp1483);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1484++) { tmp1483.Append(", "); }
            tmp1483.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1483);
          }
          tmp1483.Append(')');
          return tmp1483.ToString();
        }
      }


      public partial class findNoteOffset_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.NoteFilter _filter;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NoteFilter Filter
        {
          get
          {
            return _filter;
          }
          set
          {
            __isset.filter = true;
            this._filter = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool filter;
          public bool guid;
        }

        public findNoteOffset_args()
        {
        }

        public findNoteOffset_args DeepCopy()
        {
          var tmp1485 = new findNoteOffset_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1485.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1485.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Filter != null) && __isset.filter)
          {
            tmp1485.Filter = (global::Evernote.EDAM.NoteStore.NoteFilter)this.Filter.DeepCopy();
          }
          tmp1485.__isset.filter = this.__isset.filter;
          if((Guid != null) && __isset.guid)
          {
            tmp1485.Guid = this.Guid;
          }
          tmp1485.__isset.guid = this.__isset.guid;
          return tmp1485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Filter = new global::Evernote.EDAM.NoteStore.NoteFilter();
                    await Filter.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1486 = new TStruct("findNoteOffset_args");
            await oprot.WriteStructBeginAsync(tmp1486, cancellationToken);
            var tmp1487 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1487.Name = "authenticationToken";
              tmp1487.Type = TType.String;
              tmp1487.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Filter != null) && __isset.filter)
            {
              tmp1487.Name = "filter";
              tmp1487.Type = TType.Struct;
              tmp1487.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
              await Filter.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1487.Name = "guid";
              tmp1487.Type = TType.String;
              tmp1487.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNoteOffset_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (global::System.Object.Equals(Filter, other.Filter))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Filter != null) && __isset.filter)
            {
              hashcode = (hashcode * 397) + Filter.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1488 = new StringBuilder("findNoteOffset_args(");
          int tmp1489 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1488);
          }
          if((Filter != null) && __isset.filter)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("Filter: ");
            Filter.ToString(tmp1488);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("Guid: ");
            Guid.ToString(tmp1488);
          }
          tmp1488.Append(')');
          return tmp1488.ToString();
        }
      }


      public partial class findNoteOffset_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public findNoteOffset_result()
        {
        }

        public findNoteOffset_result DeepCopy()
        {
          var tmp1490 = new findNoteOffset_result();
          if(__isset.success)
          {
            tmp1490.Success = this.Success;
          }
          tmp1490.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1490.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1490.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1490.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1490.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1490.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1490.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1491 = new TStruct("findNoteOffset_result");
            await oprot.WriteStructBeginAsync(tmp1491, cancellationToken);
            var tmp1492 = new TField();

            if(this.__isset.success)
            {
              tmp1492.Name = "Success";
              tmp1492.Type = TType.I32;
              tmp1492.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1492.Name = "UserException";
                tmp1492.Type = TType.Struct;
                tmp1492.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1492.Name = "SystemException";
                tmp1492.Type = TType.Struct;
                tmp1492.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1492.Name = "NotFoundException";
                tmp1492.Type = TType.Struct;
                tmp1492.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNoteOffset_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1493 = new StringBuilder("findNoteOffset_result(");
          int tmp1494 = 0;
          if(__isset.success)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("Success: ");
            Success.ToString(tmp1493);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("UserException: ");
            UserException.ToString(tmp1493);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("SystemException: ");
            SystemException.ToString(tmp1493);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1493);
          }
          tmp1493.Append(')');
          return tmp1493.ToString();
        }
      }


      public partial class findNotesMetadata_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.NoteFilter _filter;
        private int _offset;
        private int _maxNotes;
        private global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec _resultSpec;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NoteFilter Filter
        {
          get
          {
            return _filter;
          }
          set
          {
            __isset.filter = true;
            this._filter = value;
          }
        }

        public int Offset
        {
          get
          {
            return _offset;
          }
          set
          {
            __isset.offset = true;
            this._offset = value;
          }
        }

        public int MaxNotes
        {
          get
          {
            return _maxNotes;
          }
          set
          {
            __isset.maxNotes = true;
            this._maxNotes = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec ResultSpec
        {
          get
          {
            return _resultSpec;
          }
          set
          {
            __isset.resultSpec = true;
            this._resultSpec = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool filter;
          public bool offset;
          public bool maxNotes;
          public bool resultSpec;
        }

        public findNotesMetadata_args()
        {
        }

        public findNotesMetadata_args DeepCopy()
        {
          var tmp1495 = new findNotesMetadata_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1495.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1495.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Filter != null) && __isset.filter)
          {
            tmp1495.Filter = (global::Evernote.EDAM.NoteStore.NoteFilter)this.Filter.DeepCopy();
          }
          tmp1495.__isset.filter = this.__isset.filter;
          if(__isset.offset)
          {
            tmp1495.Offset = this.Offset;
          }
          tmp1495.__isset.offset = this.__isset.offset;
          if(__isset.maxNotes)
          {
            tmp1495.MaxNotes = this.MaxNotes;
          }
          tmp1495.__isset.maxNotes = this.__isset.maxNotes;
          if((ResultSpec != null) && __isset.resultSpec)
          {
            tmp1495.ResultSpec = (global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec)this.ResultSpec.DeepCopy();
          }
          tmp1495.__isset.resultSpec = this.__isset.resultSpec;
          return tmp1495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Filter = new global::Evernote.EDAM.NoteStore.NoteFilter();
                    await Filter.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    MaxNotes = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Struct)
                  {
                    ResultSpec = new global::Evernote.EDAM.NoteStore.NotesMetadataResultSpec();
                    await ResultSpec.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1496 = new TStruct("findNotesMetadata_args");
            await oprot.WriteStructBeginAsync(tmp1496, cancellationToken);
            var tmp1497 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1497.Name = "authenticationToken";
              tmp1497.Type = TType.String;
              tmp1497.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Filter != null) && __isset.filter)
            {
              tmp1497.Name = "filter";
              tmp1497.Type = TType.Struct;
              tmp1497.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
              await Filter.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.offset)
            {
              tmp1497.Name = "offset";
              tmp1497.Type = TType.I32;
              tmp1497.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
              await oprot.WriteI32Async(Offset, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.maxNotes)
            {
              tmp1497.Name = "maxNotes";
              tmp1497.Type = TType.I32;
              tmp1497.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
              await oprot.WriteI32Async(MaxNotes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              tmp1497.Name = "resultSpec";
              tmp1497.Type = TType.Struct;
              tmp1497.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
              await ResultSpec.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNotesMetadata_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (global::System.Object.Equals(Filter, other.Filter))))
            && ((__isset.offset == other.__isset.offset) && ((!__isset.offset) || (global::System.Object.Equals(Offset, other.Offset))))
            && ((__isset.maxNotes == other.__isset.maxNotes) && ((!__isset.maxNotes) || (global::System.Object.Equals(MaxNotes, other.MaxNotes))))
            && ((__isset.resultSpec == other.__isset.resultSpec) && ((!__isset.resultSpec) || (global::System.Object.Equals(ResultSpec, other.ResultSpec))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Filter != null) && __isset.filter)
            {
              hashcode = (hashcode * 397) + Filter.GetHashCode();
            }
            if(__isset.offset)
            {
              hashcode = (hashcode * 397) + Offset.GetHashCode();
            }
            if(__isset.maxNotes)
            {
              hashcode = (hashcode * 397) + MaxNotes.GetHashCode();
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              hashcode = (hashcode * 397) + ResultSpec.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1498 = new StringBuilder("findNotesMetadata_args(");
          int tmp1499 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1498);
          }
          if((Filter != null) && __isset.filter)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("Filter: ");
            Filter.ToString(tmp1498);
          }
          if(__isset.offset)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("Offset: ");
            Offset.ToString(tmp1498);
          }
          if(__isset.maxNotes)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("MaxNotes: ");
            MaxNotes.ToString(tmp1498);
          }
          if((ResultSpec != null) && __isset.resultSpec)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("ResultSpec: ");
            ResultSpec.ToString(tmp1498);
          }
          tmp1498.Append(')');
          return tmp1498.ToString();
        }
      }


      public partial class findNotesMetadata_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.NotesMetadataList _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.NoteStore.NotesMetadataList Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public findNotesMetadata_result()
        {
        }

        public findNotesMetadata_result DeepCopy()
        {
          var tmp1500 = new findNotesMetadata_result();
          if((Success != null) && __isset.success)
          {
            tmp1500.Success = (global::Evernote.EDAM.NoteStore.NotesMetadataList)this.Success.DeepCopy();
          }
          tmp1500.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1500.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1500.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1500.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1500.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1500.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1500.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.NotesMetadataList();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1501 = new TStruct("findNotesMetadata_result");
            await oprot.WriteStructBeginAsync(tmp1501, cancellationToken);
            var tmp1502 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1502.Name = "Success";
                tmp1502.Type = TType.Struct;
                tmp1502.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1502.Name = "UserException";
                tmp1502.Type = TType.Struct;
                tmp1502.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1502.Name = "SystemException";
                tmp1502.Type = TType.Struct;
                tmp1502.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1502.Name = "NotFoundException";
                tmp1502.Type = TType.Struct;
                tmp1502.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNotesMetadata_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1503 = new StringBuilder("findNotesMetadata_result(");
          int tmp1504 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1504++) { tmp1503.Append(", "); }
            tmp1503.Append("Success: ");
            Success.ToString(tmp1503);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1504++) { tmp1503.Append(", "); }
            tmp1503.Append("UserException: ");
            UserException.ToString(tmp1503);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1504++) { tmp1503.Append(", "); }
            tmp1503.Append("SystemException: ");
            SystemException.ToString(tmp1503);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1504++) { tmp1503.Append(", "); }
            tmp1503.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1503);
          }
          tmp1503.Append(')');
          return tmp1503.ToString();
        }
      }


      public partial class findNoteCounts_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.NoteFilter _filter;
        private bool _withTrash;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NoteFilter Filter
        {
          get
          {
            return _filter;
          }
          set
          {
            __isset.filter = true;
            this._filter = value;
          }
        }

        public bool WithTrash
        {
          get
          {
            return _withTrash;
          }
          set
          {
            __isset.withTrash = true;
            this._withTrash = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool filter;
          public bool withTrash;
        }

        public findNoteCounts_args()
        {
        }

        public findNoteCounts_args DeepCopy()
        {
          var tmp1505 = new findNoteCounts_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1505.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1505.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Filter != null) && __isset.filter)
          {
            tmp1505.Filter = (global::Evernote.EDAM.NoteStore.NoteFilter)this.Filter.DeepCopy();
          }
          tmp1505.__isset.filter = this.__isset.filter;
          if(__isset.withTrash)
          {
            tmp1505.WithTrash = this.WithTrash;
          }
          tmp1505.__isset.withTrash = this.__isset.withTrash;
          return tmp1505;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Filter = new global::Evernote.EDAM.NoteStore.NoteFilter();
                    await Filter.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    WithTrash = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1506 = new TStruct("findNoteCounts_args");
            await oprot.WriteStructBeginAsync(tmp1506, cancellationToken);
            var tmp1507 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1507.Name = "authenticationToken";
              tmp1507.Type = TType.String;
              tmp1507.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1507, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Filter != null) && __isset.filter)
            {
              tmp1507.Name = "filter";
              tmp1507.Type = TType.Struct;
              tmp1507.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1507, cancellationToken);
              await Filter.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withTrash)
            {
              tmp1507.Name = "withTrash";
              tmp1507.Type = TType.Bool;
              tmp1507.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1507, cancellationToken);
              await oprot.WriteBoolAsync(WithTrash, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNoteCounts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (global::System.Object.Equals(Filter, other.Filter))))
            && ((__isset.withTrash == other.__isset.withTrash) && ((!__isset.withTrash) || (global::System.Object.Equals(WithTrash, other.WithTrash))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Filter != null) && __isset.filter)
            {
              hashcode = (hashcode * 397) + Filter.GetHashCode();
            }
            if(__isset.withTrash)
            {
              hashcode = (hashcode * 397) + WithTrash.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1508 = new StringBuilder("findNoteCounts_args(");
          int tmp1509 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1508);
          }
          if((Filter != null) && __isset.filter)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("Filter: ");
            Filter.ToString(tmp1508);
          }
          if(__isset.withTrash)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("WithTrash: ");
            WithTrash.ToString(tmp1508);
          }
          tmp1508.Append(')');
          return tmp1508.ToString();
        }
      }


      public partial class findNoteCounts_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.NoteCollectionCounts _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.NoteStore.NoteCollectionCounts Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public findNoteCounts_result()
        {
        }

        public findNoteCounts_result DeepCopy()
        {
          var tmp1510 = new findNoteCounts_result();
          if((Success != null) && __isset.success)
          {
            tmp1510.Success = (global::Evernote.EDAM.NoteStore.NoteCollectionCounts)this.Success.DeepCopy();
          }
          tmp1510.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1510.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1510.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1510.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1510.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1510.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1510.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.NoteCollectionCounts();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1511 = new TStruct("findNoteCounts_result");
            await oprot.WriteStructBeginAsync(tmp1511, cancellationToken);
            var tmp1512 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1512.Name = "Success";
                tmp1512.Type = TType.Struct;
                tmp1512.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1512.Name = "UserException";
                tmp1512.Type = TType.Struct;
                tmp1512.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1512.Name = "SystemException";
                tmp1512.Type = TType.Struct;
                tmp1512.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1512.Name = "NotFoundException";
                tmp1512.Type = TType.Struct;
                tmp1512.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findNoteCounts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1513 = new StringBuilder("findNoteCounts_result(");
          int tmp1514 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("Success: ");
            Success.ToString(tmp1513);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("UserException: ");
            UserException.ToString(tmp1513);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("SystemException: ");
            SystemException.ToString(tmp1513);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1513);
          }
          tmp1513.Append(')');
          return tmp1513.ToString();
        }
      }


      public partial class getNoteWithResultSpec_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private global::Evernote.EDAM.NoteStore.NoteResultSpec _resultSpec;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NoteResultSpec ResultSpec
        {
          get
          {
            return _resultSpec;
          }
          set
          {
            __isset.resultSpec = true;
            this._resultSpec = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool resultSpec;
        }

        public getNoteWithResultSpec_args()
        {
        }

        public getNoteWithResultSpec_args DeepCopy()
        {
          var tmp1515 = new getNoteWithResultSpec_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1515.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1515.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1515.Guid = this.Guid;
          }
          tmp1515.__isset.guid = this.__isset.guid;
          if((ResultSpec != null) && __isset.resultSpec)
          {
            tmp1515.ResultSpec = (global::Evernote.EDAM.NoteStore.NoteResultSpec)this.ResultSpec.DeepCopy();
          }
          tmp1515.__isset.resultSpec = this.__isset.resultSpec;
          return tmp1515;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    ResultSpec = new global::Evernote.EDAM.NoteStore.NoteResultSpec();
                    await ResultSpec.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1516 = new TStruct("getNoteWithResultSpec_args");
            await oprot.WriteStructBeginAsync(tmp1516, cancellationToken);
            var tmp1517 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1517.Name = "authenticationToken";
              tmp1517.Type = TType.String;
              tmp1517.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1517.Name = "guid";
              tmp1517.Type = TType.String;
              tmp1517.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              tmp1517.Name = "resultSpec";
              tmp1517.Type = TType.Struct;
              tmp1517.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
              await ResultSpec.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteWithResultSpec_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.resultSpec == other.__isset.resultSpec) && ((!__isset.resultSpec) || (global::System.Object.Equals(ResultSpec, other.ResultSpec))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              hashcode = (hashcode * 397) + ResultSpec.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1518 = new StringBuilder("getNoteWithResultSpec_args(");
          int tmp1519 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1518);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("Guid: ");
            Guid.ToString(tmp1518);
          }
          if((ResultSpec != null) && __isset.resultSpec)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("ResultSpec: ");
            ResultSpec.ToString(tmp1518);
          }
          tmp1518.Append(')');
          return tmp1518.ToString();
        }
      }


      public partial class getNoteWithResultSpec_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteWithResultSpec_result()
        {
        }

        public getNoteWithResultSpec_result DeepCopy()
        {
          var tmp1520 = new getNoteWithResultSpec_result();
          if((Success != null) && __isset.success)
          {
            tmp1520.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1520.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1520.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1520.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1520.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1520.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1520.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1520.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1520;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1521 = new TStruct("getNoteWithResultSpec_result");
            await oprot.WriteStructBeginAsync(tmp1521, cancellationToken);
            var tmp1522 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1522.Name = "Success";
                tmp1522.Type = TType.Struct;
                tmp1522.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1522.Name = "UserException";
                tmp1522.Type = TType.Struct;
                tmp1522.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1522.Name = "SystemException";
                tmp1522.Type = TType.Struct;
                tmp1522.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1522.Name = "NotFoundException";
                tmp1522.Type = TType.Struct;
                tmp1522.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteWithResultSpec_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1523 = new StringBuilder("getNoteWithResultSpec_result(");
          int tmp1524 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1524++) { tmp1523.Append(", "); }
            tmp1523.Append("Success: ");
            Success.ToString(tmp1523);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1524++) { tmp1523.Append(", "); }
            tmp1523.Append("UserException: ");
            UserException.ToString(tmp1523);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1524++) { tmp1523.Append(", "); }
            tmp1523.Append("SystemException: ");
            SystemException.ToString(tmp1523);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1524++) { tmp1523.Append(", "); }
            tmp1523.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1523);
          }
          tmp1523.Append(')');
          return tmp1523.ToString();
        }
      }


      public partial class getNote_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private bool _withContent;
        private bool _withResourcesData;
        private bool _withResourcesRecognition;
        private bool _withResourcesAlternateData;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public bool WithContent
        {
          get
          {
            return _withContent;
          }
          set
          {
            __isset.withContent = true;
            this._withContent = value;
          }
        }

        public bool WithResourcesData
        {
          get
          {
            return _withResourcesData;
          }
          set
          {
            __isset.withResourcesData = true;
            this._withResourcesData = value;
          }
        }

        public bool WithResourcesRecognition
        {
          get
          {
            return _withResourcesRecognition;
          }
          set
          {
            __isset.withResourcesRecognition = true;
            this._withResourcesRecognition = value;
          }
        }

        public bool WithResourcesAlternateData
        {
          get
          {
            return _withResourcesAlternateData;
          }
          set
          {
            __isset.withResourcesAlternateData = true;
            this._withResourcesAlternateData = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool withContent;
          public bool withResourcesData;
          public bool withResourcesRecognition;
          public bool withResourcesAlternateData;
        }

        public getNote_args()
        {
        }

        public getNote_args DeepCopy()
        {
          var tmp1525 = new getNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1525.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1525.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1525.Guid = this.Guid;
          }
          tmp1525.__isset.guid = this.__isset.guid;
          if(__isset.withContent)
          {
            tmp1525.WithContent = this.WithContent;
          }
          tmp1525.__isset.withContent = this.__isset.withContent;
          if(__isset.withResourcesData)
          {
            tmp1525.WithResourcesData = this.WithResourcesData;
          }
          tmp1525.__isset.withResourcesData = this.__isset.withResourcesData;
          if(__isset.withResourcesRecognition)
          {
            tmp1525.WithResourcesRecognition = this.WithResourcesRecognition;
          }
          tmp1525.__isset.withResourcesRecognition = this.__isset.withResourcesRecognition;
          if(__isset.withResourcesAlternateData)
          {
            tmp1525.WithResourcesAlternateData = this.WithResourcesAlternateData;
          }
          tmp1525.__isset.withResourcesAlternateData = this.__isset.withResourcesAlternateData;
          return tmp1525;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    WithContent = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesRecognition = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesAlternateData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1526 = new TStruct("getNote_args");
            await oprot.WriteStructBeginAsync(tmp1526, cancellationToken);
            var tmp1527 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1527.Name = "authenticationToken";
              tmp1527.Type = TType.String;
              tmp1527.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1527.Name = "guid";
              tmp1527.Type = TType.String;
              tmp1527.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withContent)
            {
              tmp1527.Name = "withContent";
              tmp1527.Type = TType.Bool;
              tmp1527.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteBoolAsync(WithContent, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesData)
            {
              tmp1527.Name = "withResourcesData";
              tmp1527.Type = TType.Bool;
              tmp1527.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesRecognition)
            {
              tmp1527.Name = "withResourcesRecognition";
              tmp1527.Type = TType.Bool;
              tmp1527.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesRecognition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesAlternateData)
            {
              tmp1527.Name = "withResourcesAlternateData";
              tmp1527.Type = TType.Bool;
              tmp1527.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesAlternateData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.withContent == other.__isset.withContent) && ((!__isset.withContent) || (global::System.Object.Equals(WithContent, other.WithContent))))
            && ((__isset.withResourcesData == other.__isset.withResourcesData) && ((!__isset.withResourcesData) || (global::System.Object.Equals(WithResourcesData, other.WithResourcesData))))
            && ((__isset.withResourcesRecognition == other.__isset.withResourcesRecognition) && ((!__isset.withResourcesRecognition) || (global::System.Object.Equals(WithResourcesRecognition, other.WithResourcesRecognition))))
            && ((__isset.withResourcesAlternateData == other.__isset.withResourcesAlternateData) && ((!__isset.withResourcesAlternateData) || (global::System.Object.Equals(WithResourcesAlternateData, other.WithResourcesAlternateData))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if(__isset.withContent)
            {
              hashcode = (hashcode * 397) + WithContent.GetHashCode();
            }
            if(__isset.withResourcesData)
            {
              hashcode = (hashcode * 397) + WithResourcesData.GetHashCode();
            }
            if(__isset.withResourcesRecognition)
            {
              hashcode = (hashcode * 397) + WithResourcesRecognition.GetHashCode();
            }
            if(__isset.withResourcesAlternateData)
            {
              hashcode = (hashcode * 397) + WithResourcesAlternateData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1528 = new StringBuilder("getNote_args(");
          int tmp1529 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1528);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("Guid: ");
            Guid.ToString(tmp1528);
          }
          if(__isset.withContent)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("WithContent: ");
            WithContent.ToString(tmp1528);
          }
          if(__isset.withResourcesData)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("WithResourcesData: ");
            WithResourcesData.ToString(tmp1528);
          }
          if(__isset.withResourcesRecognition)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("WithResourcesRecognition: ");
            WithResourcesRecognition.ToString(tmp1528);
          }
          if(__isset.withResourcesAlternateData)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("WithResourcesAlternateData: ");
            WithResourcesAlternateData.ToString(tmp1528);
          }
          tmp1528.Append(')');
          return tmp1528.ToString();
        }
      }


      public partial class getNote_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNote_result()
        {
        }

        public getNote_result DeepCopy()
        {
          var tmp1530 = new getNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1530.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1530.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1530.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1530.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1530.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1530.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1530.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1530.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1531 = new TStruct("getNote_result");
            await oprot.WriteStructBeginAsync(tmp1531, cancellationToken);
            var tmp1532 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1532.Name = "Success";
                tmp1532.Type = TType.Struct;
                tmp1532.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1532.Name = "UserException";
                tmp1532.Type = TType.Struct;
                tmp1532.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1532.Name = "SystemException";
                tmp1532.Type = TType.Struct;
                tmp1532.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1532.Name = "NotFoundException";
                tmp1532.Type = TType.Struct;
                tmp1532.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1532, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1533 = new StringBuilder("getNote_result(");
          int tmp1534 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("Success: ");
            Success.ToString(tmp1533);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("UserException: ");
            UserException.ToString(tmp1533);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("SystemException: ");
            SystemException.ToString(tmp1533);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1534++) { tmp1533.Append(", "); }
            tmp1533.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1533);
          }
          tmp1533.Append(')');
          return tmp1533.ToString();
        }
      }


      public partial class getNoteApplicationData_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getNoteApplicationData_args()
        {
        }

        public getNoteApplicationData_args DeepCopy()
        {
          var tmp1535 = new getNoteApplicationData_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1535.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1535.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1535.Guid = this.Guid;
          }
          tmp1535.__isset.guid = this.__isset.guid;
          return tmp1535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1536 = new TStruct("getNoteApplicationData_args");
            await oprot.WriteStructBeginAsync(tmp1536, cancellationToken);
            var tmp1537 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1537.Name = "authenticationToken";
              tmp1537.Type = TType.String;
              tmp1537.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1537, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1537.Name = "guid";
              tmp1537.Type = TType.String;
              tmp1537.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1537, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteApplicationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1538 = new StringBuilder("getNoteApplicationData_args(");
          int tmp1539 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1539++) { tmp1538.Append(", "); }
            tmp1538.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1538);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1539++) { tmp1538.Append(", "); }
            tmp1538.Append("Guid: ");
            Guid.ToString(tmp1538);
          }
          tmp1538.Append(')');
          return tmp1538.ToString();
        }
      }


      public partial class getNoteApplicationData_result : TBase
      {
        private global::Evernote.EDAM.Type.LazyMap _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.LazyMap Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteApplicationData_result()
        {
        }

        public getNoteApplicationData_result DeepCopy()
        {
          var tmp1540 = new getNoteApplicationData_result();
          if((Success != null) && __isset.success)
          {
            tmp1540.Success = (global::Evernote.EDAM.Type.LazyMap)this.Success.DeepCopy();
          }
          tmp1540.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1540.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1540.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1540.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1540.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1540.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1540.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.LazyMap();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1541 = new TStruct("getNoteApplicationData_result");
            await oprot.WriteStructBeginAsync(tmp1541, cancellationToken);
            var tmp1542 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1542.Name = "Success";
                tmp1542.Type = TType.Struct;
                tmp1542.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1542.Name = "UserException";
                tmp1542.Type = TType.Struct;
                tmp1542.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1542.Name = "SystemException";
                tmp1542.Type = TType.Struct;
                tmp1542.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1542.Name = "NotFoundException";
                tmp1542.Type = TType.Struct;
                tmp1542.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1542, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteApplicationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1543 = new StringBuilder("getNoteApplicationData_result(");
          int tmp1544 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("Success: ");
            Success.ToString(tmp1543);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("UserException: ");
            UserException.ToString(tmp1543);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("SystemException: ");
            SystemException.ToString(tmp1543);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1544++) { tmp1543.Append(", "); }
            tmp1543.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1543);
          }
          tmp1543.Append(')');
          return tmp1543.ToString();
        }
      }


      public partial class getNoteApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
        }

        public getNoteApplicationDataEntry_args()
        {
        }

        public getNoteApplicationDataEntry_args DeepCopy()
        {
          var tmp1545 = new getNoteApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1545.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1545.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1545.Guid = this.Guid;
          }
          tmp1545.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1545.Key = this.Key;
          }
          tmp1545.__isset.key = this.__isset.key;
          return tmp1545;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1546 = new TStruct("getNoteApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1546, cancellationToken);
            var tmp1547 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1547.Name = "authenticationToken";
              tmp1547.Type = TType.String;
              tmp1547.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1547, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1547.Name = "guid";
              tmp1547.Type = TType.String;
              tmp1547.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1547, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1547.Name = "key";
              tmp1547.Type = TType.String;
              tmp1547.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1547, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1548 = new StringBuilder("getNoteApplicationDataEntry_args(");
          int tmp1549 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1549++) { tmp1548.Append(", "); }
            tmp1548.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1548);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1549++) { tmp1548.Append(", "); }
            tmp1548.Append("Guid: ");
            Guid.ToString(tmp1548);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1549++) { tmp1548.Append(", "); }
            tmp1548.Append("Key: ");
            Key.ToString(tmp1548);
          }
          tmp1548.Append(')');
          return tmp1548.ToString();
        }
      }


      public partial class getNoteApplicationDataEntry_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteApplicationDataEntry_result()
        {
        }

        public getNoteApplicationDataEntry_result DeepCopy()
        {
          var tmp1550 = new getNoteApplicationDataEntry_result();
          if((Success != null) && __isset.success)
          {
            tmp1550.Success = this.Success;
          }
          tmp1550.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1550.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1550.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1550.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1550.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1550.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1550.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1550;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1551 = new TStruct("getNoteApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1551, cancellationToken);
            var tmp1552 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1552.Name = "Success";
                tmp1552.Type = TType.String;
                tmp1552.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1552.Name = "UserException";
                tmp1552.Type = TType.Struct;
                tmp1552.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1552.Name = "SystemException";
                tmp1552.Type = TType.Struct;
                tmp1552.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1552.Name = "NotFoundException";
                tmp1552.Type = TType.Struct;
                tmp1552.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1552, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1553 = new StringBuilder("getNoteApplicationDataEntry_result(");
          int tmp1554 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("Success: ");
            Success.ToString(tmp1553);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("UserException: ");
            UserException.ToString(tmp1553);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("SystemException: ");
            SystemException.ToString(tmp1553);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1554++) { tmp1553.Append(", "); }
            tmp1553.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1553);
          }
          tmp1553.Append(')');
          return tmp1553.ToString();
        }
      }


      public partial class setNoteApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;
        private string _value;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public string Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
          public bool @value;
        }

        public setNoteApplicationDataEntry_args()
        {
        }

        public setNoteApplicationDataEntry_args DeepCopy()
        {
          var tmp1555 = new setNoteApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1555.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1555.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1555.Guid = this.Guid;
          }
          tmp1555.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1555.Key = this.Key;
          }
          tmp1555.__isset.key = this.__isset.key;
          if((Value != null) && __isset.@value)
          {
            tmp1555.Value = this.Value;
          }
          tmp1555.__isset.@value = this.__isset.@value;
          return tmp1555;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Value = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1556 = new TStruct("setNoteApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1556, cancellationToken);
            var tmp1557 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1557.Name = "authenticationToken";
              tmp1557.Type = TType.String;
              tmp1557.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1557, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1557.Name = "guid";
              tmp1557.Type = TType.String;
              tmp1557.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1557, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1557.Name = "key";
              tmp1557.Type = TType.String;
              tmp1557.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1557, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1557.Name = "value";
              tmp1557.Type = TType.String;
              tmp1557.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1557, cancellationToken);
              await oprot.WriteStringAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNoteApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1558 = new StringBuilder("setNoteApplicationDataEntry_args(");
          int tmp1559 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1559++) { tmp1558.Append(", "); }
            tmp1558.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1558);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1559++) { tmp1558.Append(", "); }
            tmp1558.Append("Guid: ");
            Guid.ToString(tmp1558);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1559++) { tmp1558.Append(", "); }
            tmp1558.Append("Key: ");
            Key.ToString(tmp1558);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1559++) { tmp1558.Append(", "); }
            tmp1558.Append("Value: ");
            Value.ToString(tmp1558);
          }
          tmp1558.Append(')');
          return tmp1558.ToString();
        }
      }


      public partial class setNoteApplicationDataEntry_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public setNoteApplicationDataEntry_result()
        {
        }

        public setNoteApplicationDataEntry_result DeepCopy()
        {
          var tmp1560 = new setNoteApplicationDataEntry_result();
          if(__isset.success)
          {
            tmp1560.Success = this.Success;
          }
          tmp1560.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1560.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1560.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1560.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1560.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1560.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1560.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1560;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1561 = new TStruct("setNoteApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1561, cancellationToken);
            var tmp1562 = new TField();

            if(this.__isset.success)
            {
              tmp1562.Name = "Success";
              tmp1562.Type = TType.I32;
              tmp1562.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1562, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1562.Name = "UserException";
                tmp1562.Type = TType.Struct;
                tmp1562.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1562, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1562.Name = "SystemException";
                tmp1562.Type = TType.Struct;
                tmp1562.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1562, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1562.Name = "NotFoundException";
                tmp1562.Type = TType.Struct;
                tmp1562.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1562, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNoteApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1563 = new StringBuilder("setNoteApplicationDataEntry_result(");
          int tmp1564 = 0;
          if(__isset.success)
          {
            if(0 < tmp1564++) { tmp1563.Append(", "); }
            tmp1563.Append("Success: ");
            Success.ToString(tmp1563);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1564++) { tmp1563.Append(", "); }
            tmp1563.Append("UserException: ");
            UserException.ToString(tmp1563);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1564++) { tmp1563.Append(", "); }
            tmp1563.Append("SystemException: ");
            SystemException.ToString(tmp1563);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1564++) { tmp1563.Append(", "); }
            tmp1563.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1563);
          }
          tmp1563.Append(')');
          return tmp1563.ToString();
        }
      }


      public partial class unsetNoteApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
        }

        public unsetNoteApplicationDataEntry_args()
        {
        }

        public unsetNoteApplicationDataEntry_args DeepCopy()
        {
          var tmp1565 = new unsetNoteApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1565.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1565.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1565.Guid = this.Guid;
          }
          tmp1565.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1565.Key = this.Key;
          }
          tmp1565.__isset.key = this.__isset.key;
          return tmp1565;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1566 = new TStruct("unsetNoteApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1566, cancellationToken);
            var tmp1567 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1567.Name = "authenticationToken";
              tmp1567.Type = TType.String;
              tmp1567.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1567, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1567.Name = "guid";
              tmp1567.Type = TType.String;
              tmp1567.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1567, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1567.Name = "key";
              tmp1567.Type = TType.String;
              tmp1567.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1567, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsetNoteApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1568 = new StringBuilder("unsetNoteApplicationDataEntry_args(");
          int tmp1569 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1569++) { tmp1568.Append(", "); }
            tmp1568.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1568);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1569++) { tmp1568.Append(", "); }
            tmp1568.Append("Guid: ");
            Guid.ToString(tmp1568);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1569++) { tmp1568.Append(", "); }
            tmp1568.Append("Key: ");
            Key.ToString(tmp1568);
          }
          tmp1568.Append(')');
          return tmp1568.ToString();
        }
      }


      public partial class unsetNoteApplicationDataEntry_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public unsetNoteApplicationDataEntry_result()
        {
        }

        public unsetNoteApplicationDataEntry_result DeepCopy()
        {
          var tmp1570 = new unsetNoteApplicationDataEntry_result();
          if(__isset.success)
          {
            tmp1570.Success = this.Success;
          }
          tmp1570.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1570.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1570.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1570.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1570.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1570.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1570.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1570;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1571 = new TStruct("unsetNoteApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1571, cancellationToken);
            var tmp1572 = new TField();

            if(this.__isset.success)
            {
              tmp1572.Name = "Success";
              tmp1572.Type = TType.I32;
              tmp1572.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1572.Name = "UserException";
                tmp1572.Type = TType.Struct;
                tmp1572.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1572.Name = "SystemException";
                tmp1572.Type = TType.Struct;
                tmp1572.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1572.Name = "NotFoundException";
                tmp1572.Type = TType.Struct;
                tmp1572.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1572, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsetNoteApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1573 = new StringBuilder("unsetNoteApplicationDataEntry_result(");
          int tmp1574 = 0;
          if(__isset.success)
          {
            if(0 < tmp1574++) { tmp1573.Append(", "); }
            tmp1573.Append("Success: ");
            Success.ToString(tmp1573);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1574++) { tmp1573.Append(", "); }
            tmp1573.Append("UserException: ");
            UserException.ToString(tmp1573);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1574++) { tmp1573.Append(", "); }
            tmp1573.Append("SystemException: ");
            SystemException.ToString(tmp1573);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1574++) { tmp1573.Append(", "); }
            tmp1573.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1573);
          }
          tmp1573.Append(')');
          return tmp1573.ToString();
        }
      }


      public partial class getNoteContent_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getNoteContent_args()
        {
        }

        public getNoteContent_args DeepCopy()
        {
          var tmp1575 = new getNoteContent_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1575.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1575.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1575.Guid = this.Guid;
          }
          tmp1575.__isset.guid = this.__isset.guid;
          return tmp1575;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1576 = new TStruct("getNoteContent_args");
            await oprot.WriteStructBeginAsync(tmp1576, cancellationToken);
            var tmp1577 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1577.Name = "authenticationToken";
              tmp1577.Type = TType.String;
              tmp1577.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1577, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1577.Name = "guid";
              tmp1577.Type = TType.String;
              tmp1577.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1577, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteContent_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1578 = new StringBuilder("getNoteContent_args(");
          int tmp1579 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1579++) { tmp1578.Append(", "); }
            tmp1578.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1578);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1579++) { tmp1578.Append(", "); }
            tmp1578.Append("Guid: ");
            Guid.ToString(tmp1578);
          }
          tmp1578.Append(')');
          return tmp1578.ToString();
        }
      }


      public partial class getNoteContent_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteContent_result()
        {
        }

        public getNoteContent_result DeepCopy()
        {
          var tmp1580 = new getNoteContent_result();
          if((Success != null) && __isset.success)
          {
            tmp1580.Success = this.Success;
          }
          tmp1580.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1580.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1580.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1580.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1580.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1580.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1580.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1580;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1581 = new TStruct("getNoteContent_result");
            await oprot.WriteStructBeginAsync(tmp1581, cancellationToken);
            var tmp1582 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1582.Name = "Success";
                tmp1582.Type = TType.String;
                tmp1582.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1582.Name = "UserException";
                tmp1582.Type = TType.Struct;
                tmp1582.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1582.Name = "SystemException";
                tmp1582.Type = TType.Struct;
                tmp1582.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1582.Name = "NotFoundException";
                tmp1582.Type = TType.Struct;
                tmp1582.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1582, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteContent_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1583 = new StringBuilder("getNoteContent_result(");
          int tmp1584 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1584++) { tmp1583.Append(", "); }
            tmp1583.Append("Success: ");
            Success.ToString(tmp1583);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1584++) { tmp1583.Append(", "); }
            tmp1583.Append("UserException: ");
            UserException.ToString(tmp1583);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1584++) { tmp1583.Append(", "); }
            tmp1583.Append("SystemException: ");
            SystemException.ToString(tmp1583);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1584++) { tmp1583.Append(", "); }
            tmp1583.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1583);
          }
          tmp1583.Append(')');
          return tmp1583.ToString();
        }
      }


      public partial class getNoteSearchText_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private bool _noteOnly;
        private bool _tokenizeForIndexing;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public bool NoteOnly
        {
          get
          {
            return _noteOnly;
          }
          set
          {
            __isset.noteOnly = true;
            this._noteOnly = value;
          }
        }

        public bool TokenizeForIndexing
        {
          get
          {
            return _tokenizeForIndexing;
          }
          set
          {
            __isset.tokenizeForIndexing = true;
            this._tokenizeForIndexing = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool noteOnly;
          public bool tokenizeForIndexing;
        }

        public getNoteSearchText_args()
        {
        }

        public getNoteSearchText_args DeepCopy()
        {
          var tmp1585 = new getNoteSearchText_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1585.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1585.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1585.Guid = this.Guid;
          }
          tmp1585.__isset.guid = this.__isset.guid;
          if(__isset.noteOnly)
          {
            tmp1585.NoteOnly = this.NoteOnly;
          }
          tmp1585.__isset.noteOnly = this.__isset.noteOnly;
          if(__isset.tokenizeForIndexing)
          {
            tmp1585.TokenizeForIndexing = this.TokenizeForIndexing;
          }
          tmp1585.__isset.tokenizeForIndexing = this.__isset.tokenizeForIndexing;
          return tmp1585;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    NoteOnly = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    TokenizeForIndexing = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1586 = new TStruct("getNoteSearchText_args");
            await oprot.WriteStructBeginAsync(tmp1586, cancellationToken);
            var tmp1587 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1587.Name = "authenticationToken";
              tmp1587.Type = TType.String;
              tmp1587.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1587, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1587.Name = "guid";
              tmp1587.Type = TType.String;
              tmp1587.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1587, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.noteOnly)
            {
              tmp1587.Name = "noteOnly";
              tmp1587.Type = TType.Bool;
              tmp1587.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1587, cancellationToken);
              await oprot.WriteBoolAsync(NoteOnly, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.tokenizeForIndexing)
            {
              tmp1587.Name = "tokenizeForIndexing";
              tmp1587.Type = TType.Bool;
              tmp1587.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1587, cancellationToken);
              await oprot.WriteBoolAsync(TokenizeForIndexing, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteSearchText_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.noteOnly == other.__isset.noteOnly) && ((!__isset.noteOnly) || (global::System.Object.Equals(NoteOnly, other.NoteOnly))))
            && ((__isset.tokenizeForIndexing == other.__isset.tokenizeForIndexing) && ((!__isset.tokenizeForIndexing) || (global::System.Object.Equals(TokenizeForIndexing, other.TokenizeForIndexing))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if(__isset.noteOnly)
            {
              hashcode = (hashcode * 397) + NoteOnly.GetHashCode();
            }
            if(__isset.tokenizeForIndexing)
            {
              hashcode = (hashcode * 397) + TokenizeForIndexing.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1588 = new StringBuilder("getNoteSearchText_args(");
          int tmp1589 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1589++) { tmp1588.Append(", "); }
            tmp1588.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1588);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1589++) { tmp1588.Append(", "); }
            tmp1588.Append("Guid: ");
            Guid.ToString(tmp1588);
          }
          if(__isset.noteOnly)
          {
            if(0 < tmp1589++) { tmp1588.Append(", "); }
            tmp1588.Append("NoteOnly: ");
            NoteOnly.ToString(tmp1588);
          }
          if(__isset.tokenizeForIndexing)
          {
            if(0 < tmp1589++) { tmp1588.Append(", "); }
            tmp1588.Append("TokenizeForIndexing: ");
            TokenizeForIndexing.ToString(tmp1588);
          }
          tmp1588.Append(')');
          return tmp1588.ToString();
        }
      }


      public partial class getNoteSearchText_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteSearchText_result()
        {
        }

        public getNoteSearchText_result DeepCopy()
        {
          var tmp1590 = new getNoteSearchText_result();
          if((Success != null) && __isset.success)
          {
            tmp1590.Success = this.Success;
          }
          tmp1590.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1590.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1590.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1590.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1590.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1590.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1590.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1590;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1591 = new TStruct("getNoteSearchText_result");
            await oprot.WriteStructBeginAsync(tmp1591, cancellationToken);
            var tmp1592 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1592.Name = "Success";
                tmp1592.Type = TType.String;
                tmp1592.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1592.Name = "UserException";
                tmp1592.Type = TType.Struct;
                tmp1592.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1592.Name = "SystemException";
                tmp1592.Type = TType.Struct;
                tmp1592.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1592.Name = "NotFoundException";
                tmp1592.Type = TType.Struct;
                tmp1592.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1592, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteSearchText_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1593 = new StringBuilder("getNoteSearchText_result(");
          int tmp1594 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1594++) { tmp1593.Append(", "); }
            tmp1593.Append("Success: ");
            Success.ToString(tmp1593);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1594++) { tmp1593.Append(", "); }
            tmp1593.Append("UserException: ");
            UserException.ToString(tmp1593);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1594++) { tmp1593.Append(", "); }
            tmp1593.Append("SystemException: ");
            SystemException.ToString(tmp1593);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1594++) { tmp1593.Append(", "); }
            tmp1593.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1593);
          }
          tmp1593.Append(')');
          return tmp1593.ToString();
        }
      }


      public partial class getResourceSearchText_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceSearchText_args()
        {
        }

        public getResourceSearchText_args DeepCopy()
        {
          var tmp1595 = new getResourceSearchText_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1595.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1595.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1595.Guid = this.Guid;
          }
          tmp1595.__isset.guid = this.__isset.guid;
          return tmp1595;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1596 = new TStruct("getResourceSearchText_args");
            await oprot.WriteStructBeginAsync(tmp1596, cancellationToken);
            var tmp1597 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1597.Name = "authenticationToken";
              tmp1597.Type = TType.String;
              tmp1597.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1597, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1597.Name = "guid";
              tmp1597.Type = TType.String;
              tmp1597.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1597, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceSearchText_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1598 = new StringBuilder("getResourceSearchText_args(");
          int tmp1599 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1599++) { tmp1598.Append(", "); }
            tmp1598.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1598);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1599++) { tmp1598.Append(", "); }
            tmp1598.Append("Guid: ");
            Guid.ToString(tmp1598);
          }
          tmp1598.Append(')');
          return tmp1598.ToString();
        }
      }


      public partial class getResourceSearchText_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceSearchText_result()
        {
        }

        public getResourceSearchText_result DeepCopy()
        {
          var tmp1600 = new getResourceSearchText_result();
          if((Success != null) && __isset.success)
          {
            tmp1600.Success = this.Success;
          }
          tmp1600.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1600.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1600.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1600.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1600.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1600.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1600.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1600;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1601 = new TStruct("getResourceSearchText_result");
            await oprot.WriteStructBeginAsync(tmp1601, cancellationToken);
            var tmp1602 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1602.Name = "Success";
                tmp1602.Type = TType.String;
                tmp1602.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1602, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1602.Name = "UserException";
                tmp1602.Type = TType.Struct;
                tmp1602.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1602, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1602.Name = "SystemException";
                tmp1602.Type = TType.Struct;
                tmp1602.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1602, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1602.Name = "NotFoundException";
                tmp1602.Type = TType.Struct;
                tmp1602.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1602, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceSearchText_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1603 = new StringBuilder("getResourceSearchText_result(");
          int tmp1604 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1604++) { tmp1603.Append(", "); }
            tmp1603.Append("Success: ");
            Success.ToString(tmp1603);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1604++) { tmp1603.Append(", "); }
            tmp1603.Append("UserException: ");
            UserException.ToString(tmp1603);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1604++) { tmp1603.Append(", "); }
            tmp1603.Append("SystemException: ");
            SystemException.ToString(tmp1603);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1604++) { tmp1603.Append(", "); }
            tmp1603.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1603);
          }
          tmp1603.Append(')');
          return tmp1603.ToString();
        }
      }


      public partial class getNoteTagNames_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getNoteTagNames_args()
        {
        }

        public getNoteTagNames_args DeepCopy()
        {
          var tmp1605 = new getNoteTagNames_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1605.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1605.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1605.Guid = this.Guid;
          }
          tmp1605.__isset.guid = this.__isset.guid;
          return tmp1605;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1606 = new TStruct("getNoteTagNames_args");
            await oprot.WriteStructBeginAsync(tmp1606, cancellationToken);
            var tmp1607 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1607.Name = "authenticationToken";
              tmp1607.Type = TType.String;
              tmp1607.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1607, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1607.Name = "guid";
              tmp1607.Type = TType.String;
              tmp1607.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1607, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteTagNames_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1608 = new StringBuilder("getNoteTagNames_args(");
          int tmp1609 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1609++) { tmp1608.Append(", "); }
            tmp1608.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1608);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1609++) { tmp1608.Append(", "); }
            tmp1608.Append("Guid: ");
            Guid.ToString(tmp1608);
          }
          tmp1608.Append(')');
          return tmp1608.ToString();
        }
      }


      public partial class getNoteTagNames_result : TBase
      {
        private List<string> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public List<string> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteTagNames_result()
        {
        }

        public getNoteTagNames_result DeepCopy()
        {
          var tmp1610 = new getNoteTagNames_result();
          if((Success != null) && __isset.success)
          {
            tmp1610.Success = this.Success.DeepCopy();
          }
          tmp1610.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1610.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1610.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1610.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1610.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1610.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1610.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1610;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1611 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list1611.Count);
                      for(int _i1612 = 0; _i1612 < _list1611.Count; ++_i1612)
                      {
                        string _elem1613;
                        _elem1613 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem1613);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1614 = new TStruct("getNoteTagNames_result");
            await oprot.WriteStructBeginAsync(tmp1614, cancellationToken);
            var tmp1615 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1615.Name = "Success";
                tmp1615.Type = TType.List;
                tmp1615.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                  foreach (string _iter1616 in Success)
                  {
                    await oprot.WriteStringAsync(_iter1616, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1615.Name = "UserException";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1615.Name = "SystemException";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1615.Name = "NotFoundException";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteTagNames_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1617 = new StringBuilder("getNoteTagNames_result(");
          int tmp1618 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("Success: ");
            Success.ToString(tmp1617);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("UserException: ");
            UserException.ToString(tmp1617);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("SystemException: ");
            SystemException.ToString(tmp1617);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1618++) { tmp1617.Append(", "); }
            tmp1617.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1617);
          }
          tmp1617.Append(')');
          return tmp1617.ToString();
        }
      }


      public partial class createNote_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Note _note;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Note Note
        {
          get
          {
            return _note;
          }
          set
          {
            __isset.note = true;
            this._note = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool note;
        }

        public createNote_args()
        {
        }

        public createNote_args DeepCopy()
        {
          var tmp1619 = new createNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1619.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1619.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Note != null) && __isset.note)
          {
            tmp1619.Note = (global::Evernote.EDAM.Type.Note)this.Note.DeepCopy();
          }
          tmp1619.__isset.note = this.__isset.note;
          return tmp1619;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Note = new global::Evernote.EDAM.Type.Note();
                    await Note.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1620 = new TStruct("createNote_args");
            await oprot.WriteStructBeginAsync(tmp1620, cancellationToken);
            var tmp1621 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1621.Name = "authenticationToken";
              tmp1621.Type = TType.String;
              tmp1621.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1621, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Note != null) && __isset.note)
            {
              tmp1621.Name = "note";
              tmp1621.Type = TType.Struct;
              tmp1621.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1621, cancellationToken);
              await Note.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.note == other.__isset.note) && ((!__isset.note) || (global::System.Object.Equals(Note, other.Note))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Note != null) && __isset.note)
            {
              hashcode = (hashcode * 397) + Note.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1622 = new StringBuilder("createNote_args(");
          int tmp1623 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1623++) { tmp1622.Append(", "); }
            tmp1622.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1622);
          }
          if((Note != null) && __isset.note)
          {
            if(0 < tmp1623++) { tmp1622.Append(", "); }
            tmp1622.Append("Note: ");
            Note.ToString(tmp1622);
          }
          tmp1622.Append(')');
          return tmp1622.ToString();
        }
      }


      public partial class createNote_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public createNote_result()
        {
        }

        public createNote_result DeepCopy()
        {
          var tmp1624 = new createNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1624.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1624.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1624.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1624.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1624.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1624.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1624.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1624.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1624;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1625 = new TStruct("createNote_result");
            await oprot.WriteStructBeginAsync(tmp1625, cancellationToken);
            var tmp1626 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1626.Name = "Success";
                tmp1626.Type = TType.Struct;
                tmp1626.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1626.Name = "UserException";
                tmp1626.Type = TType.Struct;
                tmp1626.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1626.Name = "SystemException";
                tmp1626.Type = TType.Struct;
                tmp1626.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1626.Name = "NotFoundException";
                tmp1626.Type = TType.Struct;
                tmp1626.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1626, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1627 = new StringBuilder("createNote_result(");
          int tmp1628 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("Success: ");
            Success.ToString(tmp1627);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("UserException: ");
            UserException.ToString(tmp1627);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("SystemException: ");
            SystemException.ToString(tmp1627);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1628++) { tmp1627.Append(", "); }
            tmp1627.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1627);
          }
          tmp1627.Append(')');
          return tmp1627.ToString();
        }
      }


      public partial class updateNote_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Note _note;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Note Note
        {
          get
          {
            return _note;
          }
          set
          {
            __isset.note = true;
            this._note = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool note;
        }

        public updateNote_args()
        {
        }

        public updateNote_args DeepCopy()
        {
          var tmp1629 = new updateNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1629.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1629.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Note != null) && __isset.note)
          {
            tmp1629.Note = (global::Evernote.EDAM.Type.Note)this.Note.DeepCopy();
          }
          tmp1629.__isset.note = this.__isset.note;
          return tmp1629;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Note = new global::Evernote.EDAM.Type.Note();
                    await Note.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1630 = new TStruct("updateNote_args");
            await oprot.WriteStructBeginAsync(tmp1630, cancellationToken);
            var tmp1631 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1631.Name = "authenticationToken";
              tmp1631.Type = TType.String;
              tmp1631.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Note != null) && __isset.note)
            {
              tmp1631.Name = "note";
              tmp1631.Type = TType.Struct;
              tmp1631.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1631, cancellationToken);
              await Note.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.note == other.__isset.note) && ((!__isset.note) || (global::System.Object.Equals(Note, other.Note))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Note != null) && __isset.note)
            {
              hashcode = (hashcode * 397) + Note.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1632 = new StringBuilder("updateNote_args(");
          int tmp1633 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1633++) { tmp1632.Append(", "); }
            tmp1632.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1632);
          }
          if((Note != null) && __isset.note)
          {
            if(0 < tmp1633++) { tmp1632.Append(", "); }
            tmp1632.Append("Note: ");
            Note.ToString(tmp1632);
          }
          tmp1632.Append(')');
          return tmp1632.ToString();
        }
      }


      public partial class updateNote_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateNote_result()
        {
        }

        public updateNote_result DeepCopy()
        {
          var tmp1634 = new updateNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1634.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1634.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1634.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1634.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1634.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1634.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1634.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1634.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1634;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1635 = new TStruct("updateNote_result");
            await oprot.WriteStructBeginAsync(tmp1635, cancellationToken);
            var tmp1636 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1636.Name = "Success";
                tmp1636.Type = TType.Struct;
                tmp1636.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1636, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1636.Name = "UserException";
                tmp1636.Type = TType.Struct;
                tmp1636.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1636, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1636.Name = "SystemException";
                tmp1636.Type = TType.Struct;
                tmp1636.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1636, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1636.Name = "NotFoundException";
                tmp1636.Type = TType.Struct;
                tmp1636.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1636, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1637 = new StringBuilder("updateNote_result(");
          int tmp1638 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1638++) { tmp1637.Append(", "); }
            tmp1637.Append("Success: ");
            Success.ToString(tmp1637);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1638++) { tmp1637.Append(", "); }
            tmp1637.Append("UserException: ");
            UserException.ToString(tmp1637);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1638++) { tmp1637.Append(", "); }
            tmp1637.Append("SystemException: ");
            SystemException.ToString(tmp1637);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1638++) { tmp1637.Append(", "); }
            tmp1637.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1637);
          }
          tmp1637.Append(')');
          return tmp1637.ToString();
        }
      }


      public partial class deleteNote_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public deleteNote_args()
        {
        }

        public deleteNote_args DeepCopy()
        {
          var tmp1639 = new deleteNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1639.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1639.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1639.Guid = this.Guid;
          }
          tmp1639.__isset.guid = this.__isset.guid;
          return tmp1639;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1640 = new TStruct("deleteNote_args");
            await oprot.WriteStructBeginAsync(tmp1640, cancellationToken);
            var tmp1641 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1641.Name = "authenticationToken";
              tmp1641.Type = TType.String;
              tmp1641.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1641, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1641.Name = "guid";
              tmp1641.Type = TType.String;
              tmp1641.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1641, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1642 = new StringBuilder("deleteNote_args(");
          int tmp1643 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1643++) { tmp1642.Append(", "); }
            tmp1642.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1642);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1643++) { tmp1642.Append(", "); }
            tmp1642.Append("Guid: ");
            Guid.ToString(tmp1642);
          }
          tmp1642.Append(')');
          return tmp1642.ToString();
        }
      }


      public partial class deleteNote_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public deleteNote_result()
        {
        }

        public deleteNote_result DeepCopy()
        {
          var tmp1644 = new deleteNote_result();
          if(__isset.success)
          {
            tmp1644.Success = this.Success;
          }
          tmp1644.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1644.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1644.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1644.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1644.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1644.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1644.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1644;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1645 = new TStruct("deleteNote_result");
            await oprot.WriteStructBeginAsync(tmp1645, cancellationToken);
            var tmp1646 = new TField();

            if(this.__isset.success)
            {
              tmp1646.Name = "Success";
              tmp1646.Type = TType.I32;
              tmp1646.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1646.Name = "UserException";
                tmp1646.Type = TType.Struct;
                tmp1646.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1646.Name = "SystemException";
                tmp1646.Type = TType.Struct;
                tmp1646.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1646.Name = "NotFoundException";
                tmp1646.Type = TType.Struct;
                tmp1646.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1647 = new StringBuilder("deleteNote_result(");
          int tmp1648 = 0;
          if(__isset.success)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("Success: ");
            Success.ToString(tmp1647);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("UserException: ");
            UserException.ToString(tmp1647);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("SystemException: ");
            SystemException.ToString(tmp1647);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1647);
          }
          tmp1647.Append(')');
          return tmp1647.ToString();
        }
      }


      public partial class expungeNote_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public expungeNote_args()
        {
        }

        public expungeNote_args DeepCopy()
        {
          var tmp1649 = new expungeNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1649.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1649.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1649.Guid = this.Guid;
          }
          tmp1649.__isset.guid = this.__isset.guid;
          return tmp1649;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1650 = new TStruct("expungeNote_args");
            await oprot.WriteStructBeginAsync(tmp1650, cancellationToken);
            var tmp1651 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1651.Name = "authenticationToken";
              tmp1651.Type = TType.String;
              tmp1651.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1651, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1651.Name = "guid";
              tmp1651.Type = TType.String;
              tmp1651.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1651, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1652 = new StringBuilder("expungeNote_args(");
          int tmp1653 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1653++) { tmp1652.Append(", "); }
            tmp1652.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1652);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1653++) { tmp1652.Append(", "); }
            tmp1652.Append("Guid: ");
            Guid.ToString(tmp1652);
          }
          tmp1652.Append(')');
          return tmp1652.ToString();
        }
      }


      public partial class expungeNote_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public expungeNote_result()
        {
        }

        public expungeNote_result DeepCopy()
        {
          var tmp1654 = new expungeNote_result();
          if(__isset.success)
          {
            tmp1654.Success = this.Success;
          }
          tmp1654.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1654.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1654.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1654.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1654.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1654.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1654.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1654;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1655 = new TStruct("expungeNote_result");
            await oprot.WriteStructBeginAsync(tmp1655, cancellationToken);
            var tmp1656 = new TField();

            if(this.__isset.success)
            {
              tmp1656.Name = "Success";
              tmp1656.Type = TType.I32;
              tmp1656.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1656, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1656.Name = "UserException";
                tmp1656.Type = TType.Struct;
                tmp1656.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1656, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1656.Name = "SystemException";
                tmp1656.Type = TType.Struct;
                tmp1656.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1656, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1656.Name = "NotFoundException";
                tmp1656.Type = TType.Struct;
                tmp1656.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1656, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1657 = new StringBuilder("expungeNote_result(");
          int tmp1658 = 0;
          if(__isset.success)
          {
            if(0 < tmp1658++) { tmp1657.Append(", "); }
            tmp1657.Append("Success: ");
            Success.ToString(tmp1657);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1658++) { tmp1657.Append(", "); }
            tmp1657.Append("UserException: ");
            UserException.ToString(tmp1657);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1658++) { tmp1657.Append(", "); }
            tmp1657.Append("SystemException: ");
            SystemException.ToString(tmp1657);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1658++) { tmp1657.Append(", "); }
            tmp1657.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1657);
          }
          tmp1657.Append(')');
          return tmp1657.ToString();
        }
      }


      public partial class copyNote_args : TBase
      {
        private string _authenticationToken;
        private string _noteGuid;
        private string _toNotebookGuid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NoteGuid
        {
          get
          {
            return _noteGuid;
          }
          set
          {
            __isset.noteGuid = true;
            this._noteGuid = value;
          }
        }

        public string ToNotebookGuid
        {
          get
          {
            return _toNotebookGuid;
          }
          set
          {
            __isset.toNotebookGuid = true;
            this._toNotebookGuid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool noteGuid;
          public bool toNotebookGuid;
        }

        public copyNote_args()
        {
        }

        public copyNote_args DeepCopy()
        {
          var tmp1659 = new copyNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1659.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1659.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NoteGuid != null) && __isset.noteGuid)
          {
            tmp1659.NoteGuid = this.NoteGuid;
          }
          tmp1659.__isset.noteGuid = this.__isset.noteGuid;
          if((ToNotebookGuid != null) && __isset.toNotebookGuid)
          {
            tmp1659.ToNotebookGuid = this.ToNotebookGuid;
          }
          tmp1659.__isset.toNotebookGuid = this.__isset.toNotebookGuid;
          return tmp1659;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NoteGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ToNotebookGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1660 = new TStruct("copyNote_args");
            await oprot.WriteStructBeginAsync(tmp1660, cancellationToken);
            var tmp1661 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1661.Name = "authenticationToken";
              tmp1661.Type = TType.String;
              tmp1661.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1661, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              tmp1661.Name = "noteGuid";
              tmp1661.Type = TType.String;
              tmp1661.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1661, cancellationToken);
              await oprot.WriteStringAsync(NoteGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ToNotebookGuid != null) && __isset.toNotebookGuid)
            {
              tmp1661.Name = "toNotebookGuid";
              tmp1661.Type = TType.String;
              tmp1661.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1661, cancellationToken);
              await oprot.WriteStringAsync(ToNotebookGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is copyNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))))
            && ((__isset.toNotebookGuid == other.__isset.toNotebookGuid) && ((!__isset.toNotebookGuid) || (global::System.Object.Equals(ToNotebookGuid, other.ToNotebookGuid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
            }
            if((ToNotebookGuid != null) && __isset.toNotebookGuid)
            {
              hashcode = (hashcode * 397) + ToNotebookGuid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1662 = new StringBuilder("copyNote_args(");
          int tmp1663 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1663++) { tmp1662.Append(", "); }
            tmp1662.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1662);
          }
          if((NoteGuid != null) && __isset.noteGuid)
          {
            if(0 < tmp1663++) { tmp1662.Append(", "); }
            tmp1662.Append("NoteGuid: ");
            NoteGuid.ToString(tmp1662);
          }
          if((ToNotebookGuid != null) && __isset.toNotebookGuid)
          {
            if(0 < tmp1663++) { tmp1662.Append(", "); }
            tmp1662.Append("ToNotebookGuid: ");
            ToNotebookGuid.ToString(tmp1662);
          }
          tmp1662.Append(')');
          return tmp1662.ToString();
        }
      }


      public partial class copyNote_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public copyNote_result()
        {
        }

        public copyNote_result DeepCopy()
        {
          var tmp1664 = new copyNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1664.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1664.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1664.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1664.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1664.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1664.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1664.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1664.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1664;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1665 = new TStruct("copyNote_result");
            await oprot.WriteStructBeginAsync(tmp1665, cancellationToken);
            var tmp1666 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1666.Name = "Success";
                tmp1666.Type = TType.Struct;
                tmp1666.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1666, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1666.Name = "UserException";
                tmp1666.Type = TType.Struct;
                tmp1666.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1666, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1666.Name = "SystemException";
                tmp1666.Type = TType.Struct;
                tmp1666.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1666, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1666.Name = "NotFoundException";
                tmp1666.Type = TType.Struct;
                tmp1666.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1666, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is copyNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1667 = new StringBuilder("copyNote_result(");
          int tmp1668 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1668++) { tmp1667.Append(", "); }
            tmp1667.Append("Success: ");
            Success.ToString(tmp1667);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1668++) { tmp1667.Append(", "); }
            tmp1667.Append("UserException: ");
            UserException.ToString(tmp1667);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1668++) { tmp1667.Append(", "); }
            tmp1667.Append("SystemException: ");
            SystemException.ToString(tmp1667);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1668++) { tmp1667.Append(", "); }
            tmp1667.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1667);
          }
          tmp1667.Append(')');
          return tmp1667.ToString();
        }
      }


      public partial class listNoteVersions_args : TBase
      {
        private string _authenticationToken;
        private string _noteGuid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NoteGuid
        {
          get
          {
            return _noteGuid;
          }
          set
          {
            __isset.noteGuid = true;
            this._noteGuid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool noteGuid;
        }

        public listNoteVersions_args()
        {
        }

        public listNoteVersions_args DeepCopy()
        {
          var tmp1669 = new listNoteVersions_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1669.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1669.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NoteGuid != null) && __isset.noteGuid)
          {
            tmp1669.NoteGuid = this.NoteGuid;
          }
          tmp1669.__isset.noteGuid = this.__isset.noteGuid;
          return tmp1669;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NoteGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1670 = new TStruct("listNoteVersions_args");
            await oprot.WriteStructBeginAsync(tmp1670, cancellationToken);
            var tmp1671 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1671.Name = "authenticationToken";
              tmp1671.Type = TType.String;
              tmp1671.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              tmp1671.Name = "noteGuid";
              tmp1671.Type = TType.String;
              tmp1671.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1671, cancellationToken);
              await oprot.WriteStringAsync(NoteGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listNoteVersions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1672 = new StringBuilder("listNoteVersions_args(");
          int tmp1673 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1673++) { tmp1672.Append(", "); }
            tmp1672.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1672);
          }
          if((NoteGuid != null) && __isset.noteGuid)
          {
            if(0 < tmp1673++) { tmp1672.Append(", "); }
            tmp1672.Append("NoteGuid: ");
            NoteGuid.ToString(tmp1672);
          }
          tmp1672.Append(')');
          return tmp1672.ToString();
        }
      }


      public partial class listNoteVersions_result : TBase
      {
        private List<global::Evernote.EDAM.NoteStore.NoteVersionId> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public List<global::Evernote.EDAM.NoteStore.NoteVersionId> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public listNoteVersions_result()
        {
        }

        public listNoteVersions_result DeepCopy()
        {
          var tmp1674 = new listNoteVersions_result();
          if((Success != null) && __isset.success)
          {
            tmp1674.Success = this.Success.DeepCopy();
          }
          tmp1674.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1674.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1674.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1674.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1674.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1674.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1674.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1674;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1675 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.NoteStore.NoteVersionId>(_list1675.Count);
                      for(int _i1676 = 0; _i1676 < _list1675.Count; ++_i1676)
                      {
                        global::Evernote.EDAM.NoteStore.NoteVersionId _elem1677;
                        _elem1677 = new global::Evernote.EDAM.NoteStore.NoteVersionId();
                        await _elem1677.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1677);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1678 = new TStruct("listNoteVersions_result");
            await oprot.WriteStructBeginAsync(tmp1678, cancellationToken);
            var tmp1679 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1679.Name = "Success";
                tmp1679.Type = TType.List;
                tmp1679.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1679, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.NoteStore.NoteVersionId _iter1680 in Success)
                  {
                    await _iter1680.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1679.Name = "UserException";
                tmp1679.Type = TType.Struct;
                tmp1679.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1679, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1679.Name = "SystemException";
                tmp1679.Type = TType.Struct;
                tmp1679.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1679, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1679.Name = "NotFoundException";
                tmp1679.Type = TType.Struct;
                tmp1679.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1679, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listNoteVersions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1681 = new StringBuilder("listNoteVersions_result(");
          int tmp1682 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1682++) { tmp1681.Append(", "); }
            tmp1681.Append("Success: ");
            Success.ToString(tmp1681);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1682++) { tmp1681.Append(", "); }
            tmp1681.Append("UserException: ");
            UserException.ToString(tmp1681);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1682++) { tmp1681.Append(", "); }
            tmp1681.Append("SystemException: ");
            SystemException.ToString(tmp1681);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1682++) { tmp1681.Append(", "); }
            tmp1681.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1681);
          }
          tmp1681.Append(')');
          return tmp1681.ToString();
        }
      }


      public partial class getNoteVersion_args : TBase
      {
        private string _authenticationToken;
        private string _noteGuid;
        private int _updateSequenceNum;
        private bool _withResourcesData;
        private bool _withResourcesRecognition;
        private bool _withResourcesAlternateData;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NoteGuid
        {
          get
          {
            return _noteGuid;
          }
          set
          {
            __isset.noteGuid = true;
            this._noteGuid = value;
          }
        }

        public int UpdateSequenceNum
        {
          get
          {
            return _updateSequenceNum;
          }
          set
          {
            __isset.updateSequenceNum = true;
            this._updateSequenceNum = value;
          }
        }

        public bool WithResourcesData
        {
          get
          {
            return _withResourcesData;
          }
          set
          {
            __isset.withResourcesData = true;
            this._withResourcesData = value;
          }
        }

        public bool WithResourcesRecognition
        {
          get
          {
            return _withResourcesRecognition;
          }
          set
          {
            __isset.withResourcesRecognition = true;
            this._withResourcesRecognition = value;
          }
        }

        public bool WithResourcesAlternateData
        {
          get
          {
            return _withResourcesAlternateData;
          }
          set
          {
            __isset.withResourcesAlternateData = true;
            this._withResourcesAlternateData = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool noteGuid;
          public bool updateSequenceNum;
          public bool withResourcesData;
          public bool withResourcesRecognition;
          public bool withResourcesAlternateData;
        }

        public getNoteVersion_args()
        {
        }

        public getNoteVersion_args DeepCopy()
        {
          var tmp1683 = new getNoteVersion_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1683.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1683.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NoteGuid != null) && __isset.noteGuid)
          {
            tmp1683.NoteGuid = this.NoteGuid;
          }
          tmp1683.__isset.noteGuid = this.__isset.noteGuid;
          if(__isset.updateSequenceNum)
          {
            tmp1683.UpdateSequenceNum = this.UpdateSequenceNum;
          }
          tmp1683.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
          if(__isset.withResourcesData)
          {
            tmp1683.WithResourcesData = this.WithResourcesData;
          }
          tmp1683.__isset.withResourcesData = this.__isset.withResourcesData;
          if(__isset.withResourcesRecognition)
          {
            tmp1683.WithResourcesRecognition = this.WithResourcesRecognition;
          }
          tmp1683.__isset.withResourcesRecognition = this.__isset.withResourcesRecognition;
          if(__isset.withResourcesAlternateData)
          {
            tmp1683.WithResourcesAlternateData = this.WithResourcesAlternateData;
          }
          tmp1683.__isset.withResourcesAlternateData = this.__isset.withResourcesAlternateData;
          return tmp1683;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NoteGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesRecognition = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.Bool)
                  {
                    WithResourcesAlternateData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1684 = new TStruct("getNoteVersion_args");
            await oprot.WriteStructBeginAsync(tmp1684, cancellationToken);
            var tmp1685 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1685.Name = "authenticationToken";
              tmp1685.Type = TType.String;
              tmp1685.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              tmp1685.Name = "noteGuid";
              tmp1685.Type = TType.String;
              tmp1685.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteStringAsync(NoteGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.updateSequenceNum)
            {
              tmp1685.Name = "updateSequenceNum";
              tmp1685.Type = TType.I32;
              tmp1685.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesData)
            {
              tmp1685.Name = "withResourcesData";
              tmp1685.Type = TType.Bool;
              tmp1685.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesRecognition)
            {
              tmp1685.Name = "withResourcesRecognition";
              tmp1685.Type = TType.Bool;
              tmp1685.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesRecognition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withResourcesAlternateData)
            {
              tmp1685.Name = "withResourcesAlternateData";
              tmp1685.Type = TType.Bool;
              tmp1685.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1685, cancellationToken);
              await oprot.WriteBoolAsync(WithResourcesAlternateData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))))
            && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))))
            && ((__isset.withResourcesData == other.__isset.withResourcesData) && ((!__isset.withResourcesData) || (global::System.Object.Equals(WithResourcesData, other.WithResourcesData))))
            && ((__isset.withResourcesRecognition == other.__isset.withResourcesRecognition) && ((!__isset.withResourcesRecognition) || (global::System.Object.Equals(WithResourcesRecognition, other.WithResourcesRecognition))))
            && ((__isset.withResourcesAlternateData == other.__isset.withResourcesAlternateData) && ((!__isset.withResourcesAlternateData) || (global::System.Object.Equals(WithResourcesAlternateData, other.WithResourcesAlternateData))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
            }
            if(__isset.updateSequenceNum)
            {
              hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
            }
            if(__isset.withResourcesData)
            {
              hashcode = (hashcode * 397) + WithResourcesData.GetHashCode();
            }
            if(__isset.withResourcesRecognition)
            {
              hashcode = (hashcode * 397) + WithResourcesRecognition.GetHashCode();
            }
            if(__isset.withResourcesAlternateData)
            {
              hashcode = (hashcode * 397) + WithResourcesAlternateData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1686 = new StringBuilder("getNoteVersion_args(");
          int tmp1687 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1686);
          }
          if((NoteGuid != null) && __isset.noteGuid)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("NoteGuid: ");
            NoteGuid.ToString(tmp1686);
          }
          if(__isset.updateSequenceNum)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("UpdateSequenceNum: ");
            UpdateSequenceNum.ToString(tmp1686);
          }
          if(__isset.withResourcesData)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("WithResourcesData: ");
            WithResourcesData.ToString(tmp1686);
          }
          if(__isset.withResourcesRecognition)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("WithResourcesRecognition: ");
            WithResourcesRecognition.ToString(tmp1686);
          }
          if(__isset.withResourcesAlternateData)
          {
            if(0 < tmp1687++) { tmp1686.Append(", "); }
            tmp1686.Append("WithResourcesAlternateData: ");
            WithResourcesAlternateData.ToString(tmp1686);
          }
          tmp1686.Append(')');
          return tmp1686.ToString();
        }
      }


      public partial class getNoteVersion_result : TBase
      {
        private global::Evernote.EDAM.Type.Note _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Note Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getNoteVersion_result()
        {
        }

        public getNoteVersion_result DeepCopy()
        {
          var tmp1688 = new getNoteVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp1688.Success = (global::Evernote.EDAM.Type.Note)this.Success.DeepCopy();
          }
          tmp1688.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1688.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1688.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1688.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1688.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1688.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1688.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1688;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Note();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1689 = new TStruct("getNoteVersion_result");
            await oprot.WriteStructBeginAsync(tmp1689, cancellationToken);
            var tmp1690 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1690.Name = "Success";
                tmp1690.Type = TType.Struct;
                tmp1690.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1690, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1690.Name = "UserException";
                tmp1690.Type = TType.Struct;
                tmp1690.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1690, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1690.Name = "SystemException";
                tmp1690.Type = TType.Struct;
                tmp1690.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1690, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1690.Name = "NotFoundException";
                tmp1690.Type = TType.Struct;
                tmp1690.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1690, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNoteVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1691 = new StringBuilder("getNoteVersion_result(");
          int tmp1692 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1692++) { tmp1691.Append(", "); }
            tmp1691.Append("Success: ");
            Success.ToString(tmp1691);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1692++) { tmp1691.Append(", "); }
            tmp1691.Append("UserException: ");
            UserException.ToString(tmp1691);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1692++) { tmp1691.Append(", "); }
            tmp1691.Append("SystemException: ");
            SystemException.ToString(tmp1691);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1692++) { tmp1691.Append(", "); }
            tmp1691.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1691);
          }
          tmp1691.Append(')');
          return tmp1691.ToString();
        }
      }


      public partial class getResource_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private bool _withData;
        private bool _withRecognition;
        private bool _withAttributes;
        private bool _withAlternateData;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public bool WithData
        {
          get
          {
            return _withData;
          }
          set
          {
            __isset.withData = true;
            this._withData = value;
          }
        }

        public bool WithRecognition
        {
          get
          {
            return _withRecognition;
          }
          set
          {
            __isset.withRecognition = true;
            this._withRecognition = value;
          }
        }

        public bool WithAttributes
        {
          get
          {
            return _withAttributes;
          }
          set
          {
            __isset.withAttributes = true;
            this._withAttributes = value;
          }
        }

        public bool WithAlternateData
        {
          get
          {
            return _withAlternateData;
          }
          set
          {
            __isset.withAlternateData = true;
            this._withAlternateData = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool withData;
          public bool withRecognition;
          public bool withAttributes;
          public bool withAlternateData;
        }

        public getResource_args()
        {
        }

        public getResource_args DeepCopy()
        {
          var tmp1693 = new getResource_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1693.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1693.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1693.Guid = this.Guid;
          }
          tmp1693.__isset.guid = this.__isset.guid;
          if(__isset.withData)
          {
            tmp1693.WithData = this.WithData;
          }
          tmp1693.__isset.withData = this.__isset.withData;
          if(__isset.withRecognition)
          {
            tmp1693.WithRecognition = this.WithRecognition;
          }
          tmp1693.__isset.withRecognition = this.__isset.withRecognition;
          if(__isset.withAttributes)
          {
            tmp1693.WithAttributes = this.WithAttributes;
          }
          tmp1693.__isset.withAttributes = this.__isset.withAttributes;
          if(__isset.withAlternateData)
          {
            tmp1693.WithAlternateData = this.WithAlternateData;
          }
          tmp1693.__isset.withAlternateData = this.__isset.withAlternateData;
          return tmp1693;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    WithData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    WithRecognition = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    WithAttributes = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.Bool)
                  {
                    WithAlternateData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1694 = new TStruct("getResource_args");
            await oprot.WriteStructBeginAsync(tmp1694, cancellationToken);
            var tmp1695 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1695.Name = "authenticationToken";
              tmp1695.Type = TType.String;
              tmp1695.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1695.Name = "guid";
              tmp1695.Type = TType.String;
              tmp1695.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withData)
            {
              tmp1695.Name = "withData";
              tmp1695.Type = TType.Bool;
              tmp1695.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteBoolAsync(WithData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withRecognition)
            {
              tmp1695.Name = "withRecognition";
              tmp1695.Type = TType.Bool;
              tmp1695.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteBoolAsync(WithRecognition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withAttributes)
            {
              tmp1695.Name = "withAttributes";
              tmp1695.Type = TType.Bool;
              tmp1695.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteBoolAsync(WithAttributes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withAlternateData)
            {
              tmp1695.Name = "withAlternateData";
              tmp1695.Type = TType.Bool;
              tmp1695.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1695, cancellationToken);
              await oprot.WriteBoolAsync(WithAlternateData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.withData == other.__isset.withData) && ((!__isset.withData) || (global::System.Object.Equals(WithData, other.WithData))))
            && ((__isset.withRecognition == other.__isset.withRecognition) && ((!__isset.withRecognition) || (global::System.Object.Equals(WithRecognition, other.WithRecognition))))
            && ((__isset.withAttributes == other.__isset.withAttributes) && ((!__isset.withAttributes) || (global::System.Object.Equals(WithAttributes, other.WithAttributes))))
            && ((__isset.withAlternateData == other.__isset.withAlternateData) && ((!__isset.withAlternateData) || (global::System.Object.Equals(WithAlternateData, other.WithAlternateData))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if(__isset.withData)
            {
              hashcode = (hashcode * 397) + WithData.GetHashCode();
            }
            if(__isset.withRecognition)
            {
              hashcode = (hashcode * 397) + WithRecognition.GetHashCode();
            }
            if(__isset.withAttributes)
            {
              hashcode = (hashcode * 397) + WithAttributes.GetHashCode();
            }
            if(__isset.withAlternateData)
            {
              hashcode = (hashcode * 397) + WithAlternateData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1696 = new StringBuilder("getResource_args(");
          int tmp1697 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1696);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("Guid: ");
            Guid.ToString(tmp1696);
          }
          if(__isset.withData)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("WithData: ");
            WithData.ToString(tmp1696);
          }
          if(__isset.withRecognition)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("WithRecognition: ");
            WithRecognition.ToString(tmp1696);
          }
          if(__isset.withAttributes)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("WithAttributes: ");
            WithAttributes.ToString(tmp1696);
          }
          if(__isset.withAlternateData)
          {
            if(0 < tmp1697++) { tmp1696.Append(", "); }
            tmp1696.Append("WithAlternateData: ");
            WithAlternateData.ToString(tmp1696);
          }
          tmp1696.Append(')');
          return tmp1696.ToString();
        }
      }


      public partial class getResource_result : TBase
      {
        private global::Evernote.EDAM.Type.Resource _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Resource Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResource_result()
        {
        }

        public getResource_result DeepCopy()
        {
          var tmp1698 = new getResource_result();
          if((Success != null) && __isset.success)
          {
            tmp1698.Success = (global::Evernote.EDAM.Type.Resource)this.Success.DeepCopy();
          }
          tmp1698.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1698.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1698.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1698.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1698.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1698.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1698.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1698;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Resource();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1699 = new TStruct("getResource_result");
            await oprot.WriteStructBeginAsync(tmp1699, cancellationToken);
            var tmp1700 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1700.Name = "Success";
                tmp1700.Type = TType.Struct;
                tmp1700.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1700, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1700.Name = "UserException";
                tmp1700.Type = TType.Struct;
                tmp1700.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1700, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1700.Name = "SystemException";
                tmp1700.Type = TType.Struct;
                tmp1700.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1700, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1700.Name = "NotFoundException";
                tmp1700.Type = TType.Struct;
                tmp1700.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1700, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1701 = new StringBuilder("getResource_result(");
          int tmp1702 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1702++) { tmp1701.Append(", "); }
            tmp1701.Append("Success: ");
            Success.ToString(tmp1701);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1702++) { tmp1701.Append(", "); }
            tmp1701.Append("UserException: ");
            UserException.ToString(tmp1701);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1702++) { tmp1701.Append(", "); }
            tmp1701.Append("SystemException: ");
            SystemException.ToString(tmp1701);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1702++) { tmp1701.Append(", "); }
            tmp1701.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1701);
          }
          tmp1701.Append(')');
          return tmp1701.ToString();
        }
      }


      public partial class getResourceApplicationData_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceApplicationData_args()
        {
        }

        public getResourceApplicationData_args DeepCopy()
        {
          var tmp1703 = new getResourceApplicationData_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1703.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1703.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1703.Guid = this.Guid;
          }
          tmp1703.__isset.guid = this.__isset.guid;
          return tmp1703;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1704 = new TStruct("getResourceApplicationData_args");
            await oprot.WriteStructBeginAsync(tmp1704, cancellationToken);
            var tmp1705 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1705.Name = "authenticationToken";
              tmp1705.Type = TType.String;
              tmp1705.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1705, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1705.Name = "guid";
              tmp1705.Type = TType.String;
              tmp1705.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1705, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceApplicationData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1706 = new StringBuilder("getResourceApplicationData_args(");
          int tmp1707 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1707++) { tmp1706.Append(", "); }
            tmp1706.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1706);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1707++) { tmp1706.Append(", "); }
            tmp1706.Append("Guid: ");
            Guid.ToString(tmp1706);
          }
          tmp1706.Append(')');
          return tmp1706.ToString();
        }
      }


      public partial class getResourceApplicationData_result : TBase
      {
        private global::Evernote.EDAM.Type.LazyMap _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.LazyMap Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceApplicationData_result()
        {
        }

        public getResourceApplicationData_result DeepCopy()
        {
          var tmp1708 = new getResourceApplicationData_result();
          if((Success != null) && __isset.success)
          {
            tmp1708.Success = (global::Evernote.EDAM.Type.LazyMap)this.Success.DeepCopy();
          }
          tmp1708.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1708.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1708.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1708.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1708.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1708.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1708.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1708;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.LazyMap();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1709 = new TStruct("getResourceApplicationData_result");
            await oprot.WriteStructBeginAsync(tmp1709, cancellationToken);
            var tmp1710 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1710.Name = "Success";
                tmp1710.Type = TType.Struct;
                tmp1710.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1710, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1710.Name = "UserException";
                tmp1710.Type = TType.Struct;
                tmp1710.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1710, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1710.Name = "SystemException";
                tmp1710.Type = TType.Struct;
                tmp1710.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1710, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1710.Name = "NotFoundException";
                tmp1710.Type = TType.Struct;
                tmp1710.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1710, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceApplicationData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1711 = new StringBuilder("getResourceApplicationData_result(");
          int tmp1712 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1712++) { tmp1711.Append(", "); }
            tmp1711.Append("Success: ");
            Success.ToString(tmp1711);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1712++) { tmp1711.Append(", "); }
            tmp1711.Append("UserException: ");
            UserException.ToString(tmp1711);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1712++) { tmp1711.Append(", "); }
            tmp1711.Append("SystemException: ");
            SystemException.ToString(tmp1711);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1712++) { tmp1711.Append(", "); }
            tmp1711.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1711);
          }
          tmp1711.Append(')');
          return tmp1711.ToString();
        }
      }


      public partial class getResourceApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
        }

        public getResourceApplicationDataEntry_args()
        {
        }

        public getResourceApplicationDataEntry_args DeepCopy()
        {
          var tmp1713 = new getResourceApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1713.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1713.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1713.Guid = this.Guid;
          }
          tmp1713.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1713.Key = this.Key;
          }
          tmp1713.__isset.key = this.__isset.key;
          return tmp1713;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1714 = new TStruct("getResourceApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1714, cancellationToken);
            var tmp1715 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1715.Name = "authenticationToken";
              tmp1715.Type = TType.String;
              tmp1715.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1715, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1715.Name = "guid";
              tmp1715.Type = TType.String;
              tmp1715.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1715, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1715.Name = "key";
              tmp1715.Type = TType.String;
              tmp1715.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1715, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1716 = new StringBuilder("getResourceApplicationDataEntry_args(");
          int tmp1717 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1717++) { tmp1716.Append(", "); }
            tmp1716.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1716);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1717++) { tmp1716.Append(", "); }
            tmp1716.Append("Guid: ");
            Guid.ToString(tmp1716);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1717++) { tmp1716.Append(", "); }
            tmp1716.Append("Key: ");
            Key.ToString(tmp1716);
          }
          tmp1716.Append(')');
          return tmp1716.ToString();
        }
      }


      public partial class getResourceApplicationDataEntry_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceApplicationDataEntry_result()
        {
        }

        public getResourceApplicationDataEntry_result DeepCopy()
        {
          var tmp1718 = new getResourceApplicationDataEntry_result();
          if((Success != null) && __isset.success)
          {
            tmp1718.Success = this.Success;
          }
          tmp1718.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1718.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1718.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1718.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1718.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1718.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1718.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1718;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1719 = new TStruct("getResourceApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1719, cancellationToken);
            var tmp1720 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1720.Name = "Success";
                tmp1720.Type = TType.String;
                tmp1720.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1720.Name = "UserException";
                tmp1720.Type = TType.Struct;
                tmp1720.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1720.Name = "SystemException";
                tmp1720.Type = TType.Struct;
                tmp1720.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1720.Name = "NotFoundException";
                tmp1720.Type = TType.Struct;
                tmp1720.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1720, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1721 = new StringBuilder("getResourceApplicationDataEntry_result(");
          int tmp1722 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("Success: ");
            Success.ToString(tmp1721);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("UserException: ");
            UserException.ToString(tmp1721);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("SystemException: ");
            SystemException.ToString(tmp1721);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1722++) { tmp1721.Append(", "); }
            tmp1721.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1721);
          }
          tmp1721.Append(')');
          return tmp1721.ToString();
        }
      }


      public partial class setResourceApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;
        private string _value;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public string Value
        {
          get
          {
            return _value;
          }
          set
          {
            __isset.@value = true;
            this._value = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
          public bool @value;
        }

        public setResourceApplicationDataEntry_args()
        {
        }

        public setResourceApplicationDataEntry_args DeepCopy()
        {
          var tmp1723 = new setResourceApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1723.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1723.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1723.Guid = this.Guid;
          }
          tmp1723.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1723.Key = this.Key;
          }
          tmp1723.__isset.key = this.__isset.key;
          if((Value != null) && __isset.@value)
          {
            tmp1723.Value = this.Value;
          }
          tmp1723.__isset.@value = this.__isset.@value;
          return tmp1723;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Value = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1724 = new TStruct("setResourceApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1724, cancellationToken);
            var tmp1725 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1725.Name = "authenticationToken";
              tmp1725.Type = TType.String;
              tmp1725.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1725, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1725.Name = "guid";
              tmp1725.Type = TType.String;
              tmp1725.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1725, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1725.Name = "key";
              tmp1725.Type = TType.String;
              tmp1725.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1725, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null) && __isset.@value)
            {
              tmp1725.Name = "value";
              tmp1725.Type = TType.String;
              tmp1725.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1725, cancellationToken);
              await oprot.WriteStringAsync(Value, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setResourceApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null) && __isset.@value)
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1726 = new StringBuilder("setResourceApplicationDataEntry_args(");
          int tmp1727 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1727++) { tmp1726.Append(", "); }
            tmp1726.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1726);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1727++) { tmp1726.Append(", "); }
            tmp1726.Append("Guid: ");
            Guid.ToString(tmp1726);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1727++) { tmp1726.Append(", "); }
            tmp1726.Append("Key: ");
            Key.ToString(tmp1726);
          }
          if((Value != null) && __isset.@value)
          {
            if(0 < tmp1727++) { tmp1726.Append(", "); }
            tmp1726.Append("Value: ");
            Value.ToString(tmp1726);
          }
          tmp1726.Append(')');
          return tmp1726.ToString();
        }
      }


      public partial class setResourceApplicationDataEntry_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public setResourceApplicationDataEntry_result()
        {
        }

        public setResourceApplicationDataEntry_result DeepCopy()
        {
          var tmp1728 = new setResourceApplicationDataEntry_result();
          if(__isset.success)
          {
            tmp1728.Success = this.Success;
          }
          tmp1728.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1728.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1728.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1728.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1728.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1728.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1728.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1728;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1729 = new TStruct("setResourceApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1729, cancellationToken);
            var tmp1730 = new TField();

            if(this.__isset.success)
            {
              tmp1730.Name = "Success";
              tmp1730.Type = TType.I32;
              tmp1730.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1730, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1730.Name = "UserException";
                tmp1730.Type = TType.Struct;
                tmp1730.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1730, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1730.Name = "SystemException";
                tmp1730.Type = TType.Struct;
                tmp1730.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1730, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1730.Name = "NotFoundException";
                tmp1730.Type = TType.Struct;
                tmp1730.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1730, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setResourceApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1731 = new StringBuilder("setResourceApplicationDataEntry_result(");
          int tmp1732 = 0;
          if(__isset.success)
          {
            if(0 < tmp1732++) { tmp1731.Append(", "); }
            tmp1731.Append("Success: ");
            Success.ToString(tmp1731);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1732++) { tmp1731.Append(", "); }
            tmp1731.Append("UserException: ");
            UserException.ToString(tmp1731);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1732++) { tmp1731.Append(", "); }
            tmp1731.Append("SystemException: ");
            SystemException.ToString(tmp1731);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1732++) { tmp1731.Append(", "); }
            tmp1731.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1731);
          }
          tmp1731.Append(')');
          return tmp1731.ToString();
        }
      }


      public partial class unsetResourceApplicationDataEntry_args : TBase
      {
        private string _authenticationToken;
        private string _guid;
        private string _key;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
          public bool key;
        }

        public unsetResourceApplicationDataEntry_args()
        {
        }

        public unsetResourceApplicationDataEntry_args DeepCopy()
        {
          var tmp1733 = new unsetResourceApplicationDataEntry_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1733.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1733.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1733.Guid = this.Guid;
          }
          tmp1733.__isset.guid = this.__isset.guid;
          if((Key != null) && __isset.key)
          {
            tmp1733.Key = this.Key;
          }
          tmp1733.__isset.key = this.__isset.key;
          return tmp1733;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1734 = new TStruct("unsetResourceApplicationDataEntry_args");
            await oprot.WriteStructBeginAsync(tmp1734, cancellationToken);
            var tmp1735 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1735.Name = "authenticationToken";
              tmp1735.Type = TType.String;
              tmp1735.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1735, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1735.Name = "guid";
              tmp1735.Type = TType.String;
              tmp1735.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1735, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Key != null) && __isset.key)
            {
              tmp1735.Name = "key";
              tmp1735.Type = TType.String;
              tmp1735.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1735, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsetResourceApplicationDataEntry_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1736 = new StringBuilder("unsetResourceApplicationDataEntry_args(");
          int tmp1737 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1737++) { tmp1736.Append(", "); }
            tmp1736.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1736);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1737++) { tmp1736.Append(", "); }
            tmp1736.Append("Guid: ");
            Guid.ToString(tmp1736);
          }
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1737++) { tmp1736.Append(", "); }
            tmp1736.Append("Key: ");
            Key.ToString(tmp1736);
          }
          tmp1736.Append(')');
          return tmp1736.ToString();
        }
      }


      public partial class unsetResourceApplicationDataEntry_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public unsetResourceApplicationDataEntry_result()
        {
        }

        public unsetResourceApplicationDataEntry_result DeepCopy()
        {
          var tmp1738 = new unsetResourceApplicationDataEntry_result();
          if(__isset.success)
          {
            tmp1738.Success = this.Success;
          }
          tmp1738.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1738.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1738.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1738.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1738.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1738.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1738.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1738;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1739 = new TStruct("unsetResourceApplicationDataEntry_result");
            await oprot.WriteStructBeginAsync(tmp1739, cancellationToken);
            var tmp1740 = new TField();

            if(this.__isset.success)
            {
              tmp1740.Name = "Success";
              tmp1740.Type = TType.I32;
              tmp1740.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1740, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1740.Name = "UserException";
                tmp1740.Type = TType.Struct;
                tmp1740.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1740, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1740.Name = "SystemException";
                tmp1740.Type = TType.Struct;
                tmp1740.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1740, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1740.Name = "NotFoundException";
                tmp1740.Type = TType.Struct;
                tmp1740.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1740, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is unsetResourceApplicationDataEntry_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1741 = new StringBuilder("unsetResourceApplicationDataEntry_result(");
          int tmp1742 = 0;
          if(__isset.success)
          {
            if(0 < tmp1742++) { tmp1741.Append(", "); }
            tmp1741.Append("Success: ");
            Success.ToString(tmp1741);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1742++) { tmp1741.Append(", "); }
            tmp1741.Append("UserException: ");
            UserException.ToString(tmp1741);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1742++) { tmp1741.Append(", "); }
            tmp1741.Append("SystemException: ");
            SystemException.ToString(tmp1741);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1742++) { tmp1741.Append(", "); }
            tmp1741.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1741);
          }
          tmp1741.Append(')');
          return tmp1741.ToString();
        }
      }


      public partial class updateResource_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Resource _resource;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Resource Resource
        {
          get
          {
            return _resource;
          }
          set
          {
            __isset.resource = true;
            this._resource = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool resource;
        }

        public updateResource_args()
        {
        }

        public updateResource_args DeepCopy()
        {
          var tmp1743 = new updateResource_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1743.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1743.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Resource != null) && __isset.resource)
          {
            tmp1743.Resource = (global::Evernote.EDAM.Type.Resource)this.Resource.DeepCopy();
          }
          tmp1743.__isset.resource = this.__isset.resource;
          return tmp1743;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Resource = new global::Evernote.EDAM.Type.Resource();
                    await Resource.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1744 = new TStruct("updateResource_args");
            await oprot.WriteStructBeginAsync(tmp1744, cancellationToken);
            var tmp1745 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1745.Name = "authenticationToken";
              tmp1745.Type = TType.String;
              tmp1745.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1745, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Resource != null) && __isset.resource)
            {
              tmp1745.Name = "resource";
              tmp1745.Type = TType.Struct;
              tmp1745.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1745, cancellationToken);
              await Resource.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateResource_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.resource == other.__isset.resource) && ((!__isset.resource) || (global::System.Object.Equals(Resource, other.Resource))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Resource != null) && __isset.resource)
            {
              hashcode = (hashcode * 397) + Resource.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1746 = new StringBuilder("updateResource_args(");
          int tmp1747 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1747++) { tmp1746.Append(", "); }
            tmp1746.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1746);
          }
          if((Resource != null) && __isset.resource)
          {
            if(0 < tmp1747++) { tmp1746.Append(", "); }
            tmp1746.Append("Resource: ");
            Resource.ToString(tmp1746);
          }
          tmp1746.Append(')');
          return tmp1746.ToString();
        }
      }


      public partial class updateResource_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public updateResource_result()
        {
        }

        public updateResource_result DeepCopy()
        {
          var tmp1748 = new updateResource_result();
          if(__isset.success)
          {
            tmp1748.Success = this.Success;
          }
          tmp1748.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1748.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1748.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1748.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1748.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1748.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1748.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1748;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1749 = new TStruct("updateResource_result");
            await oprot.WriteStructBeginAsync(tmp1749, cancellationToken);
            var tmp1750 = new TField();

            if(this.__isset.success)
            {
              tmp1750.Name = "Success";
              tmp1750.Type = TType.I32;
              tmp1750.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1750, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1750.Name = "UserException";
                tmp1750.Type = TType.Struct;
                tmp1750.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1750, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1750.Name = "SystemException";
                tmp1750.Type = TType.Struct;
                tmp1750.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1750, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1750.Name = "NotFoundException";
                tmp1750.Type = TType.Struct;
                tmp1750.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1750, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateResource_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1751 = new StringBuilder("updateResource_result(");
          int tmp1752 = 0;
          if(__isset.success)
          {
            if(0 < tmp1752++) { tmp1751.Append(", "); }
            tmp1751.Append("Success: ");
            Success.ToString(tmp1751);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1752++) { tmp1751.Append(", "); }
            tmp1751.Append("UserException: ");
            UserException.ToString(tmp1751);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1752++) { tmp1751.Append(", "); }
            tmp1751.Append("SystemException: ");
            SystemException.ToString(tmp1751);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1752++) { tmp1751.Append(", "); }
            tmp1751.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1751);
          }
          tmp1751.Append(')');
          return tmp1751.ToString();
        }
      }


      public partial class getResourceData_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceData_args()
        {
        }

        public getResourceData_args DeepCopy()
        {
          var tmp1753 = new getResourceData_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1753.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1753.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1753.Guid = this.Guid;
          }
          tmp1753.__isset.guid = this.__isset.guid;
          return tmp1753;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1754 = new TStruct("getResourceData_args");
            await oprot.WriteStructBeginAsync(tmp1754, cancellationToken);
            var tmp1755 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1755.Name = "authenticationToken";
              tmp1755.Type = TType.String;
              tmp1755.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1755, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1755.Name = "guid";
              tmp1755.Type = TType.String;
              tmp1755.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1755, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1756 = new StringBuilder("getResourceData_args(");
          int tmp1757 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1757++) { tmp1756.Append(", "); }
            tmp1756.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1756);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1757++) { tmp1756.Append(", "); }
            tmp1756.Append("Guid: ");
            Guid.ToString(tmp1756);
          }
          tmp1756.Append(')');
          return tmp1756.ToString();
        }
      }


      public partial class getResourceData_result : TBase
      {
        private byte[] _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceData_result()
        {
        }

        public getResourceData_result DeepCopy()
        {
          var tmp1758 = new getResourceData_result();
          if((Success != null) && __isset.success)
          {
            tmp1758.Success = this.Success.ToArray();
          }
          tmp1758.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1758.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1758.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1758.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1758.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1758.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1758.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1758;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1759 = new TStruct("getResourceData_result");
            await oprot.WriteStructBeginAsync(tmp1759, cancellationToken);
            var tmp1760 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1760.Name = "Success";
                tmp1760.Type = TType.String;
                tmp1760.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1760.Name = "UserException";
                tmp1760.Type = TType.Struct;
                tmp1760.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1760.Name = "SystemException";
                tmp1760.Type = TType.Struct;
                tmp1760.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1760.Name = "NotFoundException";
                tmp1760.Type = TType.Struct;
                tmp1760.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1760, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1761 = new StringBuilder("getResourceData_result(");
          int tmp1762 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("Success: ");
            Success.ToString(tmp1761);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("UserException: ");
            UserException.ToString(tmp1761);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("SystemException: ");
            SystemException.ToString(tmp1761);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1762++) { tmp1761.Append(", "); }
            tmp1761.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1761);
          }
          tmp1761.Append(')');
          return tmp1761.ToString();
        }
      }


      public partial class getResourceByHash_args : TBase
      {
        private string _authenticationToken;
        private string _noteGuid;
        private byte[] _contentHash;
        private bool _withData;
        private bool _withRecognition;
        private bool _withAlternateData;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NoteGuid
        {
          get
          {
            return _noteGuid;
          }
          set
          {
            __isset.noteGuid = true;
            this._noteGuid = value;
          }
        }

        public byte[] ContentHash
        {
          get
          {
            return _contentHash;
          }
          set
          {
            __isset.contentHash = true;
            this._contentHash = value;
          }
        }

        public bool WithData
        {
          get
          {
            return _withData;
          }
          set
          {
            __isset.withData = true;
            this._withData = value;
          }
        }

        public bool WithRecognition
        {
          get
          {
            return _withRecognition;
          }
          set
          {
            __isset.withRecognition = true;
            this._withRecognition = value;
          }
        }

        public bool WithAlternateData
        {
          get
          {
            return _withAlternateData;
          }
          set
          {
            __isset.withAlternateData = true;
            this._withAlternateData = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool noteGuid;
          public bool contentHash;
          public bool withData;
          public bool withRecognition;
          public bool withAlternateData;
        }

        public getResourceByHash_args()
        {
        }

        public getResourceByHash_args DeepCopy()
        {
          var tmp1763 = new getResourceByHash_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1763.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1763.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NoteGuid != null) && __isset.noteGuid)
          {
            tmp1763.NoteGuid = this.NoteGuid;
          }
          tmp1763.__isset.noteGuid = this.__isset.noteGuid;
          if((ContentHash != null) && __isset.contentHash)
          {
            tmp1763.ContentHash = this.ContentHash.ToArray();
          }
          tmp1763.__isset.contentHash = this.__isset.contentHash;
          if(__isset.withData)
          {
            tmp1763.WithData = this.WithData;
          }
          tmp1763.__isset.withData = this.__isset.withData;
          if(__isset.withRecognition)
          {
            tmp1763.WithRecognition = this.WithRecognition;
          }
          tmp1763.__isset.withRecognition = this.__isset.withRecognition;
          if(__isset.withAlternateData)
          {
            tmp1763.WithAlternateData = this.WithAlternateData;
          }
          tmp1763.__isset.withAlternateData = this.__isset.withAlternateData;
          return tmp1763;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NoteGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ContentHash = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    WithData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Bool)
                  {
                    WithRecognition = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 6:
                  if (field.Type == TType.Bool)
                  {
                    WithAlternateData = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1764 = new TStruct("getResourceByHash_args");
            await oprot.WriteStructBeginAsync(tmp1764, cancellationToken);
            var tmp1765 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1765.Name = "authenticationToken";
              tmp1765.Type = TType.String;
              tmp1765.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              tmp1765.Name = "noteGuid";
              tmp1765.Type = TType.String;
              tmp1765.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteStringAsync(NoteGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContentHash != null) && __isset.contentHash)
            {
              tmp1765.Name = "contentHash";
              tmp1765.Type = TType.String;
              tmp1765.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteBinaryAsync(ContentHash, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withData)
            {
              tmp1765.Name = "withData";
              tmp1765.Type = TType.Bool;
              tmp1765.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteBoolAsync(WithData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withRecognition)
            {
              tmp1765.Name = "withRecognition";
              tmp1765.Type = TType.Bool;
              tmp1765.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteBoolAsync(WithRecognition, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.withAlternateData)
            {
              tmp1765.Name = "withAlternateData";
              tmp1765.Type = TType.Bool;
              tmp1765.ID = 6;
              await oprot.WriteFieldBeginAsync(tmp1765, cancellationToken);
              await oprot.WriteBoolAsync(WithAlternateData, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceByHash_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))))
            && ((__isset.contentHash == other.__isset.contentHash) && ((!__isset.contentHash) || (TCollections.Equals(ContentHash, other.ContentHash))))
            && ((__isset.withData == other.__isset.withData) && ((!__isset.withData) || (global::System.Object.Equals(WithData, other.WithData))))
            && ((__isset.withRecognition == other.__isset.withRecognition) && ((!__isset.withRecognition) || (global::System.Object.Equals(WithRecognition, other.WithRecognition))))
            && ((__isset.withAlternateData == other.__isset.withAlternateData) && ((!__isset.withAlternateData) || (global::System.Object.Equals(WithAlternateData, other.WithAlternateData))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NoteGuid != null) && __isset.noteGuid)
            {
              hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
            }
            if((ContentHash != null) && __isset.contentHash)
            {
              hashcode = (hashcode * 397) + ContentHash.GetHashCode();
            }
            if(__isset.withData)
            {
              hashcode = (hashcode * 397) + WithData.GetHashCode();
            }
            if(__isset.withRecognition)
            {
              hashcode = (hashcode * 397) + WithRecognition.GetHashCode();
            }
            if(__isset.withAlternateData)
            {
              hashcode = (hashcode * 397) + WithAlternateData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1766 = new StringBuilder("getResourceByHash_args(");
          int tmp1767 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1766);
          }
          if((NoteGuid != null) && __isset.noteGuid)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("NoteGuid: ");
            NoteGuid.ToString(tmp1766);
          }
          if((ContentHash != null) && __isset.contentHash)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("ContentHash: ");
            ContentHash.ToString(tmp1766);
          }
          if(__isset.withData)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("WithData: ");
            WithData.ToString(tmp1766);
          }
          if(__isset.withRecognition)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("WithRecognition: ");
            WithRecognition.ToString(tmp1766);
          }
          if(__isset.withAlternateData)
          {
            if(0 < tmp1767++) { tmp1766.Append(", "); }
            tmp1766.Append("WithAlternateData: ");
            WithAlternateData.ToString(tmp1766);
          }
          tmp1766.Append(')');
          return tmp1766.ToString();
        }
      }


      public partial class getResourceByHash_result : TBase
      {
        private global::Evernote.EDAM.Type.Resource _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Resource Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceByHash_result()
        {
        }

        public getResourceByHash_result DeepCopy()
        {
          var tmp1768 = new getResourceByHash_result();
          if((Success != null) && __isset.success)
          {
            tmp1768.Success = (global::Evernote.EDAM.Type.Resource)this.Success.DeepCopy();
          }
          tmp1768.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1768.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1768.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1768.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1768.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1768.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1768.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1768;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Resource();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1769 = new TStruct("getResourceByHash_result");
            await oprot.WriteStructBeginAsync(tmp1769, cancellationToken);
            var tmp1770 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1770.Name = "Success";
                tmp1770.Type = TType.Struct;
                tmp1770.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1770, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1770.Name = "UserException";
                tmp1770.Type = TType.Struct;
                tmp1770.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1770, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1770.Name = "SystemException";
                tmp1770.Type = TType.Struct;
                tmp1770.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1770, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1770.Name = "NotFoundException";
                tmp1770.Type = TType.Struct;
                tmp1770.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1770, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceByHash_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1771 = new StringBuilder("getResourceByHash_result(");
          int tmp1772 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1772++) { tmp1771.Append(", "); }
            tmp1771.Append("Success: ");
            Success.ToString(tmp1771);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1772++) { tmp1771.Append(", "); }
            tmp1771.Append("UserException: ");
            UserException.ToString(tmp1771);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1772++) { tmp1771.Append(", "); }
            tmp1771.Append("SystemException: ");
            SystemException.ToString(tmp1771);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1772++) { tmp1771.Append(", "); }
            tmp1771.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1771);
          }
          tmp1771.Append(')');
          return tmp1771.ToString();
        }
      }


      public partial class getResourceRecognition_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceRecognition_args()
        {
        }

        public getResourceRecognition_args DeepCopy()
        {
          var tmp1773 = new getResourceRecognition_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1773.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1773.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1773.Guid = this.Guid;
          }
          tmp1773.__isset.guid = this.__isset.guid;
          return tmp1773;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1774 = new TStruct("getResourceRecognition_args");
            await oprot.WriteStructBeginAsync(tmp1774, cancellationToken);
            var tmp1775 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1775.Name = "authenticationToken";
              tmp1775.Type = TType.String;
              tmp1775.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1775, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1775.Name = "guid";
              tmp1775.Type = TType.String;
              tmp1775.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1775, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceRecognition_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1776 = new StringBuilder("getResourceRecognition_args(");
          int tmp1777 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1777++) { tmp1776.Append(", "); }
            tmp1776.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1776);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1777++) { tmp1776.Append(", "); }
            tmp1776.Append("Guid: ");
            Guid.ToString(tmp1776);
          }
          tmp1776.Append(')');
          return tmp1776.ToString();
        }
      }


      public partial class getResourceRecognition_result : TBase
      {
        private byte[] _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceRecognition_result()
        {
        }

        public getResourceRecognition_result DeepCopy()
        {
          var tmp1778 = new getResourceRecognition_result();
          if((Success != null) && __isset.success)
          {
            tmp1778.Success = this.Success.ToArray();
          }
          tmp1778.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1778.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1778.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1778.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1778.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1778.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1778.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1778;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1779 = new TStruct("getResourceRecognition_result");
            await oprot.WriteStructBeginAsync(tmp1779, cancellationToken);
            var tmp1780 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1780.Name = "Success";
                tmp1780.Type = TType.String;
                tmp1780.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1780, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1780.Name = "UserException";
                tmp1780.Type = TType.Struct;
                tmp1780.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1780, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1780.Name = "SystemException";
                tmp1780.Type = TType.Struct;
                tmp1780.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1780, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1780.Name = "NotFoundException";
                tmp1780.Type = TType.Struct;
                tmp1780.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1780, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceRecognition_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1781 = new StringBuilder("getResourceRecognition_result(");
          int tmp1782 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1782++) { tmp1781.Append(", "); }
            tmp1781.Append("Success: ");
            Success.ToString(tmp1781);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1782++) { tmp1781.Append(", "); }
            tmp1781.Append("UserException: ");
            UserException.ToString(tmp1781);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1782++) { tmp1781.Append(", "); }
            tmp1781.Append("SystemException: ");
            SystemException.ToString(tmp1781);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1782++) { tmp1781.Append(", "); }
            tmp1781.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1781);
          }
          tmp1781.Append(')');
          return tmp1781.ToString();
        }
      }


      public partial class getResourceAlternateData_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceAlternateData_args()
        {
        }

        public getResourceAlternateData_args DeepCopy()
        {
          var tmp1783 = new getResourceAlternateData_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1783.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1783.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1783.Guid = this.Guid;
          }
          tmp1783.__isset.guid = this.__isset.guid;
          return tmp1783;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1784 = new TStruct("getResourceAlternateData_args");
            await oprot.WriteStructBeginAsync(tmp1784, cancellationToken);
            var tmp1785 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1785.Name = "authenticationToken";
              tmp1785.Type = TType.String;
              tmp1785.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1785, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1785.Name = "guid";
              tmp1785.Type = TType.String;
              tmp1785.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1785, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceAlternateData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1786 = new StringBuilder("getResourceAlternateData_args(");
          int tmp1787 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1787++) { tmp1786.Append(", "); }
            tmp1786.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1786);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1787++) { tmp1786.Append(", "); }
            tmp1786.Append("Guid: ");
            Guid.ToString(tmp1786);
          }
          tmp1786.Append(')');
          return tmp1786.ToString();
        }
      }


      public partial class getResourceAlternateData_result : TBase
      {
        private byte[] _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceAlternateData_result()
        {
        }

        public getResourceAlternateData_result DeepCopy()
        {
          var tmp1788 = new getResourceAlternateData_result();
          if((Success != null) && __isset.success)
          {
            tmp1788.Success = this.Success.ToArray();
          }
          tmp1788.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1788.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1788.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1788.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1788.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1788.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1788.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1788;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1789 = new TStruct("getResourceAlternateData_result");
            await oprot.WriteStructBeginAsync(tmp1789, cancellationToken);
            var tmp1790 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1790.Name = "Success";
                tmp1790.Type = TType.String;
                tmp1790.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1790, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1790.Name = "UserException";
                tmp1790.Type = TType.Struct;
                tmp1790.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1790, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1790.Name = "SystemException";
                tmp1790.Type = TType.Struct;
                tmp1790.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1790, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1790.Name = "NotFoundException";
                tmp1790.Type = TType.Struct;
                tmp1790.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1790, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceAlternateData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1791 = new StringBuilder("getResourceAlternateData_result(");
          int tmp1792 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("Success: ");
            Success.ToString(tmp1791);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("UserException: ");
            UserException.ToString(tmp1791);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("SystemException: ");
            SystemException.ToString(tmp1791);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1792++) { tmp1791.Append(", "); }
            tmp1791.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1791);
          }
          tmp1791.Append(')');
          return tmp1791.ToString();
        }
      }


      public partial class getResourceAttributes_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public getResourceAttributes_args()
        {
        }

        public getResourceAttributes_args DeepCopy()
        {
          var tmp1793 = new getResourceAttributes_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1793.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1793.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1793.Guid = this.Guid;
          }
          tmp1793.__isset.guid = this.__isset.guid;
          return tmp1793;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1794 = new TStruct("getResourceAttributes_args");
            await oprot.WriteStructBeginAsync(tmp1794, cancellationToken);
            var tmp1795 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1795.Name = "authenticationToken";
              tmp1795.Type = TType.String;
              tmp1795.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1795, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1795.Name = "guid";
              tmp1795.Type = TType.String;
              tmp1795.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1795, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceAttributes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1796 = new StringBuilder("getResourceAttributes_args(");
          int tmp1797 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1797++) { tmp1796.Append(", "); }
            tmp1796.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1796);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1797++) { tmp1796.Append(", "); }
            tmp1796.Append("Guid: ");
            Guid.ToString(tmp1796);
          }
          tmp1796.Append(')');
          return tmp1796.ToString();
        }
      }


      public partial class getResourceAttributes_result : TBase
      {
        private global::Evernote.EDAM.Type.ResourceAttributes _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.ResourceAttributes Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public getResourceAttributes_result()
        {
        }

        public getResourceAttributes_result DeepCopy()
        {
          var tmp1798 = new getResourceAttributes_result();
          if((Success != null) && __isset.success)
          {
            tmp1798.Success = (global::Evernote.EDAM.Type.ResourceAttributes)this.Success.DeepCopy();
          }
          tmp1798.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1798.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1798.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1798.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1798.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1798.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1798.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1798;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.ResourceAttributes();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1799 = new TStruct("getResourceAttributes_result");
            await oprot.WriteStructBeginAsync(tmp1799, cancellationToken);
            var tmp1800 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1800.Name = "Success";
                tmp1800.Type = TType.Struct;
                tmp1800.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1800, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1800.Name = "UserException";
                tmp1800.Type = TType.Struct;
                tmp1800.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1800, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1800.Name = "SystemException";
                tmp1800.Type = TType.Struct;
                tmp1800.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1800, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1800.Name = "NotFoundException";
                tmp1800.Type = TType.Struct;
                tmp1800.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1800, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getResourceAttributes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1801 = new StringBuilder("getResourceAttributes_result(");
          int tmp1802 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1802++) { tmp1801.Append(", "); }
            tmp1801.Append("Success: ");
            Success.ToString(tmp1801);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1802++) { tmp1801.Append(", "); }
            tmp1801.Append("UserException: ");
            UserException.ToString(tmp1801);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1802++) { tmp1801.Append(", "); }
            tmp1801.Append("SystemException: ");
            SystemException.ToString(tmp1801);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1802++) { tmp1801.Append(", "); }
            tmp1801.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1801);
          }
          tmp1801.Append(')');
          return tmp1801.ToString();
        }
      }


      public partial class getPublicNotebook_args : TBase
      {
        private int _userId;
        private string _publicUri;

        public int UserId
        {
          get
          {
            return _userId;
          }
          set
          {
            __isset.userId = true;
            this._userId = value;
          }
        }

        public string PublicUri
        {
          get
          {
            return _publicUri;
          }
          set
          {
            __isset.publicUri = true;
            this._publicUri = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userId;
          public bool publicUri;
        }

        public getPublicNotebook_args()
        {
        }

        public getPublicNotebook_args DeepCopy()
        {
          var tmp1803 = new getPublicNotebook_args();
          if(__isset.userId)
          {
            tmp1803.UserId = this.UserId;
          }
          tmp1803.__isset.userId = this.__isset.userId;
          if((PublicUri != null) && __isset.publicUri)
          {
            tmp1803.PublicUri = this.PublicUri;
          }
          tmp1803.__isset.publicUri = this.__isset.publicUri;
          return tmp1803;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    UserId = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    PublicUri = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1804 = new TStruct("getPublicNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1804, cancellationToken);
            var tmp1805 = new TField();
            if(__isset.userId)
            {
              tmp1805.Name = "userId";
              tmp1805.Type = TType.I32;
              tmp1805.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1805, cancellationToken);
              await oprot.WriteI32Async(UserId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PublicUri != null) && __isset.publicUri)
            {
              tmp1805.Name = "publicUri";
              tmp1805.Type = TType.String;
              tmp1805.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1805, cancellationToken);
              await oprot.WriteStringAsync(PublicUri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPublicNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userId == other.__isset.userId) && ((!__isset.userId) || (global::System.Object.Equals(UserId, other.UserId))))
            && ((__isset.publicUri == other.__isset.publicUri) && ((!__isset.publicUri) || (global::System.Object.Equals(PublicUri, other.PublicUri))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.userId)
            {
              hashcode = (hashcode * 397) + UserId.GetHashCode();
            }
            if((PublicUri != null) && __isset.publicUri)
            {
              hashcode = (hashcode * 397) + PublicUri.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1806 = new StringBuilder("getPublicNotebook_args(");
          int tmp1807 = 0;
          if(__isset.userId)
          {
            if(0 < tmp1807++) { tmp1806.Append(", "); }
            tmp1806.Append("UserId: ");
            UserId.ToString(tmp1806);
          }
          if((PublicUri != null) && __isset.publicUri)
          {
            if(0 < tmp1807++) { tmp1806.Append(", "); }
            tmp1806.Append("PublicUri: ");
            PublicUri.ToString(tmp1806);
          }
          tmp1806.Append(')');
          return tmp1806.ToString();
        }
      }


      public partial class getPublicNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.Notebook _success;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.Type.Notebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool systemException;
          public bool notFoundException;
        }

        public getPublicNotebook_result()
        {
        }

        public getPublicNotebook_result DeepCopy()
        {
          var tmp1808 = new getPublicNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1808.Success = (global::Evernote.EDAM.Type.Notebook)this.Success.DeepCopy();
          }
          tmp1808.__isset.success = this.__isset.success;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1808.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1808.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1808.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1808.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1808;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Notebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1809 = new TStruct("getPublicNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1809, cancellationToken);
            var tmp1810 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1810.Name = "Success";
                tmp1810.Type = TType.Struct;
                tmp1810.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1810, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1810.Name = "SystemException";
                tmp1810.Type = TType.Struct;
                tmp1810.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1810, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1810.Name = "NotFoundException";
                tmp1810.Type = TType.Struct;
                tmp1810.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1810, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPublicNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1811 = new StringBuilder("getPublicNotebook_result(");
          int tmp1812 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1812++) { tmp1811.Append(", "); }
            tmp1811.Append("Success: ");
            Success.ToString(tmp1811);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1812++) { tmp1811.Append(", "); }
            tmp1811.Append("SystemException: ");
            SystemException.ToString(tmp1811);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1812++) { tmp1811.Append(", "); }
            tmp1811.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1811);
          }
          tmp1811.Append(')');
          return tmp1811.ToString();
        }
      }


      public partial class shareNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.SharedNotebook _sharedNotebook;
        private string _message;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.SharedNotebook SharedNotebook
        {
          get
          {
            return _sharedNotebook;
          }
          set
          {
            __isset.sharedNotebook = true;
            this._sharedNotebook = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool sharedNotebook;
          public bool message;
        }

        public shareNotebook_args()
        {
        }

        public shareNotebook_args DeepCopy()
        {
          var tmp1813 = new shareNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1813.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1813.__isset.authenticationToken = this.__isset.authenticationToken;
          if((SharedNotebook != null) && __isset.sharedNotebook)
          {
            tmp1813.SharedNotebook = (global::Evernote.EDAM.Type.SharedNotebook)this.SharedNotebook.DeepCopy();
          }
          tmp1813.__isset.sharedNotebook = this.__isset.sharedNotebook;
          if((Message != null) && __isset.message)
          {
            tmp1813.Message = this.Message;
          }
          tmp1813.__isset.message = this.__isset.message;
          return tmp1813;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SharedNotebook = new global::Evernote.EDAM.Type.SharedNotebook();
                    await SharedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1814 = new TStruct("shareNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1814, cancellationToken);
            var tmp1815 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1815.Name = "authenticationToken";
              tmp1815.Type = TType.String;
              tmp1815.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1815, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SharedNotebook != null) && __isset.sharedNotebook)
            {
              tmp1815.Name = "sharedNotebook";
              tmp1815.Type = TType.Struct;
              tmp1815.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1815, cancellationToken);
              await SharedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.message)
            {
              tmp1815.Name = "message";
              tmp1815.Type = TType.String;
              tmp1815.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1815, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shareNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.sharedNotebook == other.__isset.sharedNotebook) && ((!__isset.sharedNotebook) || (global::System.Object.Equals(SharedNotebook, other.SharedNotebook))))
            && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((SharedNotebook != null) && __isset.sharedNotebook)
            {
              hashcode = (hashcode * 397) + SharedNotebook.GetHashCode();
            }
            if((Message != null) && __isset.message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1816 = new StringBuilder("shareNotebook_args(");
          int tmp1817 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1817++) { tmp1816.Append(", "); }
            tmp1816.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1816);
          }
          if((SharedNotebook != null) && __isset.sharedNotebook)
          {
            if(0 < tmp1817++) { tmp1816.Append(", "); }
            tmp1816.Append("SharedNotebook: ");
            SharedNotebook.ToString(tmp1816);
          }
          if((Message != null) && __isset.message)
          {
            if(0 < tmp1817++) { tmp1816.Append(", "); }
            tmp1816.Append("Message: ");
            Message.ToString(tmp1816);
          }
          tmp1816.Append(')');
          return tmp1816.ToString();
        }
      }


      public partial class shareNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.SharedNotebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.SharedNotebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public shareNotebook_result()
        {
        }

        public shareNotebook_result DeepCopy()
        {
          var tmp1818 = new shareNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1818.Success = (global::Evernote.EDAM.Type.SharedNotebook)this.Success.DeepCopy();
          }
          tmp1818.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1818.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1818.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1818.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1818.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1818.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1818.__isset.systemException = this.__isset.systemException;
          return tmp1818;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.SharedNotebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1819 = new TStruct("shareNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1819, cancellationToken);
            var tmp1820 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1820.Name = "Success";
                tmp1820.Type = TType.Struct;
                tmp1820.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1820, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1820.Name = "UserException";
                tmp1820.Type = TType.Struct;
                tmp1820.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1820, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1820.Name = "NotFoundException";
                tmp1820.Type = TType.Struct;
                tmp1820.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1820, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1820.Name = "SystemException";
                tmp1820.Type = TType.Struct;
                tmp1820.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1820, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shareNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1821 = new StringBuilder("shareNotebook_result(");
          int tmp1822 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1822++) { tmp1821.Append(", "); }
            tmp1821.Append("Success: ");
            Success.ToString(tmp1821);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1822++) { tmp1821.Append(", "); }
            tmp1821.Append("UserException: ");
            UserException.ToString(tmp1821);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1822++) { tmp1821.Append(", "); }
            tmp1821.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1821);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1822++) { tmp1821.Append(", "); }
            tmp1821.Append("SystemException: ");
            SystemException.ToString(tmp1821);
          }
          tmp1821.Append(')');
          return tmp1821.ToString();
        }
      }


      public partial class createOrUpdateNotebookShares_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.NotebookShareTemplate _shareTemplate;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NotebookShareTemplate ShareTemplate
        {
          get
          {
            return _shareTemplate;
          }
          set
          {
            __isset.shareTemplate = true;
            this._shareTemplate = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool shareTemplate;
        }

        public createOrUpdateNotebookShares_args()
        {
        }

        public createOrUpdateNotebookShares_args DeepCopy()
        {
          var tmp1823 = new createOrUpdateNotebookShares_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1823.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1823.__isset.authenticationToken = this.__isset.authenticationToken;
          if((ShareTemplate != null) && __isset.shareTemplate)
          {
            tmp1823.ShareTemplate = (global::Evernote.EDAM.NoteStore.NotebookShareTemplate)this.ShareTemplate.DeepCopy();
          }
          tmp1823.__isset.shareTemplate = this.__isset.shareTemplate;
          return tmp1823;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    ShareTemplate = new global::Evernote.EDAM.NoteStore.NotebookShareTemplate();
                    await ShareTemplate.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1824 = new TStruct("createOrUpdateNotebookShares_args");
            await oprot.WriteStructBeginAsync(tmp1824, cancellationToken);
            var tmp1825 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1825.Name = "authenticationToken";
              tmp1825.Type = TType.String;
              tmp1825.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1825, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ShareTemplate != null) && __isset.shareTemplate)
            {
              tmp1825.Name = "shareTemplate";
              tmp1825.Type = TType.Struct;
              tmp1825.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1825, cancellationToken);
              await ShareTemplate.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createOrUpdateNotebookShares_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.shareTemplate == other.__isset.shareTemplate) && ((!__isset.shareTemplate) || (global::System.Object.Equals(ShareTemplate, other.ShareTemplate))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((ShareTemplate != null) && __isset.shareTemplate)
            {
              hashcode = (hashcode * 397) + ShareTemplate.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1826 = new StringBuilder("createOrUpdateNotebookShares_args(");
          int tmp1827 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1827++) { tmp1826.Append(", "); }
            tmp1826.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1826);
          }
          if((ShareTemplate != null) && __isset.shareTemplate)
          {
            if(0 < tmp1827++) { tmp1826.Append(", "); }
            tmp1826.Append("ShareTemplate: ");
            ShareTemplate.ToString(tmp1826);
          }
          tmp1826.Append(')');
          return tmp1826.ToString();
        }
      }


      public partial class createOrUpdateNotebookShares_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMInvalidContactsException _invalidContactsException;

        public global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMInvalidContactsException InvalidContactsException
        {
          get
          {
            return _invalidContactsException;
          }
          set
          {
            __isset.invalidContactsException = true;
            this._invalidContactsException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
          public bool invalidContactsException;
        }

        public createOrUpdateNotebookShares_result()
        {
        }

        public createOrUpdateNotebookShares_result DeepCopy()
        {
          var tmp1828 = new createOrUpdateNotebookShares_result();
          if((Success != null) && __isset.success)
          {
            tmp1828.Success = (global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult)this.Success.DeepCopy();
          }
          tmp1828.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1828.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1828.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1828.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1828.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1828.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1828.__isset.systemException = this.__isset.systemException;
          if((InvalidContactsException != null) && __isset.invalidContactsException)
          {
            tmp1828.InvalidContactsException = (global::Evernote.EDAM.Error.EDAMInvalidContactsException)this.InvalidContactsException.DeepCopy();
          }
          tmp1828.__isset.invalidContactsException = this.__isset.invalidContactsException;
          return tmp1828;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.CreateOrUpdateNotebookSharesResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    InvalidContactsException = new global::Evernote.EDAM.Error.EDAMInvalidContactsException();
                    await InvalidContactsException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1829 = new TStruct("createOrUpdateNotebookShares_result");
            await oprot.WriteStructBeginAsync(tmp1829, cancellationToken);
            var tmp1830 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1830.Name = "Success";
                tmp1830.Type = TType.Struct;
                tmp1830.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1830, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1830.Name = "UserException";
                tmp1830.Type = TType.Struct;
                tmp1830.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1830, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1830.Name = "NotFoundException";
                tmp1830.Type = TType.Struct;
                tmp1830.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1830, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1830.Name = "SystemException";
                tmp1830.Type = TType.Struct;
                tmp1830.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1830, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.invalidContactsException)
            {
              if (InvalidContactsException != null)
              {
                tmp1830.Name = "InvalidContactsException";
                tmp1830.Type = TType.Struct;
                tmp1830.ID = 4;
                await oprot.WriteFieldBeginAsync(tmp1830, cancellationToken);
                await InvalidContactsException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createOrUpdateNotebookShares_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.invalidContactsException == other.__isset.invalidContactsException) && ((!__isset.invalidContactsException) || (global::System.Object.Equals(InvalidContactsException, other.InvalidContactsException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((InvalidContactsException != null) && __isset.invalidContactsException)
            {
              hashcode = (hashcode * 397) + InvalidContactsException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1831 = new StringBuilder("createOrUpdateNotebookShares_result(");
          int tmp1832 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1832++) { tmp1831.Append(", "); }
            tmp1831.Append("Success: ");
            Success.ToString(tmp1831);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1832++) { tmp1831.Append(", "); }
            tmp1831.Append("UserException: ");
            UserException.ToString(tmp1831);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1832++) { tmp1831.Append(", "); }
            tmp1831.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1831);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1832++) { tmp1831.Append(", "); }
            tmp1831.Append("SystemException: ");
            SystemException.ToString(tmp1831);
          }
          if((InvalidContactsException != null) && __isset.invalidContactsException)
          {
            if(0 < tmp1832++) { tmp1831.Append(", "); }
            tmp1831.Append("InvalidContactsException: ");
            InvalidContactsException.ToString(tmp1831);
          }
          tmp1831.Append(')');
          return tmp1831.ToString();
        }
      }


      public partial class updateSharedNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.SharedNotebook _sharedNotebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.SharedNotebook SharedNotebook
        {
          get
          {
            return _sharedNotebook;
          }
          set
          {
            __isset.sharedNotebook = true;
            this._sharedNotebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool sharedNotebook;
        }

        public updateSharedNotebook_args()
        {
        }

        public updateSharedNotebook_args DeepCopy()
        {
          var tmp1833 = new updateSharedNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1833.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1833.__isset.authenticationToken = this.__isset.authenticationToken;
          if((SharedNotebook != null) && __isset.sharedNotebook)
          {
            tmp1833.SharedNotebook = (global::Evernote.EDAM.Type.SharedNotebook)this.SharedNotebook.DeepCopy();
          }
          tmp1833.__isset.sharedNotebook = this.__isset.sharedNotebook;
          return tmp1833;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SharedNotebook = new global::Evernote.EDAM.Type.SharedNotebook();
                    await SharedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1834 = new TStruct("updateSharedNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1834, cancellationToken);
            var tmp1835 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1835.Name = "authenticationToken";
              tmp1835.Type = TType.String;
              tmp1835.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1835, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((SharedNotebook != null) && __isset.sharedNotebook)
            {
              tmp1835.Name = "sharedNotebook";
              tmp1835.Type = TType.Struct;
              tmp1835.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1835, cancellationToken);
              await SharedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSharedNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.sharedNotebook == other.__isset.sharedNotebook) && ((!__isset.sharedNotebook) || (global::System.Object.Equals(SharedNotebook, other.SharedNotebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((SharedNotebook != null) && __isset.sharedNotebook)
            {
              hashcode = (hashcode * 397) + SharedNotebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1836 = new StringBuilder("updateSharedNotebook_args(");
          int tmp1837 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1837++) { tmp1836.Append(", "); }
            tmp1836.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1836);
          }
          if((SharedNotebook != null) && __isset.sharedNotebook)
          {
            if(0 < tmp1837++) { tmp1836.Append(", "); }
            tmp1836.Append("SharedNotebook: ");
            SharedNotebook.ToString(tmp1836);
          }
          tmp1836.Append(')');
          return tmp1836.ToString();
        }
      }


      public partial class updateSharedNotebook_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public updateSharedNotebook_result()
        {
        }

        public updateSharedNotebook_result DeepCopy()
        {
          var tmp1838 = new updateSharedNotebook_result();
          if(__isset.success)
          {
            tmp1838.Success = this.Success;
          }
          tmp1838.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1838.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1838.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1838.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1838.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1838.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1838.__isset.systemException = this.__isset.systemException;
          return tmp1838;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1839 = new TStruct("updateSharedNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1839, cancellationToken);
            var tmp1840 = new TField();

            if(this.__isset.success)
            {
              tmp1840.Name = "Success";
              tmp1840.Type = TType.I32;
              tmp1840.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1840, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1840.Name = "UserException";
                tmp1840.Type = TType.Struct;
                tmp1840.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1840, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1840.Name = "NotFoundException";
                tmp1840.Type = TType.Struct;
                tmp1840.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1840, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1840.Name = "SystemException";
                tmp1840.Type = TType.Struct;
                tmp1840.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1840, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSharedNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1841 = new StringBuilder("updateSharedNotebook_result(");
          int tmp1842 = 0;
          if(__isset.success)
          {
            if(0 < tmp1842++) { tmp1841.Append(", "); }
            tmp1841.Append("Success: ");
            Success.ToString(tmp1841);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1842++) { tmp1841.Append(", "); }
            tmp1841.Append("UserException: ");
            UserException.ToString(tmp1841);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1842++) { tmp1841.Append(", "); }
            tmp1841.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1841);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1842++) { tmp1841.Append(", "); }
            tmp1841.Append("SystemException: ");
            SystemException.ToString(tmp1841);
          }
          tmp1841.Append(')');
          return tmp1841.ToString();
        }
      }


      public partial class setNotebookRecipientSettings_args : TBase
      {
        private string _authenticationToken;
        private string _notebookGuid;
        private global::Evernote.EDAM.Type.NotebookRecipientSettings _recipientSettings;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NotebookGuid
        {
          get
          {
            return _notebookGuid;
          }
          set
          {
            __isset.notebookGuid = true;
            this._notebookGuid = value;
          }
        }

        public global::Evernote.EDAM.Type.NotebookRecipientSettings RecipientSettings
        {
          get
          {
            return _recipientSettings;
          }
          set
          {
            __isset.recipientSettings = true;
            this._recipientSettings = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool notebookGuid;
          public bool recipientSettings;
        }

        public setNotebookRecipientSettings_args()
        {
        }

        public setNotebookRecipientSettings_args DeepCopy()
        {
          var tmp1843 = new setNotebookRecipientSettings_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1843.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1843.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            tmp1843.NotebookGuid = this.NotebookGuid;
          }
          tmp1843.__isset.notebookGuid = this.__isset.notebookGuid;
          if((RecipientSettings != null) && __isset.recipientSettings)
          {
            tmp1843.RecipientSettings = (global::Evernote.EDAM.Type.NotebookRecipientSettings)this.RecipientSettings.DeepCopy();
          }
          tmp1843.__isset.recipientSettings = this.__isset.recipientSettings;
          return tmp1843;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    RecipientSettings = new global::Evernote.EDAM.Type.NotebookRecipientSettings();
                    await RecipientSettings.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1844 = new TStruct("setNotebookRecipientSettings_args");
            await oprot.WriteStructBeginAsync(tmp1844, cancellationToken);
            var tmp1845 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1845.Name = "authenticationToken";
              tmp1845.Type = TType.String;
              tmp1845.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1845, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              tmp1845.Name = "notebookGuid";
              tmp1845.Type = TType.String;
              tmp1845.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1845, cancellationToken);
              await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((RecipientSettings != null) && __isset.recipientSettings)
            {
              tmp1845.Name = "recipientSettings";
              tmp1845.Type = TType.Struct;
              tmp1845.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1845, cancellationToken);
              await RecipientSettings.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNotebookRecipientSettings_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))))
            && ((__isset.recipientSettings == other.__isset.recipientSettings) && ((!__isset.recipientSettings) || (global::System.Object.Equals(RecipientSettings, other.RecipientSettings))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
            }
            if((RecipientSettings != null) && __isset.recipientSettings)
            {
              hashcode = (hashcode * 397) + RecipientSettings.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1846 = new StringBuilder("setNotebookRecipientSettings_args(");
          int tmp1847 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1847++) { tmp1846.Append(", "); }
            tmp1846.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1846);
          }
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            if(0 < tmp1847++) { tmp1846.Append(", "); }
            tmp1846.Append("NotebookGuid: ");
            NotebookGuid.ToString(tmp1846);
          }
          if((RecipientSettings != null) && __isset.recipientSettings)
          {
            if(0 < tmp1847++) { tmp1846.Append(", "); }
            tmp1846.Append("RecipientSettings: ");
            RecipientSettings.ToString(tmp1846);
          }
          tmp1846.Append(')');
          return tmp1846.ToString();
        }
      }


      public partial class setNotebookRecipientSettings_result : TBase
      {
        private global::Evernote.EDAM.Type.Notebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.Notebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public setNotebookRecipientSettings_result()
        {
        }

        public setNotebookRecipientSettings_result DeepCopy()
        {
          var tmp1848 = new setNotebookRecipientSettings_result();
          if((Success != null) && __isset.success)
          {
            tmp1848.Success = (global::Evernote.EDAM.Type.Notebook)this.Success.DeepCopy();
          }
          tmp1848.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1848.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1848.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1848.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1848.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1848.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1848.__isset.systemException = this.__isset.systemException;
          return tmp1848;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.Notebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1849 = new TStruct("setNotebookRecipientSettings_result");
            await oprot.WriteStructBeginAsync(tmp1849, cancellationToken);
            var tmp1850 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1850.Name = "Success";
                tmp1850.Type = TType.Struct;
                tmp1850.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1850, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1850.Name = "UserException";
                tmp1850.Type = TType.Struct;
                tmp1850.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1850, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1850.Name = "NotFoundException";
                tmp1850.Type = TType.Struct;
                tmp1850.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1850, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1850.Name = "SystemException";
                tmp1850.Type = TType.Struct;
                tmp1850.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1850, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setNotebookRecipientSettings_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1851 = new StringBuilder("setNotebookRecipientSettings_result(");
          int tmp1852 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1852++) { tmp1851.Append(", "); }
            tmp1851.Append("Success: ");
            Success.ToString(tmp1851);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1852++) { tmp1851.Append(", "); }
            tmp1851.Append("UserException: ");
            UserException.ToString(tmp1851);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1852++) { tmp1851.Append(", "); }
            tmp1851.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1851);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1852++) { tmp1851.Append(", "); }
            tmp1851.Append("SystemException: ");
            SystemException.ToString(tmp1851);
          }
          tmp1851.Append(')');
          return tmp1851.ToString();
        }
      }


      public partial class listSharedNotebooks_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listSharedNotebooks_args()
        {
        }

        public listSharedNotebooks_args DeepCopy()
        {
          var tmp1853 = new listSharedNotebooks_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1853.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1853.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1853;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1854 = new TStruct("listSharedNotebooks_args");
            await oprot.WriteStructBeginAsync(tmp1854, cancellationToken);
            var tmp1855 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1855.Name = "authenticationToken";
              tmp1855.Type = TType.String;
              tmp1855.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1855, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSharedNotebooks_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1856 = new StringBuilder("listSharedNotebooks_args(");
          int tmp1857 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1857++) { tmp1856.Append(", "); }
            tmp1856.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1856);
          }
          tmp1856.Append(')');
          return tmp1856.ToString();
        }
      }


      public partial class listSharedNotebooks_result : TBase
      {
        private List<global::Evernote.EDAM.Type.SharedNotebook> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.SharedNotebook> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public listSharedNotebooks_result()
        {
        }

        public listSharedNotebooks_result DeepCopy()
        {
          var tmp1858 = new listSharedNotebooks_result();
          if((Success != null) && __isset.success)
          {
            tmp1858.Success = this.Success.DeepCopy();
          }
          tmp1858.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1858.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1858.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1858.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1858.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1858.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1858.__isset.systemException = this.__isset.systemException;
          return tmp1858;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1859 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.SharedNotebook>(_list1859.Count);
                      for(int _i1860 = 0; _i1860 < _list1859.Count; ++_i1860)
                      {
                        global::Evernote.EDAM.Type.SharedNotebook _elem1861;
                        _elem1861 = new global::Evernote.EDAM.Type.SharedNotebook();
                        await _elem1861.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1861);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1862 = new TStruct("listSharedNotebooks_result");
            await oprot.WriteStructBeginAsync(tmp1862, cancellationToken);
            var tmp1863 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1863.Name = "Success";
                tmp1863.Type = TType.List;
                tmp1863.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1863, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.SharedNotebook _iter1864 in Success)
                  {
                    await _iter1864.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1863.Name = "UserException";
                tmp1863.Type = TType.Struct;
                tmp1863.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1863, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1863.Name = "NotFoundException";
                tmp1863.Type = TType.Struct;
                tmp1863.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1863, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1863.Name = "SystemException";
                tmp1863.Type = TType.Struct;
                tmp1863.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1863, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSharedNotebooks_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1865 = new StringBuilder("listSharedNotebooks_result(");
          int tmp1866 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1866++) { tmp1865.Append(", "); }
            tmp1865.Append("Success: ");
            Success.ToString(tmp1865);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1866++) { tmp1865.Append(", "); }
            tmp1865.Append("UserException: ");
            UserException.ToString(tmp1865);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1866++) { tmp1865.Append(", "); }
            tmp1865.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1865);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1866++) { tmp1865.Append(", "); }
            tmp1865.Append("SystemException: ");
            SystemException.ToString(tmp1865);
          }
          tmp1865.Append(')');
          return tmp1865.ToString();
        }
      }


      public partial class createLinkedNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.LinkedNotebook _linkedNotebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
        {
          get
          {
            return _linkedNotebook;
          }
          set
          {
            __isset.linkedNotebook = true;
            this._linkedNotebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool linkedNotebook;
        }

        public createLinkedNotebook_args()
        {
        }

        public createLinkedNotebook_args DeepCopy()
        {
          var tmp1867 = new createLinkedNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1867.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1867.__isset.authenticationToken = this.__isset.authenticationToken;
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            tmp1867.LinkedNotebook = (global::Evernote.EDAM.Type.LinkedNotebook)this.LinkedNotebook.DeepCopy();
          }
          tmp1867.__isset.linkedNotebook = this.__isset.linkedNotebook;
          return tmp1867;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    LinkedNotebook = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await LinkedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1868 = new TStruct("createLinkedNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1868, cancellationToken);
            var tmp1869 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1869.Name = "authenticationToken";
              tmp1869.Type = TType.String;
              tmp1869.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1869, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              tmp1869.Name = "linkedNotebook";
              tmp1869.Type = TType.Struct;
              tmp1869.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1869, cancellationToken);
              await LinkedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createLinkedNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.linkedNotebook == other.__isset.linkedNotebook) && ((!__isset.linkedNotebook) || (global::System.Object.Equals(LinkedNotebook, other.LinkedNotebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              hashcode = (hashcode * 397) + LinkedNotebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1870 = new StringBuilder("createLinkedNotebook_args(");
          int tmp1871 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1871++) { tmp1870.Append(", "); }
            tmp1870.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1870);
          }
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            if(0 < tmp1871++) { tmp1870.Append(", "); }
            tmp1870.Append("LinkedNotebook: ");
            LinkedNotebook.ToString(tmp1870);
          }
          tmp1870.Append(')');
          return tmp1870.ToString();
        }
      }


      public partial class createLinkedNotebook_result : TBase
      {
        private global::Evernote.EDAM.Type.LinkedNotebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.LinkedNotebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public createLinkedNotebook_result()
        {
        }

        public createLinkedNotebook_result DeepCopy()
        {
          var tmp1872 = new createLinkedNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1872.Success = (global::Evernote.EDAM.Type.LinkedNotebook)this.Success.DeepCopy();
          }
          tmp1872.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1872.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1872.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1872.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1872.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1872.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1872.__isset.systemException = this.__isset.systemException;
          return tmp1872;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1873 = new TStruct("createLinkedNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1873, cancellationToken);
            var tmp1874 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1874.Name = "Success";
                tmp1874.Type = TType.Struct;
                tmp1874.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1874, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1874.Name = "UserException";
                tmp1874.Type = TType.Struct;
                tmp1874.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1874, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1874.Name = "NotFoundException";
                tmp1874.Type = TType.Struct;
                tmp1874.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1874, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1874.Name = "SystemException";
                tmp1874.Type = TType.Struct;
                tmp1874.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1874, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createLinkedNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1875 = new StringBuilder("createLinkedNotebook_result(");
          int tmp1876 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1876++) { tmp1875.Append(", "); }
            tmp1875.Append("Success: ");
            Success.ToString(tmp1875);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1876++) { tmp1875.Append(", "); }
            tmp1875.Append("UserException: ");
            UserException.ToString(tmp1875);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1876++) { tmp1875.Append(", "); }
            tmp1875.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1875);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1876++) { tmp1875.Append(", "); }
            tmp1875.Append("SystemException: ");
            SystemException.ToString(tmp1875);
          }
          tmp1875.Append(')');
          return tmp1875.ToString();
        }
      }


      public partial class updateLinkedNotebook_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.LinkedNotebook _linkedNotebook;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.LinkedNotebook LinkedNotebook
        {
          get
          {
            return _linkedNotebook;
          }
          set
          {
            __isset.linkedNotebook = true;
            this._linkedNotebook = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool linkedNotebook;
        }

        public updateLinkedNotebook_args()
        {
        }

        public updateLinkedNotebook_args DeepCopy()
        {
          var tmp1877 = new updateLinkedNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1877.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1877.__isset.authenticationToken = this.__isset.authenticationToken;
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            tmp1877.LinkedNotebook = (global::Evernote.EDAM.Type.LinkedNotebook)this.LinkedNotebook.DeepCopy();
          }
          tmp1877.__isset.linkedNotebook = this.__isset.linkedNotebook;
          return tmp1877;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    LinkedNotebook = new global::Evernote.EDAM.Type.LinkedNotebook();
                    await LinkedNotebook.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1878 = new TStruct("updateLinkedNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1878, cancellationToken);
            var tmp1879 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1879.Name = "authenticationToken";
              tmp1879.Type = TType.String;
              tmp1879.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1879, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              tmp1879.Name = "linkedNotebook";
              tmp1879.Type = TType.Struct;
              tmp1879.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1879, cancellationToken);
              await LinkedNotebook.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateLinkedNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.linkedNotebook == other.__isset.linkedNotebook) && ((!__isset.linkedNotebook) || (global::System.Object.Equals(LinkedNotebook, other.LinkedNotebook))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((LinkedNotebook != null) && __isset.linkedNotebook)
            {
              hashcode = (hashcode * 397) + LinkedNotebook.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1880 = new StringBuilder("updateLinkedNotebook_args(");
          int tmp1881 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1881++) { tmp1880.Append(", "); }
            tmp1880.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1880);
          }
          if((LinkedNotebook != null) && __isset.linkedNotebook)
          {
            if(0 < tmp1881++) { tmp1880.Append(", "); }
            tmp1880.Append("LinkedNotebook: ");
            LinkedNotebook.ToString(tmp1880);
          }
          tmp1880.Append(')');
          return tmp1880.ToString();
        }
      }


      public partial class updateLinkedNotebook_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public updateLinkedNotebook_result()
        {
        }

        public updateLinkedNotebook_result DeepCopy()
        {
          var tmp1882 = new updateLinkedNotebook_result();
          if(__isset.success)
          {
            tmp1882.Success = this.Success;
          }
          tmp1882.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1882.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1882.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1882.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1882.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1882.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1882.__isset.systemException = this.__isset.systemException;
          return tmp1882;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1883 = new TStruct("updateLinkedNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1883, cancellationToken);
            var tmp1884 = new TField();

            if(this.__isset.success)
            {
              tmp1884.Name = "Success";
              tmp1884.Type = TType.I32;
              tmp1884.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1884, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1884.Name = "UserException";
                tmp1884.Type = TType.Struct;
                tmp1884.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1884, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1884.Name = "NotFoundException";
                tmp1884.Type = TType.Struct;
                tmp1884.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1884, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1884.Name = "SystemException";
                tmp1884.Type = TType.Struct;
                tmp1884.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1884, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateLinkedNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1885 = new StringBuilder("updateLinkedNotebook_result(");
          int tmp1886 = 0;
          if(__isset.success)
          {
            if(0 < tmp1886++) { tmp1885.Append(", "); }
            tmp1885.Append("Success: ");
            Success.ToString(tmp1885);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1886++) { tmp1885.Append(", "); }
            tmp1885.Append("UserException: ");
            UserException.ToString(tmp1885);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1886++) { tmp1885.Append(", "); }
            tmp1885.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1885);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1886++) { tmp1885.Append(", "); }
            tmp1885.Append("SystemException: ");
            SystemException.ToString(tmp1885);
          }
          tmp1885.Append(')');
          return tmp1885.ToString();
        }
      }


      public partial class listLinkedNotebooks_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public listLinkedNotebooks_args()
        {
        }

        public listLinkedNotebooks_args DeepCopy()
        {
          var tmp1887 = new listLinkedNotebooks_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1887.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1887.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1887;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1888 = new TStruct("listLinkedNotebooks_args");
            await oprot.WriteStructBeginAsync(tmp1888, cancellationToken);
            var tmp1889 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1889.Name = "authenticationToken";
              tmp1889.Type = TType.String;
              tmp1889.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1889, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listLinkedNotebooks_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1890 = new StringBuilder("listLinkedNotebooks_args(");
          int tmp1891 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1891++) { tmp1890.Append(", "); }
            tmp1890.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1890);
          }
          tmp1890.Append(')');
          return tmp1890.ToString();
        }
      }


      public partial class listLinkedNotebooks_result : TBase
      {
        private List<global::Evernote.EDAM.Type.LinkedNotebook> _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public List<global::Evernote.EDAM.Type.LinkedNotebook> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public listLinkedNotebooks_result()
        {
        }

        public listLinkedNotebooks_result DeepCopy()
        {
          var tmp1892 = new listLinkedNotebooks_result();
          if((Success != null) && __isset.success)
          {
            tmp1892.Success = this.Success.DeepCopy();
          }
          tmp1892.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1892.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1892.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1892.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1892.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1892.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1892.__isset.systemException = this.__isset.systemException;
          return tmp1892;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1893 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Evernote.EDAM.Type.LinkedNotebook>(_list1893.Count);
                      for(int _i1894 = 0; _i1894 < _list1893.Count; ++_i1894)
                      {
                        global::Evernote.EDAM.Type.LinkedNotebook _elem1895;
                        _elem1895 = new global::Evernote.EDAM.Type.LinkedNotebook();
                        await _elem1895.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1895);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1896 = new TStruct("listLinkedNotebooks_result");
            await oprot.WriteStructBeginAsync(tmp1896, cancellationToken);
            var tmp1897 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1897.Name = "Success";
                tmp1897.Type = TType.List;
                tmp1897.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1897, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Evernote.EDAM.Type.LinkedNotebook _iter1898 in Success)
                  {
                    await _iter1898.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1897.Name = "UserException";
                tmp1897.Type = TType.Struct;
                tmp1897.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1897, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1897.Name = "NotFoundException";
                tmp1897.Type = TType.Struct;
                tmp1897.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1897, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1897.Name = "SystemException";
                tmp1897.Type = TType.Struct;
                tmp1897.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1897, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listLinkedNotebooks_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1899 = new StringBuilder("listLinkedNotebooks_result(");
          int tmp1900 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1900++) { tmp1899.Append(", "); }
            tmp1899.Append("Success: ");
            Success.ToString(tmp1899);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1900++) { tmp1899.Append(", "); }
            tmp1899.Append("UserException: ");
            UserException.ToString(tmp1899);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1900++) { tmp1899.Append(", "); }
            tmp1899.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1899);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1900++) { tmp1899.Append(", "); }
            tmp1899.Append("SystemException: ");
            SystemException.ToString(tmp1899);
          }
          tmp1899.Append(')');
          return tmp1899.ToString();
        }
      }


      public partial class expungeLinkedNotebook_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public expungeLinkedNotebook_args()
        {
        }

        public expungeLinkedNotebook_args DeepCopy()
        {
          var tmp1901 = new expungeLinkedNotebook_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1901.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1901.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1901.Guid = this.Guid;
          }
          tmp1901.__isset.guid = this.__isset.guid;
          return tmp1901;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1902 = new TStruct("expungeLinkedNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1902, cancellationToken);
            var tmp1903 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1903.Name = "authenticationToken";
              tmp1903.Type = TType.String;
              tmp1903.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1903, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1903.Name = "guid";
              tmp1903.Type = TType.String;
              tmp1903.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1903, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeLinkedNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1904 = new StringBuilder("expungeLinkedNotebook_args(");
          int tmp1905 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1905++) { tmp1904.Append(", "); }
            tmp1904.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1904);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1905++) { tmp1904.Append(", "); }
            tmp1904.Append("Guid: ");
            Guid.ToString(tmp1904);
          }
          tmp1904.Append(')');
          return tmp1904.ToString();
        }
      }


      public partial class expungeLinkedNotebook_result : TBase
      {
        private int _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public expungeLinkedNotebook_result()
        {
        }

        public expungeLinkedNotebook_result DeepCopy()
        {
          var tmp1906 = new expungeLinkedNotebook_result();
          if(__isset.success)
          {
            tmp1906.Success = this.Success;
          }
          tmp1906.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1906.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1906.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1906.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1906.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1906.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1906.__isset.systemException = this.__isset.systemException;
          return tmp1906;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1907 = new TStruct("expungeLinkedNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1907, cancellationToken);
            var tmp1908 = new TField();

            if(this.__isset.success)
            {
              tmp1908.Name = "Success";
              tmp1908.Type = TType.I32;
              tmp1908.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1908, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1908.Name = "UserException";
                tmp1908.Type = TType.Struct;
                tmp1908.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1908, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1908.Name = "NotFoundException";
                tmp1908.Type = TType.Struct;
                tmp1908.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1908, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1908.Name = "SystemException";
                tmp1908.Type = TType.Struct;
                tmp1908.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1908, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is expungeLinkedNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1909 = new StringBuilder("expungeLinkedNotebook_result(");
          int tmp1910 = 0;
          if(__isset.success)
          {
            if(0 < tmp1910++) { tmp1909.Append(", "); }
            tmp1909.Append("Success: ");
            Success.ToString(tmp1909);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1910++) { tmp1909.Append(", "); }
            tmp1909.Append("UserException: ");
            UserException.ToString(tmp1909);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1910++) { tmp1909.Append(", "); }
            tmp1909.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1909);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1910++) { tmp1909.Append(", "); }
            tmp1909.Append("SystemException: ");
            SystemException.ToString(tmp1909);
          }
          tmp1909.Append(')');
          return tmp1909.ToString();
        }
      }


      public partial class authenticateToSharedNotebook_args : TBase
      {
        private string _shareKeyOrGlobalId;
        private string _authenticationToken;

        public string ShareKeyOrGlobalId
        {
          get
          {
            return _shareKeyOrGlobalId;
          }
          set
          {
            __isset.shareKeyOrGlobalId = true;
            this._shareKeyOrGlobalId = value;
          }
        }

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool shareKeyOrGlobalId;
          public bool authenticationToken;
        }

        public authenticateToSharedNotebook_args()
        {
        }

        public authenticateToSharedNotebook_args DeepCopy()
        {
          var tmp1911 = new authenticateToSharedNotebook_args();
          if((ShareKeyOrGlobalId != null) && __isset.shareKeyOrGlobalId)
          {
            tmp1911.ShareKeyOrGlobalId = this.ShareKeyOrGlobalId;
          }
          tmp1911.__isset.shareKeyOrGlobalId = this.__isset.shareKeyOrGlobalId;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1911.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1911.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1911;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ShareKeyOrGlobalId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1912 = new TStruct("authenticateToSharedNotebook_args");
            await oprot.WriteStructBeginAsync(tmp1912, cancellationToken);
            var tmp1913 = new TField();
            if((ShareKeyOrGlobalId != null) && __isset.shareKeyOrGlobalId)
            {
              tmp1913.Name = "shareKeyOrGlobalId";
              tmp1913.Type = TType.String;
              tmp1913.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1913, cancellationToken);
              await oprot.WriteStringAsync(ShareKeyOrGlobalId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1913.Name = "authenticationToken";
              tmp1913.Type = TType.String;
              tmp1913.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1913, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToSharedNotebook_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.shareKeyOrGlobalId == other.__isset.shareKeyOrGlobalId) && ((!__isset.shareKeyOrGlobalId) || (global::System.Object.Equals(ShareKeyOrGlobalId, other.ShareKeyOrGlobalId))))
            && ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ShareKeyOrGlobalId != null) && __isset.shareKeyOrGlobalId)
            {
              hashcode = (hashcode * 397) + ShareKeyOrGlobalId.GetHashCode();
            }
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1914 = new StringBuilder("authenticateToSharedNotebook_args(");
          int tmp1915 = 0;
          if((ShareKeyOrGlobalId != null) && __isset.shareKeyOrGlobalId)
          {
            if(0 < tmp1915++) { tmp1914.Append(", "); }
            tmp1914.Append("ShareKeyOrGlobalId: ");
            ShareKeyOrGlobalId.ToString(tmp1914);
          }
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1915++) { tmp1914.Append(", "); }
            tmp1914.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1914);
          }
          tmp1914.Append(')');
          return tmp1914.ToString();
        }
      }


      public partial class authenticateToSharedNotebook_result : TBase
      {
        private global::Evernote.EDAM.UserStore.AuthenticationResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.AuthenticationResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public authenticateToSharedNotebook_result()
        {
        }

        public authenticateToSharedNotebook_result DeepCopy()
        {
          var tmp1916 = new authenticateToSharedNotebook_result();
          if((Success != null) && __isset.success)
          {
            tmp1916.Success = (global::Evernote.EDAM.UserStore.AuthenticationResult)this.Success.DeepCopy();
          }
          tmp1916.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1916.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1916.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1916.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1916.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1916.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1916.__isset.systemException = this.__isset.systemException;
          return tmp1916;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.AuthenticationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1917 = new TStruct("authenticateToSharedNotebook_result");
            await oprot.WriteStructBeginAsync(tmp1917, cancellationToken);
            var tmp1918 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1918.Name = "Success";
                tmp1918.Type = TType.Struct;
                tmp1918.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1918, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1918.Name = "UserException";
                tmp1918.Type = TType.Struct;
                tmp1918.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1918, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1918.Name = "NotFoundException";
                tmp1918.Type = TType.Struct;
                tmp1918.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1918, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1918.Name = "SystemException";
                tmp1918.Type = TType.Struct;
                tmp1918.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1918, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToSharedNotebook_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1919 = new StringBuilder("authenticateToSharedNotebook_result(");
          int tmp1920 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1920++) { tmp1919.Append(", "); }
            tmp1919.Append("Success: ");
            Success.ToString(tmp1919);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1920++) { tmp1919.Append(", "); }
            tmp1919.Append("UserException: ");
            UserException.ToString(tmp1919);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1920++) { tmp1919.Append(", "); }
            tmp1919.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1919);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1920++) { tmp1919.Append(", "); }
            tmp1919.Append("SystemException: ");
            SystemException.ToString(tmp1919);
          }
          tmp1919.Append(')');
          return tmp1919.ToString();
        }
      }


      public partial class getSharedNotebookByAuth_args : TBase
      {
        private string _authenticationToken;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
        }

        public getSharedNotebookByAuth_args()
        {
        }

        public getSharedNotebookByAuth_args DeepCopy()
        {
          var tmp1921 = new getSharedNotebookByAuth_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1921.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1921.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1921;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1922 = new TStruct("getSharedNotebookByAuth_args");
            await oprot.WriteStructBeginAsync(tmp1922, cancellationToken);
            var tmp1923 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1923.Name = "authenticationToken";
              tmp1923.Type = TType.String;
              tmp1923.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1923, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSharedNotebookByAuth_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1924 = new StringBuilder("getSharedNotebookByAuth_args(");
          int tmp1925 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1925++) { tmp1924.Append(", "); }
            tmp1924.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1924);
          }
          tmp1924.Append(')');
          return tmp1924.ToString();
        }
      }


      public partial class getSharedNotebookByAuth_result : TBase
      {
        private global::Evernote.EDAM.Type.SharedNotebook _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Type.SharedNotebook Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public getSharedNotebookByAuth_result()
        {
        }

        public getSharedNotebookByAuth_result DeepCopy()
        {
          var tmp1926 = new getSharedNotebookByAuth_result();
          if((Success != null) && __isset.success)
          {
            tmp1926.Success = (global::Evernote.EDAM.Type.SharedNotebook)this.Success.DeepCopy();
          }
          tmp1926.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1926.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1926.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1926.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1926.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1926.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1926.__isset.systemException = this.__isset.systemException;
          return tmp1926;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.Type.SharedNotebook();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1927 = new TStruct("getSharedNotebookByAuth_result");
            await oprot.WriteStructBeginAsync(tmp1927, cancellationToken);
            var tmp1928 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1928.Name = "Success";
                tmp1928.Type = TType.Struct;
                tmp1928.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1928, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1928.Name = "UserException";
                tmp1928.Type = TType.Struct;
                tmp1928.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1928, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1928.Name = "NotFoundException";
                tmp1928.Type = TType.Struct;
                tmp1928.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1928, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1928.Name = "SystemException";
                tmp1928.Type = TType.Struct;
                tmp1928.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1928, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSharedNotebookByAuth_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1929 = new StringBuilder("getSharedNotebookByAuth_result(");
          int tmp1930 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1930++) { tmp1929.Append(", "); }
            tmp1929.Append("Success: ");
            Success.ToString(tmp1929);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1930++) { tmp1929.Append(", "); }
            tmp1929.Append("UserException: ");
            UserException.ToString(tmp1929);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1930++) { tmp1929.Append(", "); }
            tmp1929.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1929);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1930++) { tmp1929.Append(", "); }
            tmp1929.Append("SystemException: ");
            SystemException.ToString(tmp1929);
          }
          tmp1929.Append(')');
          return tmp1929.ToString();
        }
      }


      public partial class emailNote_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.NoteEmailParameters _parameters;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.NoteEmailParameters Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool parameters;
        }

        public emailNote_args()
        {
        }

        public emailNote_args DeepCopy()
        {
          var tmp1931 = new emailNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1931.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1931.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Parameters != null) && __isset.parameters)
          {
            tmp1931.Parameters = (global::Evernote.EDAM.NoteStore.NoteEmailParameters)this.Parameters.DeepCopy();
          }
          tmp1931.__isset.parameters = this.__isset.parameters;
          return tmp1931;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Parameters = new global::Evernote.EDAM.NoteStore.NoteEmailParameters();
                    await Parameters.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1932 = new TStruct("emailNote_args");
            await oprot.WriteStructBeginAsync(tmp1932, cancellationToken);
            var tmp1933 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1933.Name = "authenticationToken";
              tmp1933.Type = TType.String;
              tmp1933.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1933, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.parameters)
            {
              tmp1933.Name = "parameters";
              tmp1933.Type = TType.Struct;
              tmp1933.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1933, cancellationToken);
              await Parameters.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is emailNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.parameters == other.__isset.parameters) && ((!__isset.parameters) || (global::System.Object.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Parameters != null) && __isset.parameters)
            {
              hashcode = (hashcode * 397) + Parameters.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1934 = new StringBuilder("emailNote_args(");
          int tmp1935 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1935++) { tmp1934.Append(", "); }
            tmp1934.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1934);
          }
          if((Parameters != null) && __isset.parameters)
          {
            if(0 < tmp1935++) { tmp1934.Append(", "); }
            tmp1934.Append("Parameters: ");
            Parameters.ToString(tmp1934);
          }
          tmp1934.Append(')');
          return tmp1934.ToString();
        }
      }


      public partial class emailNote_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public emailNote_result()
        {
        }

        public emailNote_result DeepCopy()
        {
          var tmp1936 = new emailNote_result();
          if((UserException != null) && __isset.userException)
          {
            tmp1936.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1936.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1936.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1936.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1936.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1936.__isset.systemException = this.__isset.systemException;
          return tmp1936;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1937 = new TStruct("emailNote_result");
            await oprot.WriteStructBeginAsync(tmp1937, cancellationToken);
            var tmp1938 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1938.Name = "UserException";
                tmp1938.Type = TType.Struct;
                tmp1938.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1938, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1938.Name = "NotFoundException";
                tmp1938.Type = TType.Struct;
                tmp1938.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1938, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1938.Name = "SystemException";
                tmp1938.Type = TType.Struct;
                tmp1938.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1938, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is emailNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1939 = new StringBuilder("emailNote_result(");
          int tmp1940 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1940++) { tmp1939.Append(", "); }
            tmp1939.Append("UserException: ");
            UserException.ToString(tmp1939);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1940++) { tmp1939.Append(", "); }
            tmp1939.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1939);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1940++) { tmp1939.Append(", "); }
            tmp1939.Append("SystemException: ");
            SystemException.ToString(tmp1939);
          }
          tmp1939.Append(')');
          return tmp1939.ToString();
        }
      }


      public partial class shareNote_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public shareNote_args()
        {
        }

        public shareNote_args DeepCopy()
        {
          var tmp1941 = new shareNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1941.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1941.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1941.Guid = this.Guid;
          }
          tmp1941.__isset.guid = this.__isset.guid;
          return tmp1941;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1942 = new TStruct("shareNote_args");
            await oprot.WriteStructBeginAsync(tmp1942, cancellationToken);
            var tmp1943 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1943.Name = "authenticationToken";
              tmp1943.Type = TType.String;
              tmp1943.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1943, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1943.Name = "guid";
              tmp1943.Type = TType.String;
              tmp1943.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1943, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shareNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1944 = new StringBuilder("shareNote_args(");
          int tmp1945 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1945++) { tmp1944.Append(", "); }
            tmp1944.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1944);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1945++) { tmp1944.Append(", "); }
            tmp1944.Append("Guid: ");
            Guid.ToString(tmp1944);
          }
          tmp1944.Append(')');
          return tmp1944.ToString();
        }
      }


      public partial class shareNote_result : TBase
      {
        private string _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public shareNote_result()
        {
        }

        public shareNote_result DeepCopy()
        {
          var tmp1946 = new shareNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1946.Success = this.Success;
          }
          tmp1946.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1946.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1946.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1946.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1946.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1946.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1946.__isset.systemException = this.__isset.systemException;
          return tmp1946;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1947 = new TStruct("shareNote_result");
            await oprot.WriteStructBeginAsync(tmp1947, cancellationToken);
            var tmp1948 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1948.Name = "Success";
                tmp1948.Type = TType.String;
                tmp1948.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1948, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1948.Name = "UserException";
                tmp1948.Type = TType.Struct;
                tmp1948.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1948, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1948.Name = "NotFoundException";
                tmp1948.Type = TType.Struct;
                tmp1948.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1948, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1948.Name = "SystemException";
                tmp1948.Type = TType.Struct;
                tmp1948.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1948, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shareNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1949 = new StringBuilder("shareNote_result(");
          int tmp1950 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1950++) { tmp1949.Append(", "); }
            tmp1949.Append("Success: ");
            Success.ToString(tmp1949);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1950++) { tmp1949.Append(", "); }
            tmp1949.Append("UserException: ");
            UserException.ToString(tmp1949);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1950++) { tmp1949.Append(", "); }
            tmp1949.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1949);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1950++) { tmp1949.Append(", "); }
            tmp1949.Append("SystemException: ");
            SystemException.ToString(tmp1949);
          }
          tmp1949.Append(')');
          return tmp1949.ToString();
        }
      }


      public partial class stopSharingNote_args : TBase
      {
        private string _authenticationToken;
        private string _guid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool guid;
        }

        public stopSharingNote_args()
        {
        }

        public stopSharingNote_args DeepCopy()
        {
          var tmp1951 = new stopSharingNote_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1951.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1951.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Guid != null) && __isset.guid)
          {
            tmp1951.Guid = this.Guid;
          }
          tmp1951.__isset.guid = this.__isset.guid;
          return tmp1951;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1952 = new TStruct("stopSharingNote_args");
            await oprot.WriteStructBeginAsync(tmp1952, cancellationToken);
            var tmp1953 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1953.Name = "authenticationToken";
              tmp1953.Type = TType.String;
              tmp1953.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1953, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Guid != null) && __isset.guid)
            {
              tmp1953.Name = "guid";
              tmp1953.Type = TType.String;
              tmp1953.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1953, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopSharingNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1954 = new StringBuilder("stopSharingNote_args(");
          int tmp1955 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1955++) { tmp1954.Append(", "); }
            tmp1954.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1954);
          }
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1955++) { tmp1954.Append(", "); }
            tmp1954.Append("Guid: ");
            Guid.ToString(tmp1954);
          }
          tmp1954.Append(')');
          return tmp1954.ToString();
        }
      }


      public partial class stopSharingNote_result : TBase
      {
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public stopSharingNote_result()
        {
        }

        public stopSharingNote_result DeepCopy()
        {
          var tmp1956 = new stopSharingNote_result();
          if((UserException != null) && __isset.userException)
          {
            tmp1956.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1956.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1956.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1956.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1956.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1956.__isset.systemException = this.__isset.systemException;
          return tmp1956;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1957 = new TStruct("stopSharingNote_result");
            await oprot.WriteStructBeginAsync(tmp1957, cancellationToken);
            var tmp1958 = new TField();

            if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1958.Name = "UserException";
                tmp1958.Type = TType.Struct;
                tmp1958.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1958, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1958.Name = "NotFoundException";
                tmp1958.Type = TType.Struct;
                tmp1958.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1958, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1958.Name = "SystemException";
                tmp1958.Type = TType.Struct;
                tmp1958.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1958, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopSharingNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1959 = new StringBuilder("stopSharingNote_result(");
          int tmp1960 = 0;
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1960++) { tmp1959.Append(", "); }
            tmp1959.Append("UserException: ");
            UserException.ToString(tmp1959);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1960++) { tmp1959.Append(", "); }
            tmp1959.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1959);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1960++) { tmp1959.Append(", "); }
            tmp1959.Append("SystemException: ");
            SystemException.ToString(tmp1959);
          }
          tmp1959.Append(')');
          return tmp1959.ToString();
        }
      }


      public partial class authenticateToSharedNote_args : TBase
      {
        private string _guid;
        private string _noteKey;
        private string _authenticationToken;

        public string Guid
        {
          get
          {
            return _guid;
          }
          set
          {
            __isset.guid = true;
            this._guid = value;
          }
        }

        public string NoteKey
        {
          get
          {
            return _noteKey;
          }
          set
          {
            __isset.noteKey = true;
            this._noteKey = value;
          }
        }

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool guid;
          public bool noteKey;
          public bool authenticationToken;
        }

        public authenticateToSharedNote_args()
        {
        }

        public authenticateToSharedNote_args DeepCopy()
        {
          var tmp1961 = new authenticateToSharedNote_args();
          if((Guid != null) && __isset.guid)
          {
            tmp1961.Guid = this.Guid;
          }
          tmp1961.__isset.guid = this.__isset.guid;
          if((NoteKey != null) && __isset.noteKey)
          {
            tmp1961.NoteKey = this.NoteKey;
          }
          tmp1961.__isset.noteKey = this.__isset.noteKey;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1961.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1961.__isset.authenticationToken = this.__isset.authenticationToken;
          return tmp1961;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Guid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NoteKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1962 = new TStruct("authenticateToSharedNote_args");
            await oprot.WriteStructBeginAsync(tmp1962, cancellationToken);
            var tmp1963 = new TField();
            if((Guid != null) && __isset.guid)
            {
              tmp1963.Name = "guid";
              tmp1963.Type = TType.String;
              tmp1963.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1963, cancellationToken);
              await oprot.WriteStringAsync(Guid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NoteKey != null) && __isset.noteKey)
            {
              tmp1963.Name = "noteKey";
              tmp1963.Type = TType.String;
              tmp1963.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1963, cancellationToken);
              await oprot.WriteStringAsync(NoteKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1963.Name = "authenticationToken";
              tmp1963.Type = TType.String;
              tmp1963.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1963, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToSharedNote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
            && ((__isset.noteKey == other.__isset.noteKey) && ((!__isset.noteKey) || (global::System.Object.Equals(NoteKey, other.NoteKey))))
            && ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Guid != null) && __isset.guid)
            {
              hashcode = (hashcode * 397) + Guid.GetHashCode();
            }
            if((NoteKey != null) && __isset.noteKey)
            {
              hashcode = (hashcode * 397) + NoteKey.GetHashCode();
            }
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1964 = new StringBuilder("authenticateToSharedNote_args(");
          int tmp1965 = 0;
          if((Guid != null) && __isset.guid)
          {
            if(0 < tmp1965++) { tmp1964.Append(", "); }
            tmp1964.Append("Guid: ");
            Guid.ToString(tmp1964);
          }
          if((NoteKey != null) && __isset.noteKey)
          {
            if(0 < tmp1965++) { tmp1964.Append(", "); }
            tmp1964.Append("NoteKey: ");
            NoteKey.ToString(tmp1964);
          }
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1965++) { tmp1964.Append(", "); }
            tmp1964.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1964);
          }
          tmp1964.Append(')');
          return tmp1964.ToString();
        }
      }


      public partial class authenticateToSharedNote_result : TBase
      {
        private global::Evernote.EDAM.UserStore.AuthenticationResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.UserStore.AuthenticationResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public authenticateToSharedNote_result()
        {
        }

        public authenticateToSharedNote_result DeepCopy()
        {
          var tmp1966 = new authenticateToSharedNote_result();
          if((Success != null) && __isset.success)
          {
            tmp1966.Success = (global::Evernote.EDAM.UserStore.AuthenticationResult)this.Success.DeepCopy();
          }
          tmp1966.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1966.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1966.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1966.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1966.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1966.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1966.__isset.systemException = this.__isset.systemException;
          return tmp1966;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.UserStore.AuthenticationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1967 = new TStruct("authenticateToSharedNote_result");
            await oprot.WriteStructBeginAsync(tmp1967, cancellationToken);
            var tmp1968 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1968.Name = "Success";
                tmp1968.Type = TType.Struct;
                tmp1968.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1968, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1968.Name = "UserException";
                tmp1968.Type = TType.Struct;
                tmp1968.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1968, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1968.Name = "NotFoundException";
                tmp1968.Type = TType.Struct;
                tmp1968.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1968, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1968.Name = "SystemException";
                tmp1968.Type = TType.Struct;
                tmp1968.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1968, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticateToSharedNote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1969 = new StringBuilder("authenticateToSharedNote_result(");
          int tmp1970 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1970++) { tmp1969.Append(", "); }
            tmp1969.Append("Success: ");
            Success.ToString(tmp1969);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1970++) { tmp1969.Append(", "); }
            tmp1969.Append("UserException: ");
            UserException.ToString(tmp1969);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1970++) { tmp1969.Append(", "); }
            tmp1969.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1969);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1970++) { tmp1969.Append(", "); }
            tmp1969.Append("SystemException: ");
            SystemException.ToString(tmp1969);
          }
          tmp1969.Append(')');
          return tmp1969.ToString();
        }
      }


      public partial class findRelated_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.RelatedQuery _query;
        private global::Evernote.EDAM.NoteStore.RelatedResultSpec _resultSpec;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.RelatedQuery Query
        {
          get
          {
            return _query;
          }
          set
          {
            __isset.query = true;
            this._query = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.RelatedResultSpec ResultSpec
        {
          get
          {
            return _resultSpec;
          }
          set
          {
            __isset.resultSpec = true;
            this._resultSpec = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool query;
          public bool resultSpec;
        }

        public findRelated_args()
        {
        }

        public findRelated_args DeepCopy()
        {
          var tmp1971 = new findRelated_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1971.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1971.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Query != null) && __isset.query)
          {
            tmp1971.Query = (global::Evernote.EDAM.NoteStore.RelatedQuery)this.Query.DeepCopy();
          }
          tmp1971.__isset.query = this.__isset.query;
          if((ResultSpec != null) && __isset.resultSpec)
          {
            tmp1971.ResultSpec = (global::Evernote.EDAM.NoteStore.RelatedResultSpec)this.ResultSpec.DeepCopy();
          }
          tmp1971.__isset.resultSpec = this.__isset.resultSpec;
          return tmp1971;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Query = new global::Evernote.EDAM.NoteStore.RelatedQuery();
                    await Query.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    ResultSpec = new global::Evernote.EDAM.NoteStore.RelatedResultSpec();
                    await ResultSpec.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1972 = new TStruct("findRelated_args");
            await oprot.WriteStructBeginAsync(tmp1972, cancellationToken);
            var tmp1973 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1973.Name = "authenticationToken";
              tmp1973.Type = TType.String;
              tmp1973.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1973, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Query != null) && __isset.query)
            {
              tmp1973.Name = "query";
              tmp1973.Type = TType.Struct;
              tmp1973.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1973, cancellationToken);
              await Query.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              tmp1973.Name = "resultSpec";
              tmp1973.Type = TType.Struct;
              tmp1973.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1973, cancellationToken);
              await ResultSpec.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findRelated_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.query == other.__isset.query) && ((!__isset.query) || (global::System.Object.Equals(Query, other.Query))))
            && ((__isset.resultSpec == other.__isset.resultSpec) && ((!__isset.resultSpec) || (global::System.Object.Equals(ResultSpec, other.ResultSpec))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Query != null) && __isset.query)
            {
              hashcode = (hashcode * 397) + Query.GetHashCode();
            }
            if((ResultSpec != null) && __isset.resultSpec)
            {
              hashcode = (hashcode * 397) + ResultSpec.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1974 = new StringBuilder("findRelated_args(");
          int tmp1975 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1975++) { tmp1974.Append(", "); }
            tmp1974.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1974);
          }
          if((Query != null) && __isset.query)
          {
            if(0 < tmp1975++) { tmp1974.Append(", "); }
            tmp1974.Append("Query: ");
            Query.ToString(tmp1974);
          }
          if((ResultSpec != null) && __isset.resultSpec)
          {
            if(0 < tmp1975++) { tmp1974.Append(", "); }
            tmp1974.Append("ResultSpec: ");
            ResultSpec.ToString(tmp1974);
          }
          tmp1974.Append(')');
          return tmp1974.ToString();
        }
      }


      public partial class findRelated_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.RelatedResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

        public global::Evernote.EDAM.NoteStore.RelatedResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool systemException;
          public bool notFoundException;
        }

        public findRelated_result()
        {
        }

        public findRelated_result DeepCopy()
        {
          var tmp1976 = new findRelated_result();
          if((Success != null) && __isset.success)
          {
            tmp1976.Success = (global::Evernote.EDAM.NoteStore.RelatedResult)this.Success.DeepCopy();
          }
          tmp1976.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1976.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1976.__isset.userException = this.__isset.userException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1976.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1976.__isset.systemException = this.__isset.systemException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1976.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1976.__isset.notFoundException = this.__isset.notFoundException;
          return tmp1976;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.RelatedResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1977 = new TStruct("findRelated_result");
            await oprot.WriteStructBeginAsync(tmp1977, cancellationToken);
            var tmp1978 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1978.Name = "Success";
                tmp1978.Type = TType.Struct;
                tmp1978.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1978, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1978.Name = "UserException";
                tmp1978.Type = TType.Struct;
                tmp1978.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1978, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1978.Name = "SystemException";
                tmp1978.Type = TType.Struct;
                tmp1978.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1978, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1978.Name = "NotFoundException";
                tmp1978.Type = TType.Struct;
                tmp1978.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1978, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is findRelated_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1979 = new StringBuilder("findRelated_result(");
          int tmp1980 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1980++) { tmp1979.Append(", "); }
            tmp1979.Append("Success: ");
            Success.ToString(tmp1979);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1980++) { tmp1979.Append(", "); }
            tmp1979.Append("UserException: ");
            UserException.ToString(tmp1979);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1980++) { tmp1979.Append(", "); }
            tmp1979.Append("SystemException: ");
            SystemException.ToString(tmp1979);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1980++) { tmp1979.Append(", "); }
            tmp1979.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1979);
          }
          tmp1979.Append(')');
          return tmp1979.ToString();
        }
      }


      public partial class updateNoteIfUsnMatches_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.Type.Note _note;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.Type.Note Note
        {
          get
          {
            return _note;
          }
          set
          {
            __isset.note = true;
            this._note = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool note;
        }

        public updateNoteIfUsnMatches_args()
        {
        }

        public updateNoteIfUsnMatches_args DeepCopy()
        {
          var tmp1981 = new updateNoteIfUsnMatches_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1981.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1981.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Note != null) && __isset.note)
          {
            tmp1981.Note = (global::Evernote.EDAM.Type.Note)this.Note.DeepCopy();
          }
          tmp1981.__isset.note = this.__isset.note;
          return tmp1981;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Note = new global::Evernote.EDAM.Type.Note();
                    await Note.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1982 = new TStruct("updateNoteIfUsnMatches_args");
            await oprot.WriteStructBeginAsync(tmp1982, cancellationToken);
            var tmp1983 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1983.Name = "authenticationToken";
              tmp1983.Type = TType.String;
              tmp1983.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1983, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Note != null) && __isset.note)
            {
              tmp1983.Name = "note";
              tmp1983.Type = TType.Struct;
              tmp1983.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1983, cancellationToken);
              await Note.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNoteIfUsnMatches_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.note == other.__isset.note) && ((!__isset.note) || (global::System.Object.Equals(Note, other.Note))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Note != null) && __isset.note)
            {
              hashcode = (hashcode * 397) + Note.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1984 = new StringBuilder("updateNoteIfUsnMatches_args(");
          int tmp1985 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1985++) { tmp1984.Append(", "); }
            tmp1984.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1984);
          }
          if((Note != null) && __isset.note)
          {
            if(0 < tmp1985++) { tmp1984.Append(", "); }
            tmp1984.Append("Note: ");
            Note.ToString(tmp1984);
          }
          tmp1984.Append(')');
          return tmp1984.ToString();
        }
      }


      public partial class updateNoteIfUsnMatches_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public updateNoteIfUsnMatches_result()
        {
        }

        public updateNoteIfUsnMatches_result DeepCopy()
        {
          var tmp1986 = new updateNoteIfUsnMatches_result();
          if((Success != null) && __isset.success)
          {
            tmp1986.Success = (global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult)this.Success.DeepCopy();
          }
          tmp1986.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1986.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1986.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1986.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1986.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1986.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1986.__isset.systemException = this.__isset.systemException;
          return tmp1986;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.UpdateNoteIfUsnMatchesResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1987 = new TStruct("updateNoteIfUsnMatches_result");
            await oprot.WriteStructBeginAsync(tmp1987, cancellationToken);
            var tmp1988 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1988.Name = "Success";
                tmp1988.Type = TType.Struct;
                tmp1988.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1988, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1988.Name = "UserException";
                tmp1988.Type = TType.Struct;
                tmp1988.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1988, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1988.Name = "NotFoundException";
                tmp1988.Type = TType.Struct;
                tmp1988.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1988, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1988.Name = "SystemException";
                tmp1988.Type = TType.Struct;
                tmp1988.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1988, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateNoteIfUsnMatches_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1989 = new StringBuilder("updateNoteIfUsnMatches_result(");
          int tmp1990 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1990++) { tmp1989.Append(", "); }
            tmp1989.Append("Success: ");
            Success.ToString(tmp1989);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp1990++) { tmp1989.Append(", "); }
            tmp1989.Append("UserException: ");
            UserException.ToString(tmp1989);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp1990++) { tmp1989.Append(", "); }
            tmp1989.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1989);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp1990++) { tmp1989.Append(", "); }
            tmp1989.Append("SystemException: ");
            SystemException.ToString(tmp1989);
          }
          tmp1989.Append(')');
          return tmp1989.ToString();
        }
      }


      public partial class manageNotebookShares_args : TBase
      {
        private string _authenticationToken;
        private global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters _parameters;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool parameters;
        }

        public manageNotebookShares_args()
        {
        }

        public manageNotebookShares_args DeepCopy()
        {
          var tmp1991 = new manageNotebookShares_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp1991.AuthenticationToken = this.AuthenticationToken;
          }
          tmp1991.__isset.authenticationToken = this.__isset.authenticationToken;
          if((Parameters != null) && __isset.parameters)
          {
            tmp1991.Parameters = (global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters)this.Parameters.DeepCopy();
          }
          tmp1991.__isset.parameters = this.__isset.parameters;
          return tmp1991;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Parameters = new global::Evernote.EDAM.NoteStore.ManageNotebookSharesParameters();
                    await Parameters.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1992 = new TStruct("manageNotebookShares_args");
            await oprot.WriteStructBeginAsync(tmp1992, cancellationToken);
            var tmp1993 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp1993.Name = "authenticationToken";
              tmp1993.Type = TType.String;
              tmp1993.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1993, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.parameters)
            {
              tmp1993.Name = "parameters";
              tmp1993.Type = TType.Struct;
              tmp1993.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1993, cancellationToken);
              await Parameters.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is manageNotebookShares_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.parameters == other.__isset.parameters) && ((!__isset.parameters) || (global::System.Object.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((Parameters != null) && __isset.parameters)
            {
              hashcode = (hashcode * 397) + Parameters.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1994 = new StringBuilder("manageNotebookShares_args(");
          int tmp1995 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp1995++) { tmp1994.Append(", "); }
            tmp1994.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp1994);
          }
          if((Parameters != null) && __isset.parameters)
          {
            if(0 < tmp1995++) { tmp1994.Append(", "); }
            tmp1994.Append("Parameters: ");
            Parameters.ToString(tmp1994);
          }
          tmp1994.Append(')');
          return tmp1994.ToString();
        }
      }


      public partial class manageNotebookShares_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public manageNotebookShares_result()
        {
        }

        public manageNotebookShares_result DeepCopy()
        {
          var tmp1996 = new manageNotebookShares_result();
          if((Success != null) && __isset.success)
          {
            tmp1996.Success = (global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult)this.Success.DeepCopy();
          }
          tmp1996.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp1996.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp1996.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp1996.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp1996.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp1996.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp1996.__isset.systemException = this.__isset.systemException;
          return tmp1996;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.ManageNotebookSharesResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1997 = new TStruct("manageNotebookShares_result");
            await oprot.WriteStructBeginAsync(tmp1997, cancellationToken);
            var tmp1998 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1998.Name = "Success";
                tmp1998.Type = TType.Struct;
                tmp1998.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1998, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp1998.Name = "UserException";
                tmp1998.Type = TType.Struct;
                tmp1998.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1998, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp1998.Name = "NotFoundException";
                tmp1998.Type = TType.Struct;
                tmp1998.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1998, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp1998.Name = "SystemException";
                tmp1998.Type = TType.Struct;
                tmp1998.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1998, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is manageNotebookShares_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1999 = new StringBuilder("manageNotebookShares_result(");
          int tmp2000 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2000++) { tmp1999.Append(", "); }
            tmp1999.Append("Success: ");
            Success.ToString(tmp1999);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp2000++) { tmp1999.Append(", "); }
            tmp1999.Append("UserException: ");
            UserException.ToString(tmp1999);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp2000++) { tmp1999.Append(", "); }
            tmp1999.Append("NotFoundException: ");
            NotFoundException.ToString(tmp1999);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp2000++) { tmp1999.Append(", "); }
            tmp1999.Append("SystemException: ");
            SystemException.ToString(tmp1999);
          }
          tmp1999.Append(')');
          return tmp1999.ToString();
        }
      }


      public partial class getNotebookShares_args : TBase
      {
        private string _authenticationToken;
        private string _notebookGuid;

        public string AuthenticationToken
        {
          get
          {
            return _authenticationToken;
          }
          set
          {
            __isset.authenticationToken = true;
            this._authenticationToken = value;
          }
        }

        public string NotebookGuid
        {
          get
          {
            return _notebookGuid;
          }
          set
          {
            __isset.notebookGuid = true;
            this._notebookGuid = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool authenticationToken;
          public bool notebookGuid;
        }

        public getNotebookShares_args()
        {
        }

        public getNotebookShares_args DeepCopy()
        {
          var tmp2001 = new getNotebookShares_args();
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            tmp2001.AuthenticationToken = this.AuthenticationToken;
          }
          tmp2001.__isset.authenticationToken = this.__isset.authenticationToken;
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            tmp2001.NotebookGuid = this.NotebookGuid;
          }
          tmp2001.__isset.notebookGuid = this.__isset.notebookGuid;
          return tmp2001;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    AuthenticationToken = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2002 = new TStruct("getNotebookShares_args");
            await oprot.WriteStructBeginAsync(tmp2002, cancellationToken);
            var tmp2003 = new TField();
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              tmp2003.Name = "authenticationToken";
              tmp2003.Type = TType.String;
              tmp2003.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2003, cancellationToken);
              await oprot.WriteStringAsync(AuthenticationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              tmp2003.Name = "notebookGuid";
              tmp2003.Type = TType.String;
              tmp2003.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp2003, cancellationToken);
              await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNotebookShares_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.authenticationToken == other.__isset.authenticationToken) && ((!__isset.authenticationToken) || (global::System.Object.Equals(AuthenticationToken, other.AuthenticationToken))))
            && ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((AuthenticationToken != null) && __isset.authenticationToken)
            {
              hashcode = (hashcode * 397) + AuthenticationToken.GetHashCode();
            }
            if((NotebookGuid != null) && __isset.notebookGuid)
            {
              hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2004 = new StringBuilder("getNotebookShares_args(");
          int tmp2005 = 0;
          if((AuthenticationToken != null) && __isset.authenticationToken)
          {
            if(0 < tmp2005++) { tmp2004.Append(", "); }
            tmp2004.Append("AuthenticationToken: ");
            AuthenticationToken.ToString(tmp2004);
          }
          if((NotebookGuid != null) && __isset.notebookGuid)
          {
            if(0 < tmp2005++) { tmp2004.Append(", "); }
            tmp2004.Append("NotebookGuid: ");
            NotebookGuid.ToString(tmp2004);
          }
          tmp2004.Append(')');
          return tmp2004.ToString();
        }
      }


      public partial class getNotebookShares_result : TBase
      {
        private global::Evernote.EDAM.NoteStore.ShareRelationships _success;
        private global::Evernote.EDAM.Error.EDAMUserException _userException;
        private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;
        private global::Evernote.EDAM.Error.EDAMSystemException _systemException;

        public global::Evernote.EDAM.NoteStore.ShareRelationships Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMUserException UserException
        {
          get
          {
            return _userException;
          }
          set
          {
            __isset.userException = true;
            this._userException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
        {
          get
          {
            return _notFoundException;
          }
          set
          {
            __isset.notFoundException = true;
            this._notFoundException = value;
          }
        }

        public global::Evernote.EDAM.Error.EDAMSystemException SystemException
        {
          get
          {
            return _systemException;
          }
          set
          {
            __isset.systemException = true;
            this._systemException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool userException;
          public bool notFoundException;
          public bool systemException;
        }

        public getNotebookShares_result()
        {
        }

        public getNotebookShares_result DeepCopy()
        {
          var tmp2006 = new getNotebookShares_result();
          if((Success != null) && __isset.success)
          {
            tmp2006.Success = (global::Evernote.EDAM.NoteStore.ShareRelationships)this.Success.DeepCopy();
          }
          tmp2006.__isset.success = this.__isset.success;
          if((UserException != null) && __isset.userException)
          {
            tmp2006.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
          }
          tmp2006.__isset.userException = this.__isset.userException;
          if((NotFoundException != null) && __isset.notFoundException)
          {
            tmp2006.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
          }
          tmp2006.__isset.notFoundException = this.__isset.notFoundException;
          if((SystemException != null) && __isset.systemException)
          {
            tmp2006.SystemException = (global::Evernote.EDAM.Error.EDAMSystemException)this.SystemException.DeepCopy();
          }
          tmp2006.__isset.systemException = this.__isset.systemException;
          return tmp2006;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Evernote.EDAM.NoteStore.ShareRelationships();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                    await UserException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                    await NotFoundException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    SystemException = new global::Evernote.EDAM.Error.EDAMSystemException();
                    await SystemException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2007 = new TStruct("getNotebookShares_result");
            await oprot.WriteStructBeginAsync(tmp2007, cancellationToken);
            var tmp2008 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2008.Name = "Success";
                tmp2008.Type = TType.Struct;
                tmp2008.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2008, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.userException)
            {
              if (UserException != null)
              {
                tmp2008.Name = "UserException";
                tmp2008.Type = TType.Struct;
                tmp2008.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp2008, cancellationToken);
                await UserException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.notFoundException)
            {
              if (NotFoundException != null)
              {
                tmp2008.Name = "NotFoundException";
                tmp2008.Type = TType.Struct;
                tmp2008.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp2008, cancellationToken);
                await NotFoundException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.systemException)
            {
              if (SystemException != null)
              {
                tmp2008.Name = "SystemException";
                tmp2008.Type = TType.Struct;
                tmp2008.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp2008, cancellationToken);
                await SystemException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNotebookShares_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
            && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))))
            && ((__isset.systemException == other.__isset.systemException) && ((!__isset.systemException) || (global::System.Object.Equals(SystemException, other.SystemException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((UserException != null) && __isset.userException)
            {
              hashcode = (hashcode * 397) + UserException.GetHashCode();
            }
            if((NotFoundException != null) && __isset.notFoundException)
            {
              hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
            }
            if((SystemException != null) && __isset.systemException)
            {
              hashcode = (hashcode * 397) + SystemException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2009 = new StringBuilder("getNotebookShares_result(");
          int tmp2010 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2010++) { tmp2009.Append(", "); }
            tmp2009.Append("Success: ");
            Success.ToString(tmp2009);
          }
          if((UserException != null) && __isset.userException)
          {
            if(0 < tmp2010++) { tmp2009.Append(", "); }
            tmp2009.Append("UserException: ");
            UserException.ToString(tmp2009);
          }
          if((NotFoundException != null) && __isset.notFoundException)
          {
            if(0 < tmp2010++) { tmp2009.Append(", "); }
            tmp2009.Append("NotFoundException: ");
            NotFoundException.ToString(tmp2009);
          }
          if((SystemException != null) && __isset.systemException)
          {
            if(0 < tmp2010++) { tmp2009.Append(", "); }
            tmp2009.Append("SystemException: ");
            SystemException.ToString(tmp2009);
          }
          tmp2009.Append(')');
          return tmp2009.ToString();
        }
      }

    }

  }
}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is provided to the findNotesMetadata function to specify
  /// the subset of fields that should be included in each NoteMetadata element
  /// that is returned in the NotesMetadataList.
  /// Each field on this structure is a boolean flag that indicates whether the
  /// corresponding field should be included in the NoteMetadata structure when
  /// it is returned.  For example, if the 'includeTitle' field is set on this
  /// structure when calling findNotesMetadata, then each NoteMetadata in the
  /// list should have its 'title' field set.
  /// If one of the fields in this spec is not set, then it will be treated as
  /// 'false' by the server, so the default behavior is to include nothing in
  /// replies (but the mandatory GUID)
  /// </summary>
  public partial class NotesMetadataResultSpec : TBase
  {
    private bool _includeTitle;
    private bool _includeContentLength;
    private bool _includeCreated;
    private bool _includeUpdated;
    private bool _includeDeleted;
    private bool _includeUpdateSequenceNum;
    private bool _includeNotebookGuid;
    private bool _includeTagGuids;
    private bool _includeAttributes;
    private bool _includeLargestResourceMime;
    private bool _includeLargestResourceSize;

    public bool IncludeTitle
    {
      get
      {
        return _includeTitle;
      }
      set
      {
        __isset.includeTitle = true;
        this._includeTitle = value;
      }
    }

    public bool IncludeContentLength
    {
      get
      {
        return _includeContentLength;
      }
      set
      {
        __isset.includeContentLength = true;
        this._includeContentLength = value;
      }
    }

    public bool IncludeCreated
    {
      get
      {
        return _includeCreated;
      }
      set
      {
        __isset.includeCreated = true;
        this._includeCreated = value;
      }
    }

    public bool IncludeUpdated
    {
      get
      {
        return _includeUpdated;
      }
      set
      {
        __isset.includeUpdated = true;
        this._includeUpdated = value;
      }
    }

    public bool IncludeDeleted
    {
      get
      {
        return _includeDeleted;
      }
      set
      {
        __isset.includeDeleted = true;
        this._includeDeleted = value;
      }
    }

    public bool IncludeUpdateSequenceNum
    {
      get
      {
        return _includeUpdateSequenceNum;
      }
      set
      {
        __isset.includeUpdateSequenceNum = true;
        this._includeUpdateSequenceNum = value;
      }
    }

    public bool IncludeNotebookGuid
    {
      get
      {
        return _includeNotebookGuid;
      }
      set
      {
        __isset.includeNotebookGuid = true;
        this._includeNotebookGuid = value;
      }
    }

    public bool IncludeTagGuids
    {
      get
      {
        return _includeTagGuids;
      }
      set
      {
        __isset.includeTagGuids = true;
        this._includeTagGuids = value;
      }
    }

    public bool IncludeAttributes
    {
      get
      {
        return _includeAttributes;
      }
      set
      {
        __isset.includeAttributes = true;
        this._includeAttributes = value;
      }
    }

    public bool IncludeLargestResourceMime
    {
      get
      {
        return _includeLargestResourceMime;
      }
      set
      {
        __isset.includeLargestResourceMime = true;
        this._includeLargestResourceMime = value;
      }
    }

    public bool IncludeLargestResourceSize
    {
      get
      {
        return _includeLargestResourceSize;
      }
      set
      {
        __isset.includeLargestResourceSize = true;
        this._includeLargestResourceSize = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool includeTitle;
      public bool includeContentLength;
      public bool includeCreated;
      public bool includeUpdated;
      public bool includeDeleted;
      public bool includeUpdateSequenceNum;
      public bool includeNotebookGuid;
      public bool includeTagGuids;
      public bool includeAttributes;
      public bool includeLargestResourceMime;
      public bool includeLargestResourceSize;
    }

    public NotesMetadataResultSpec()
    {
    }

    public NotesMetadataResultSpec DeepCopy()
    {
      var tmp115 = new NotesMetadataResultSpec();
      if(__isset.includeTitle)
      {
        tmp115.IncludeTitle = this.IncludeTitle;
      }
      tmp115.__isset.includeTitle = this.__isset.includeTitle;
      if(__isset.includeContentLength)
      {
        tmp115.IncludeContentLength = this.IncludeContentLength;
      }
      tmp115.__isset.includeContentLength = this.__isset.includeContentLength;
      if(__isset.includeCreated)
      {
        tmp115.IncludeCreated = this.IncludeCreated;
      }
      tmp115.__isset.includeCreated = this.__isset.includeCreated;
      if(__isset.includeUpdated)
      {
        tmp115.IncludeUpdated = this.IncludeUpdated;
      }
      tmp115.__isset.includeUpdated = this.__isset.includeUpdated;
      if(__isset.includeDeleted)
      {
        tmp115.IncludeDeleted = this.IncludeDeleted;
      }
      tmp115.__isset.includeDeleted = this.__isset.includeDeleted;
      if(__isset.includeUpdateSequenceNum)
      {
        tmp115.IncludeUpdateSequenceNum = this.IncludeUpdateSequenceNum;
      }
      tmp115.__isset.includeUpdateSequenceNum = this.__isset.includeUpdateSequenceNum;
      if(__isset.includeNotebookGuid)
      {
        tmp115.IncludeNotebookGuid = this.IncludeNotebookGuid;
      }
      tmp115.__isset.includeNotebookGuid = this.__isset.includeNotebookGuid;
      if(__isset.includeTagGuids)
      {
        tmp115.IncludeTagGuids = this.IncludeTagGuids;
      }
      tmp115.__isset.includeTagGuids = this.__isset.includeTagGuids;
      if(__isset.includeAttributes)
      {
        tmp115.IncludeAttributes = this.IncludeAttributes;
      }
      tmp115.__isset.includeAttributes = this.__isset.includeAttributes;
      if(__isset.includeLargestResourceMime)
      {
        tmp115.IncludeLargestResourceMime = this.IncludeLargestResourceMime;
      }
      tmp115.__isset.includeLargestResourceMime = this.__isset.includeLargestResourceMime;
      if(__isset.includeLargestResourceSize)
      {
        tmp115.IncludeLargestResourceSize = this.IncludeLargestResourceSize;
      }
      tmp115.__isset.includeLargestResourceSize = this.__isset.includeLargestResourceSize;
      return tmp115;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool)
              {
                IncludeTitle = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IncludeContentLength = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                IncludeCreated = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                IncludeUpdated = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                IncludeDeleted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Bool)
              {
                IncludeUpdateSequenceNum = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Bool)
              {
                IncludeNotebookGuid = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Bool)
              {
                IncludeTagGuids = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Bool)
              {
                IncludeAttributes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.Bool)
              {
                IncludeLargestResourceMime = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.Bool)
              {
                IncludeLargestResourceSize = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp116 = new TStruct("NotesMetadataResultSpec");
        await oprot.WriteStructBeginAsync(tmp116, cancellationToken);
        var tmp117 = new TField();
        if(__isset.includeTitle)
        {
          tmp117.Name = "includeTitle";
          tmp117.Type = TType.Bool;
          tmp117.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeTitle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeContentLength)
        {
          tmp117.Name = "includeContentLength";
          tmp117.Type = TType.Bool;
          tmp117.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeContentLength, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeCreated)
        {
          tmp117.Name = "includeCreated";
          tmp117.Type = TType.Bool;
          tmp117.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeCreated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeUpdated)
        {
          tmp117.Name = "includeUpdated";
          tmp117.Type = TType.Bool;
          tmp117.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeDeleted)
        {
          tmp117.Name = "includeDeleted";
          tmp117.Type = TType.Bool;
          tmp117.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeDeleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeUpdateSequenceNum)
        {
          tmp117.Name = "includeUpdateSequenceNum";
          tmp117.Type = TType.Bool;
          tmp117.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeUpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNotebookGuid)
        {
          tmp117.Name = "includeNotebookGuid";
          tmp117.Type = TType.Bool;
          tmp117.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNotebookGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeTagGuids)
        {
          tmp117.Name = "includeTagGuids";
          tmp117.Type = TType.Bool;
          tmp117.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeTagGuids, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeAttributes)
        {
          tmp117.Name = "includeAttributes";
          tmp117.Type = TType.Bool;
          tmp117.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeAttributes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeLargestResourceMime)
        {
          tmp117.Name = "includeLargestResourceMime";
          tmp117.Type = TType.Bool;
          tmp117.ID = 20;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeLargestResourceMime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeLargestResourceSize)
        {
          tmp117.Name = "includeLargestResourceSize";
          tmp117.Type = TType.Bool;
          tmp117.ID = 21;
          await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
          await oprot.WriteBoolAsync(IncludeLargestResourceSize, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NotesMetadataResultSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.includeTitle == other.__isset.includeTitle) && ((!__isset.includeTitle) || (global::System.Object.Equals(IncludeTitle, other.IncludeTitle))))
        && ((__isset.includeContentLength == other.__isset.includeContentLength) && ((!__isset.includeContentLength) || (global::System.Object.Equals(IncludeContentLength, other.IncludeContentLength))))
        && ((__isset.includeCreated == other.__isset.includeCreated) && ((!__isset.includeCreated) || (global::System.Object.Equals(IncludeCreated, other.IncludeCreated))))
        && ((__isset.includeUpdated == other.__isset.includeUpdated) && ((!__isset.includeUpdated) || (global::System.Object.Equals(IncludeUpdated, other.IncludeUpdated))))
        && ((__isset.includeDeleted == other.__isset.includeDeleted) && ((!__isset.includeDeleted) || (global::System.Object.Equals(IncludeDeleted, other.IncludeDeleted))))
        && ((__isset.includeUpdateSequenceNum == other.__isset.includeUpdateSequenceNum) && ((!__isset.includeUpdateSequenceNum) || (global::System.Object.Equals(IncludeUpdateSequenceNum, other.IncludeUpdateSequenceNum))))
        && ((__isset.includeNotebookGuid == other.__isset.includeNotebookGuid) && ((!__isset.includeNotebookGuid) || (global::System.Object.Equals(IncludeNotebookGuid, other.IncludeNotebookGuid))))
        && ((__isset.includeTagGuids == other.__isset.includeTagGuids) && ((!__isset.includeTagGuids) || (global::System.Object.Equals(IncludeTagGuids, other.IncludeTagGuids))))
        && ((__isset.includeAttributes == other.__isset.includeAttributes) && ((!__isset.includeAttributes) || (global::System.Object.Equals(IncludeAttributes, other.IncludeAttributes))))
        && ((__isset.includeLargestResourceMime == other.__isset.includeLargestResourceMime) && ((!__isset.includeLargestResourceMime) || (global::System.Object.Equals(IncludeLargestResourceMime, other.IncludeLargestResourceMime))))
        && ((__isset.includeLargestResourceSize == other.__isset.includeLargestResourceSize) && ((!__isset.includeLargestResourceSize) || (global::System.Object.Equals(IncludeLargestResourceSize, other.IncludeLargestResourceSize))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.includeTitle)
        {
          hashcode = (hashcode * 397) + IncludeTitle.GetHashCode();
        }
        if(__isset.includeContentLength)
        {
          hashcode = (hashcode * 397) + IncludeContentLength.GetHashCode();
        }
        if(__isset.includeCreated)
        {
          hashcode = (hashcode * 397) + IncludeCreated.GetHashCode();
        }
        if(__isset.includeUpdated)
        {
          hashcode = (hashcode * 397) + IncludeUpdated.GetHashCode();
        }
        if(__isset.includeDeleted)
        {
          hashcode = (hashcode * 397) + IncludeDeleted.GetHashCode();
        }
        if(__isset.includeUpdateSequenceNum)
        {
          hashcode = (hashcode * 397) + IncludeUpdateSequenceNum.GetHashCode();
        }
        if(__isset.includeNotebookGuid)
        {
          hashcode = (hashcode * 397) + IncludeNotebookGuid.GetHashCode();
        }
        if(__isset.includeTagGuids)
        {
          hashcode = (hashcode * 397) + IncludeTagGuids.GetHashCode();
        }
        if(__isset.includeAttributes)
        {
          hashcode = (hashcode * 397) + IncludeAttributes.GetHashCode();
        }
        if(__isset.includeLargestResourceMime)
        {
          hashcode = (hashcode * 397) + IncludeLargestResourceMime.GetHashCode();
        }
        if(__isset.includeLargestResourceSize)
        {
          hashcode = (hashcode * 397) + IncludeLargestResourceSize.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp118 = new StringBuilder("NotesMetadataResultSpec(");
      int tmp119 = 0;
      if(__isset.includeTitle)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeTitle: ");
        IncludeTitle.ToString(tmp118);
      }
      if(__isset.includeContentLength)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeContentLength: ");
        IncludeContentLength.ToString(tmp118);
      }
      if(__isset.includeCreated)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeCreated: ");
        IncludeCreated.ToString(tmp118);
      }
      if(__isset.includeUpdated)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeUpdated: ");
        IncludeUpdated.ToString(tmp118);
      }
      if(__isset.includeDeleted)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeDeleted: ");
        IncludeDeleted.ToString(tmp118);
      }
      if(__isset.includeUpdateSequenceNum)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeUpdateSequenceNum: ");
        IncludeUpdateSequenceNum.ToString(tmp118);
      }
      if(__isset.includeNotebookGuid)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeNotebookGuid: ");
        IncludeNotebookGuid.ToString(tmp118);
      }
      if(__isset.includeTagGuids)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeTagGuids: ");
        IncludeTagGuids.ToString(tmp118);
      }
      if(__isset.includeAttributes)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeAttributes: ");
        IncludeAttributes.ToString(tmp118);
      }
      if(__isset.includeLargestResourceMime)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeLargestResourceMime: ");
        IncludeLargestResourceMime.ToString(tmp118);
      }
      if(__isset.includeLargestResourceSize)
      {
        if(0 < tmp119++) { tmp118.Append(", "); }
        tmp118.Append("IncludeLargestResourceSize: ");
        IncludeLargestResourceSize.ToString(tmp118);
      }
      tmp118.Append(')');
      return tmp118.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is used by the service to communicate to clients, via
  /// getNoteShareRelationships, which privilege levels are assignable to the
  /// target of a note share relationship.
  /// 
  /// <dl>
  /// <dt>noSetReadNote</dt>
  /// <dd>This value is true if the user is not allowed to set the privilege
  /// level to SharedNotePrivilegeLevel.READ_NOTE.</dd>
  /// 
  /// <dt>noSetModifyNote</dt>
  /// <dd>This value is true if the user is not allowed to set the privilege
  /// level to SharedNotePrivilegeLevel.MODIFY_NOTE.</dd>
  /// 
  /// <dt>noSetFullAccess</dt>
  /// <dd>This value is true if the user is not allowed to set the
  /// privilege level to SharedNotePrivilegeLevel.FULL_ACCESS.</dd>
  /// </dl>
  /// </summary>
  public partial class NoteShareRelationshipRestrictions : TBase
  {
    private bool _noSetReadNote;
    private bool _noSetModifyNote;
    private bool _noSetFullAccess;

    public bool NoSetReadNote
    {
      get
      {
        return _noSetReadNote;
      }
      set
      {
        __isset.noSetReadNote = true;
        this._noSetReadNote = value;
      }
    }

    public bool NoSetModifyNote
    {
      get
      {
        return _noSetModifyNote;
      }
      set
      {
        __isset.noSetModifyNote = true;
        this._noSetModifyNote = value;
      }
    }

    public bool NoSetFullAccess
    {
      get
      {
        return _noSetFullAccess;
      }
      set
      {
        __isset.noSetFullAccess = true;
        this._noSetFullAccess = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool noSetReadNote;
      public bool noSetModifyNote;
      public bool noSetFullAccess;
    }

    public NoteShareRelationshipRestrictions()
    {
    }

    public NoteShareRelationshipRestrictions DeepCopy()
    {
      var tmp292 = new NoteShareRelationshipRestrictions();
      if(__isset.noSetReadNote)
      {
        tmp292.NoSetReadNote = this.NoSetReadNote;
      }
      tmp292.__isset.noSetReadNote = this.__isset.noSetReadNote;
      if(__isset.noSetModifyNote)
      {
        tmp292.NoSetModifyNote = this.NoSetModifyNote;
      }
      tmp292.__isset.noSetModifyNote = this.__isset.noSetModifyNote;
      if(__isset.noSetFullAccess)
      {
        tmp292.NoSetFullAccess = this.NoSetFullAccess;
      }
      tmp292.__isset.noSetFullAccess = this.__isset.noSetFullAccess;
      return tmp292;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                NoSetReadNote = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                NoSetModifyNote = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                NoSetFullAccess = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp293 = new TStruct("NoteShareRelationshipRestrictions");
        await oprot.WriteStructBeginAsync(tmp293, cancellationToken);
        var tmp294 = new TField();
        if(__isset.noSetReadNote)
        {
          tmp294.Name = "noSetReadNote";
          tmp294.Type = TType.Bool;
          tmp294.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
          await oprot.WriteBoolAsync(NoSetReadNote, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetModifyNote)
        {
          tmp294.Name = "noSetModifyNote";
          tmp294.Type = TType.Bool;
          tmp294.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
          await oprot.WriteBoolAsync(NoSetModifyNote, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetFullAccess)
        {
          tmp294.Name = "noSetFullAccess";
          tmp294.Type = TType.Bool;
          tmp294.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
          await oprot.WriteBoolAsync(NoSetFullAccess, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteShareRelationshipRestrictions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.noSetReadNote == other.__isset.noSetReadNote) && ((!__isset.noSetReadNote) || (global::System.Object.Equals(NoSetReadNote, other.NoSetReadNote))))
        && ((__isset.noSetModifyNote == other.__isset.noSetModifyNote) && ((!__isset.noSetModifyNote) || (global::System.Object.Equals(NoSetModifyNote, other.NoSetModifyNote))))
        && ((__isset.noSetFullAccess == other.__isset.noSetFullAccess) && ((!__isset.noSetFullAccess) || (global::System.Object.Equals(NoSetFullAccess, other.NoSetFullAccess))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.noSetReadNote)
        {
          hashcode = (hashcode * 397) + NoSetReadNote.GetHashCode();
        }
        if(__isset.noSetModifyNote)
        {
          hashcode = (hashcode * 397) + NoSetModifyNote.GetHashCode();
        }
        if(__isset.noSetFullAccess)
        {
          hashcode = (hashcode * 397) + NoSetFullAccess.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp295 = new StringBuilder("NoteShareRelationshipRestrictions(");
      int tmp296 = 0;
      if(__isset.noSetReadNote)
      {
        if(0 < tmp296++) { tmp295.Append(", "); }
        tmp295.Append("NoSetReadNote: ");
        NoSetReadNote.ToString(tmp295);
      }
      if(__isset.noSetModifyNote)
      {
        if(0 < tmp296++) { tmp295.Append(", "); }
        tmp295.Append("NoSetModifyNote: ");
        NoSetModifyNote.ToString(tmp295);
      }
      if(__isset.noSetFullAccess)
      {
        if(0 < tmp296++) { tmp295.Append(", "); }
        tmp295.Append("NoSetFullAccess: ");
        NoSetFullAccess.ToString(tmp295);
      }
      tmp295.Append(')');
      return tmp295.ToString();
    }
  }

}

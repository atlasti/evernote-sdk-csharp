/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Describes the association between a Notebook and an Evernote User who is
  /// a member of that notebook.
  /// 
  /// <dl>
  /// <dt>displayName</dt>
  /// <dd>The string that clients should show to users to represent this
  /// member.</dd>
  /// 
  /// <dt>recipientUserId</dt>
  /// <dd>The Evernote User ID of the recipient of this notebook share.
  /// </dd>
  /// 
  /// <dt>bestPrivilege</dt>
  /// <dd>The privilege at which the member can access the notebook,
  /// which is the best privilege granted either individually or to a
  /// group to which a member belongs, such as a business.  This field is
  /// used by the service to convey information to the user, so clients
  /// should treat it as read-only.</dd>
  /// 
  /// <dt>individualPrivilege</dt>
  /// <dd>The individually granted privilege for the member, which does
  /// not take GROUP privileges into account.  This value may be unset if
  /// only a group-assigned privilege has been granted to the member.
  /// This value can be managed by others with sufficient rights using
  /// the manageNotebookShares method.  The valid values that clients
  /// should present to users for selection are given via the the
  /// 'restrictions' field.</dd>
  /// 
  /// <dt>restrictions</dt>
  /// <dd>The restrictions on which privileges may be individually
  /// assigned to the recipient of this share relationship.</dd>
  /// 
  /// <dt>sharerUserId</dt>
  /// <dd>The user id of the user who most recently shared the notebook
  /// to this user. This field is currently unset for a MemberShareRelationship
  /// created by joining a notebook that has been published to the business
  /// (MemberShareRelationships where the individual privilege is unset).
  /// This field is used by the service to convey information to the user, so
  /// clients should treat it as read-only.
  /// </dd>
  /// </dl>
  /// </summary>
  public partial class MemberShareRelationship : TBase
  {
    private string _displayName;
    private int _recipientUserId;
    private global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel _bestPrivilege;
    private global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel _individualPrivilege;
    private global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions _restrictions;
    private int _sharerUserId;

    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    public int RecipientUserId
    {
      get
      {
        return _recipientUserId;
      }
      set
      {
        __isset.recipientUserId = true;
        this._recipientUserId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel BestPrivilege
    {
      get
      {
        return _bestPrivilege;
      }
      set
      {
        __isset.bestPrivilege = true;
        this._bestPrivilege = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel IndividualPrivilege
    {
      get
      {
        return _individualPrivilege;
      }
      set
      {
        __isset.individualPrivilege = true;
        this._individualPrivilege = value;
      }
    }

    public global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions Restrictions
    {
      get
      {
        return _restrictions;
      }
      set
      {
        __isset.restrictions = true;
        this._restrictions = value;
      }
    }

    public int SharerUserId
    {
      get
      {
        return _sharerUserId;
      }
      set
      {
        __isset.sharerUserId = true;
        this._sharerUserId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool displayName;
      public bool recipientUserId;
      public bool bestPrivilege;
      public bool individualPrivilege;
      public bool restrictions;
      public bool sharerUserId;
    }

    public MemberShareRelationship()
    {
    }

    public MemberShareRelationship DeepCopy()
    {
      var tmp216 = new MemberShareRelationship();
      if((DisplayName != null) && __isset.displayName)
      {
        tmp216.DisplayName = this.DisplayName;
      }
      tmp216.__isset.displayName = this.__isset.displayName;
      if(__isset.recipientUserId)
      {
        tmp216.RecipientUserId = this.RecipientUserId;
      }
      tmp216.__isset.recipientUserId = this.__isset.recipientUserId;
      if(__isset.bestPrivilege)
      {
        tmp216.BestPrivilege = this.BestPrivilege;
      }
      tmp216.__isset.bestPrivilege = this.__isset.bestPrivilege;
      if(__isset.individualPrivilege)
      {
        tmp216.IndividualPrivilege = this.IndividualPrivilege;
      }
      tmp216.__isset.individualPrivilege = this.__isset.individualPrivilege;
      if((Restrictions != null) && __isset.restrictions)
      {
        tmp216.Restrictions = (global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions)this.Restrictions.DeepCopy();
      }
      tmp216.__isset.restrictions = this.__isset.restrictions;
      if(__isset.sharerUserId)
      {
        tmp216.SharerUserId = this.SharerUserId;
      }
      tmp216.__isset.sharerUserId = this.__isset.sharerUserId;
      return tmp216;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                DisplayName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                RecipientUserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                BestPrivilege = (global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                IndividualPrivilege = (global::Evernote.EDAM.NoteStore.ShareRelationshipPrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Restrictions = new global::Evernote.EDAM.NoteStore.ShareRelationshipRestrictions();
                await Restrictions.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                SharerUserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp217 = new TStruct("MemberShareRelationship");
        await oprot.WriteStructBeginAsync(tmp217, cancellationToken);
        var tmp218 = new TField();
        if((DisplayName != null) && __isset.displayName)
        {
          tmp218.Name = "displayName";
          tmp218.Type = TType.String;
          tmp218.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await oprot.WriteStringAsync(DisplayName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recipientUserId)
        {
          tmp218.Name = "recipientUserId";
          tmp218.Type = TType.I32;
          tmp218.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await oprot.WriteI32Async(RecipientUserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.bestPrivilege)
        {
          tmp218.Name = "bestPrivilege";
          tmp218.Type = TType.I32;
          tmp218.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await oprot.WriteI32Async((int)BestPrivilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.individualPrivilege)
        {
          tmp218.Name = "individualPrivilege";
          tmp218.Type = TType.I32;
          tmp218.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await oprot.WriteI32Async((int)IndividualPrivilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Restrictions != null) && __isset.restrictions)
        {
          tmp218.Name = "restrictions";
          tmp218.Type = TType.Struct;
          tmp218.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await Restrictions.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sharerUserId)
        {
          tmp218.Name = "sharerUserId";
          tmp218.Type = TType.I32;
          tmp218.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp218, cancellationToken);
          await oprot.WriteI32Async(SharerUserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is MemberShareRelationship other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (global::System.Object.Equals(DisplayName, other.DisplayName))))
        && ((__isset.recipientUserId == other.__isset.recipientUserId) && ((!__isset.recipientUserId) || (global::System.Object.Equals(RecipientUserId, other.RecipientUserId))))
        && ((__isset.bestPrivilege == other.__isset.bestPrivilege) && ((!__isset.bestPrivilege) || (global::System.Object.Equals(BestPrivilege, other.BestPrivilege))))
        && ((__isset.individualPrivilege == other.__isset.individualPrivilege) && ((!__isset.individualPrivilege) || (global::System.Object.Equals(IndividualPrivilege, other.IndividualPrivilege))))
        && ((__isset.restrictions == other.__isset.restrictions) && ((!__isset.restrictions) || (global::System.Object.Equals(Restrictions, other.Restrictions))))
        && ((__isset.sharerUserId == other.__isset.sharerUserId) && ((!__isset.sharerUserId) || (global::System.Object.Equals(SharerUserId, other.SharerUserId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((DisplayName != null) && __isset.displayName)
        {
          hashcode = (hashcode * 397) + DisplayName.GetHashCode();
        }
        if(__isset.recipientUserId)
        {
          hashcode = (hashcode * 397) + RecipientUserId.GetHashCode();
        }
        if(__isset.bestPrivilege)
        {
          hashcode = (hashcode * 397) + BestPrivilege.GetHashCode();
        }
        if(__isset.individualPrivilege)
        {
          hashcode = (hashcode * 397) + IndividualPrivilege.GetHashCode();
        }
        if((Restrictions != null) && __isset.restrictions)
        {
          hashcode = (hashcode * 397) + Restrictions.GetHashCode();
        }
        if(__isset.sharerUserId)
        {
          hashcode = (hashcode * 397) + SharerUserId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp219 = new StringBuilder("MemberShareRelationship(");
      int tmp220 = 0;
      if((DisplayName != null) && __isset.displayName)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("DisplayName: ");
        DisplayName.ToString(tmp219);
      }
      if(__isset.recipientUserId)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("RecipientUserId: ");
        RecipientUserId.ToString(tmp219);
      }
      if(__isset.bestPrivilege)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("BestPrivilege: ");
        BestPrivilege.ToString(tmp219);
      }
      if(__isset.individualPrivilege)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("IndividualPrivilege: ");
        IndividualPrivilege.ToString(tmp219);
      }
      if((Restrictions != null) && __isset.restrictions)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("Restrictions: ");
        Restrictions.ToString(tmp219);
      }
      if(__isset.sharerUserId)
      {
        if(0 < tmp220++) { tmp219.Append(", "); }
        tmp219.Append("SharerUserId: ");
        SharerUserId.ToString(tmp219);
      }
      tmp219.Append(')');
      return tmp219.ToString();
    }
  }

}

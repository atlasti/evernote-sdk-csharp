/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A structure used to share a notebook with one or more recipients at a given privilege.
  /// 
  /// <dl>
  ///   <dt>notebookGuid</dt>
  ///   <dd>The GUID of the notebook.</dd>
  /// 
  ///   <dt>recipientThreadId</dt>
  ///   <dd>The recipients of the notebook share specified as a messaging thread ID. If you
  ///       have an existing messaging thread to share the note with, specify its ID
  ///       here instead of recipientContacts in order to properly support defunct
  ///       identities. The sharer must be a participant of the thread. Either this field
  ///       or recipientContacts must be set.</dd>
  /// 
  ///   <dt>recipientContacts</dt>
  ///   <dd>The recipients of the notebook share specified as a list of contacts. This should
  ///       only be set if the sharing takes place before the thread is created. Use
  ///       recipientThreadId instead when sharing with an existing thread. Either this
  ///       field or recipientThreadId must be set.</dd>
  /// 
  ///   <dt>privilege</dt>
  ///   <dd>The privilege level to be granted.</dd>
  /// </dl>
  /// </summary>
  public partial class NotebookShareTemplate : TBase
  {
    private string _notebookGuid;
    private long _recipientThreadId;
    private List<global::Evernote.EDAM.Type.Contact> _recipientContacts;
    private global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel _privilege;

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public long RecipientThreadId
    {
      get
      {
        return _recipientThreadId;
      }
      set
      {
        __isset.recipientThreadId = true;
        this._recipientThreadId = value;
      }
    }

    public List<global::Evernote.EDAM.Type.Contact> RecipientContacts
    {
      get
      {
        return _recipientContacts;
      }
      set
      {
        __isset.recipientContacts = true;
        this._recipientContacts = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool notebookGuid;
      public bool recipientThreadId;
      public bool recipientContacts;
      public bool privilege;
    }

    public NotebookShareTemplate()
    {
    }

    public NotebookShareTemplate DeepCopy()
    {
      var tmp274 = new NotebookShareTemplate();
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        tmp274.NotebookGuid = this.NotebookGuid;
      }
      tmp274.__isset.notebookGuid = this.__isset.notebookGuid;
      if(__isset.recipientThreadId)
      {
        tmp274.RecipientThreadId = this.RecipientThreadId;
      }
      tmp274.__isset.recipientThreadId = this.__isset.recipientThreadId;
      if((RecipientContacts != null) && __isset.recipientContacts)
      {
        tmp274.RecipientContacts = this.RecipientContacts.DeepCopy();
      }
      tmp274.__isset.recipientContacts = this.__isset.recipientContacts;
      if(__isset.privilege)
      {
        tmp274.Privilege = this.Privilege;
      }
      tmp274.__isset.privilege = this.__isset.privilege;
      return tmp274;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                RecipientThreadId = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list275 = await iprot.ReadListBeginAsync(cancellationToken);
                  RecipientContacts = new List<global::Evernote.EDAM.Type.Contact>(_list275.Count);
                  for(int _i276 = 0; _i276 < _list275.Count; ++_i276)
                  {
                    global::Evernote.EDAM.Type.Contact _elem277;
                    _elem277 = new global::Evernote.EDAM.Type.Contact();
                    await _elem277.ReadAsync(iprot, cancellationToken);
                    RecipientContacts.Add(_elem277);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Privilege = (global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp278 = new TStruct("NotebookShareTemplate");
        await oprot.WriteStructBeginAsync(tmp278, cancellationToken);
        var tmp279 = new TField();
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          tmp279.Name = "notebookGuid";
          tmp279.Type = TType.String;
          tmp279.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
          await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecipientContacts != null) && __isset.recipientContacts)
        {
          tmp279.Name = "recipientContacts";
          tmp279.Type = TType.List;
          tmp279.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, RecipientContacts.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.Contact _iter280 in RecipientContacts)
            {
              await _iter280.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.privilege)
        {
          tmp279.Name = "privilege";
          tmp279.Type = TType.I32;
          tmp279.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
          await oprot.WriteI32Async((int)Privilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recipientThreadId)
        {
          tmp279.Name = "recipientThreadId";
          tmp279.Type = TType.I64;
          tmp279.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
          await oprot.WriteI64Async(RecipientThreadId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NotebookShareTemplate other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))))
        && ((__isset.recipientThreadId == other.__isset.recipientThreadId) && ((!__isset.recipientThreadId) || (global::System.Object.Equals(RecipientThreadId, other.RecipientThreadId))))
        && ((__isset.recipientContacts == other.__isset.recipientContacts) && ((!__isset.recipientContacts) || (TCollections.Equals(RecipientContacts, other.RecipientContacts))))
        && ((__isset.privilege == other.__isset.privilege) && ((!__isset.privilege) || (global::System.Object.Equals(Privilege, other.Privilege))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
        }
        if(__isset.recipientThreadId)
        {
          hashcode = (hashcode * 397) + RecipientThreadId.GetHashCode();
        }
        if((RecipientContacts != null) && __isset.recipientContacts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(RecipientContacts);
        }
        if(__isset.privilege)
        {
          hashcode = (hashcode * 397) + Privilege.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp281 = new StringBuilder("NotebookShareTemplate(");
      int tmp282 = 0;
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        if(0 < tmp282++) { tmp281.Append(", "); }
        tmp281.Append("NotebookGuid: ");
        NotebookGuid.ToString(tmp281);
      }
      if(__isset.recipientThreadId)
      {
        if(0 < tmp282++) { tmp281.Append(", "); }
        tmp281.Append("RecipientThreadId: ");
        RecipientThreadId.ToString(tmp281);
      }
      if((RecipientContacts != null) && __isset.recipientContacts)
      {
        if(0 < tmp282++) { tmp281.Append(", "); }
        tmp281.Append("RecipientContacts: ");
        RecipientContacts.ToString(tmp281);
      }
      if(__isset.privilege)
      {
        if(0 < tmp282++) { tmp281.Append(", "); }
        tmp281.Append("Privilege: ");
        Privilege.ToString(tmp281);
      }
      tmp281.Append(')');
      return tmp281.ToString();
    }
  }

}

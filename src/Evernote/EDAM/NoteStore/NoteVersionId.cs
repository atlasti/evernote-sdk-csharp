/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Identifying information about previous versions of a note that are backed up
  /// within Evernote's servers.  Used in the return value of the listNoteVersions
  /// call.
  /// 
  /// <dl>
  ///  <dt>updateSequenceNum</dt>
  ///  <dd>
  ///    The update sequence number for the Note when it last had this content.
  ///    This serves to uniquely identify each version of the note, since USN
  ///    values are unique within an account for each update.
  ///  </dd>
  ///  <dt>updated</dt>
  ///  <dd>
  ///    The 'updated' time that was set on the Note when it had this version
  ///    of the content.  This is the user-modifiable modification time on the
  ///    note, so it's not reliable for guaranteeing the order of various
  ///    versions.  (E.g. if someone modifies the note, then changes this time
  ///    manually into the past and then updates the note again.)
  ///  </dd>
  ///  <dt>saved</dt>
  ///  <dd>
  ///    A timestamp that holds the date and time when this version of the note
  ///    was backed up by Evernote's servers.
  ///  </dd>
  ///  <dt>title</dt>
  ///  <dd>
  ///    The title of the note when this particular version was saved.  (The
  ///    current title of the note may differ from this value.)
  ///  </dd>
  ///  <dt>lastEditorId</dt>
  ///  <dd>
  ///    The ID of the user who made the change to this version of the note. This will be
  ///    unset if the note version was edited by the owner of the account.
  ///  </dd>
  /// </dl>
  /// </summary>
  public partial class NoteVersionId : TBase
  {
    private int _lastEditorId;

    public int UpdateSequenceNum { get; set; }

    public long Updated { get; set; }

    public long Saved { get; set; }

    public string Title { get; set; }

    public int LastEditorId
    {
      get
      {
        return _lastEditorId;
      }
      set
      {
        __isset.lastEditorId = true;
        this._lastEditorId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool lastEditorId;
    }

    public NoteVersionId()
    {
    }

    public NoteVersionId(int updateSequenceNum, long updated, long saved, string title) : this()
    {
      this.UpdateSequenceNum = updateSequenceNum;
      this.Updated = updated;
      this.Saved = saved;
      this.Title = title;
    }

    public NoteVersionId DeepCopy()
    {
      var tmp153 = new NoteVersionId();
      tmp153.UpdateSequenceNum = this.UpdateSequenceNum;
      tmp153.Updated = this.Updated;
      tmp153.Saved = this.Saved;
      if((Title != null))
      {
        tmp153.Title = this.Title;
      }
      if(__isset.lastEditorId)
      {
        tmp153.LastEditorId = this.LastEditorId;
      }
      tmp153.__isset.lastEditorId = this.__isset.lastEditorId;
      return tmp153;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_updateSequenceNum = false;
        bool isset_updated = false;
        bool isset_saved = false;
        bool isset_title = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
                isset_updateSequenceNum = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Updated = await iprot.ReadI64Async(cancellationToken);
                isset_updated = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Saved = await iprot.ReadI64Async(cancellationToken);
                isset_saved = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
                isset_title = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                LastEditorId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_updateSequenceNum)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_updated)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_saved)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_title)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp154 = new TStruct("NoteVersionId");
        await oprot.WriteStructBeginAsync(tmp154, cancellationToken);
        var tmp155 = new TField();
        tmp155.Name = "updateSequenceNum";
        tmp155.Type = TType.I32;
        tmp155.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
        await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp155.Name = "updated";
        tmp155.Type = TType.I64;
        tmp155.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
        await oprot.WriteI64Async(Updated, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp155.Name = "saved";
        tmp155.Type = TType.I64;
        tmp155.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
        await oprot.WriteI64Async(Saved, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Title != null))
        {
          tmp155.Name = "title";
          tmp155.Type = TType.String;
          tmp155.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lastEditorId)
        {
          tmp155.Name = "lastEditorId";
          tmp155.Type = TType.I32;
          tmp155.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
          await oprot.WriteI32Async(LastEditorId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteVersionId other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum)
        && global::System.Object.Equals(Updated, other.Updated)
        && global::System.Object.Equals(Saved, other.Saved)
        && global::System.Object.Equals(Title, other.Title)
        && ((__isset.lastEditorId == other.__isset.lastEditorId) && ((!__isset.lastEditorId) || (global::System.Object.Equals(LastEditorId, other.LastEditorId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        hashcode = (hashcode * 397) + Updated.GetHashCode();
        hashcode = (hashcode * 397) + Saved.GetHashCode();
        if((Title != null))
        {
          hashcode = (hashcode * 397) + Title.GetHashCode();
        }
        if(__isset.lastEditorId)
        {
          hashcode = (hashcode * 397) + LastEditorId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp156 = new StringBuilder("NoteVersionId(");
      tmp156.Append(", UpdateSequenceNum: ");
      UpdateSequenceNum.ToString(tmp156);
      tmp156.Append(", Updated: ");
      Updated.ToString(tmp156);
      tmp156.Append(", Saved: ");
      Saved.ToString(tmp156);
      if((Title != null))
      {
        tmp156.Append(", Title: ");
        Title.ToString(tmp156);
      }
      if(__isset.lastEditorId)
      {
        tmp156.Append(", LastEditorId: ");
        LastEditorId.ToString(tmp156);
      }
      tmp156.Append(')');
      return tmp156.ToString();
    }
  }

}

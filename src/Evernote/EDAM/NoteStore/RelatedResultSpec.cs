/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A description of the thing for which the service will find related
  /// entities, via findRelated(), together with a description of what
  /// type of entities and how many you are seeking in the
  /// RelatedResult.
  /// 
  /// <dl>
  /// <dt>maxNotes</dt>
  /// <dd>Return notes that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
  ///     will be silently capped.  If you do not set this field, then
  ///     no notes will be returned.</dd>
  /// 
  /// <dt>maxNotebooks</dt>
  /// <dd>Return notebooks that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
  ///     will be silently capped.  If you do not set this field, then
  ///     no notebooks will be returned.</dd>
  /// 
  /// <dt>maxTags</dt>
  /// <dd>Return tags that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
  ///     will be silently capped.  If you do not set this field, then
  ///     no tags will be returned.</dd>
  /// </dl>
  /// 
  /// <dt>writableNotebooksOnly</dt>
  /// <dd>Require that all returned related notebooks are writable.
  ///     The user will be able to create notes in all returned notebooks.
  ///     However, individual notes returned may still belong to notebooks
  ///     in which the user lacks the ability to create notes.</dd>
  /// </dl>
  /// 
  /// <dt>includeContainingNotebooks</dt>
  /// <dd>If set to <code>true</code>, return the containingNotebooks field
  ///     in the RelatedResult, which will contain the list of notebooks to
  ///     to which the returned related notes belong.</dd>
  /// </dl>
  /// 
  /// <dt>includeDebugInfo</dt>
  /// <dd>If set to <code>true</code>, indicate that debug information should
  ///     be returned in the 'debugInfo' field of RelatedResult. Note that the call may
  ///     be slower if this flag is set.</dd>
  /// 
  /// <dt>maxExperts</dt>
  /// <dd>This can only be used when making a findRelated call against a business.
  ///  Find users within your business who have knowledge about the specified query.
  ///  No more than this many users will be returned. Any value greater than
  ///  EDAM_RELATED_MAX_EXPERTS will be silently capped.
  /// </dd>
  /// 
  /// <dt>maxRelatedContent</dt>
  /// <dd>Return snippets of related content that is related to the query, but no more than
  ///  this many. Any value greater than EDAM_RELATED_MAX_RELATED_CONTENT will be silently
  ///  capped. If you do not set this field, then no related content will be returned.</dd>
  /// </dl>
  /// 
  /// <dt>relatedContentTypes</dt>
  /// <dd>Specifies the types of Related Content that should be returned.</dd>
  /// </dl>
  /// </summary>
  public partial class RelatedResultSpec : TBase
  {
    private int _maxNotes;
    private int _maxNotebooks;
    private int _maxTags;
    private bool _writableNotebooksOnly;
    private bool _includeContainingNotebooks;
    private bool _includeDebugInfo;
    private int _maxExperts;
    private int _maxRelatedContent;
    private THashSet<global::Evernote.EDAM.Type.RelatedContentType> _relatedContentTypes;

    public int MaxNotes
    {
      get
      {
        return _maxNotes;
      }
      set
      {
        __isset.maxNotes = true;
        this._maxNotes = value;
      }
    }

    public int MaxNotebooks
    {
      get
      {
        return _maxNotebooks;
      }
      set
      {
        __isset.maxNotebooks = true;
        this._maxNotebooks = value;
      }
    }

    public int MaxTags
    {
      get
      {
        return _maxTags;
      }
      set
      {
        __isset.maxTags = true;
        this._maxTags = value;
      }
    }

    public bool WritableNotebooksOnly
    {
      get
      {
        return _writableNotebooksOnly;
      }
      set
      {
        __isset.writableNotebooksOnly = true;
        this._writableNotebooksOnly = value;
      }
    }

    public bool IncludeContainingNotebooks
    {
      get
      {
        return _includeContainingNotebooks;
      }
      set
      {
        __isset.includeContainingNotebooks = true;
        this._includeContainingNotebooks = value;
      }
    }

    public bool IncludeDebugInfo
    {
      get
      {
        return _includeDebugInfo;
      }
      set
      {
        __isset.includeDebugInfo = true;
        this._includeDebugInfo = value;
      }
    }

    public int MaxExperts
    {
      get
      {
        return _maxExperts;
      }
      set
      {
        __isset.maxExperts = true;
        this._maxExperts = value;
      }
    }

    public int MaxRelatedContent
    {
      get
      {
        return _maxRelatedContent;
      }
      set
      {
        __isset.maxRelatedContent = true;
        this._maxRelatedContent = value;
      }
    }

    public THashSet<global::Evernote.EDAM.Type.RelatedContentType> RelatedContentTypes
    {
      get
      {
        return _relatedContentTypes;
      }
      set
      {
        __isset.relatedContentTypes = true;
        this._relatedContentTypes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool maxNotes;
      public bool maxNotebooks;
      public bool maxTags;
      public bool writableNotebooksOnly;
      public bool includeContainingNotebooks;
      public bool includeDebugInfo;
      public bool maxExperts;
      public bool maxRelatedContent;
      public bool relatedContentTypes;
    }

    public RelatedResultSpec()
    {
    }

    public RelatedResultSpec DeepCopy()
    {
      var tmp192 = new RelatedResultSpec();
      if(__isset.maxNotes)
      {
        tmp192.MaxNotes = this.MaxNotes;
      }
      tmp192.__isset.maxNotes = this.__isset.maxNotes;
      if(__isset.maxNotebooks)
      {
        tmp192.MaxNotebooks = this.MaxNotebooks;
      }
      tmp192.__isset.maxNotebooks = this.__isset.maxNotebooks;
      if(__isset.maxTags)
      {
        tmp192.MaxTags = this.MaxTags;
      }
      tmp192.__isset.maxTags = this.__isset.maxTags;
      if(__isset.writableNotebooksOnly)
      {
        tmp192.WritableNotebooksOnly = this.WritableNotebooksOnly;
      }
      tmp192.__isset.writableNotebooksOnly = this.__isset.writableNotebooksOnly;
      if(__isset.includeContainingNotebooks)
      {
        tmp192.IncludeContainingNotebooks = this.IncludeContainingNotebooks;
      }
      tmp192.__isset.includeContainingNotebooks = this.__isset.includeContainingNotebooks;
      if(__isset.includeDebugInfo)
      {
        tmp192.IncludeDebugInfo = this.IncludeDebugInfo;
      }
      tmp192.__isset.includeDebugInfo = this.__isset.includeDebugInfo;
      if(__isset.maxExperts)
      {
        tmp192.MaxExperts = this.MaxExperts;
      }
      tmp192.__isset.maxExperts = this.__isset.maxExperts;
      if(__isset.maxRelatedContent)
      {
        tmp192.MaxRelatedContent = this.MaxRelatedContent;
      }
      tmp192.__isset.maxRelatedContent = this.__isset.maxRelatedContent;
      if((RelatedContentTypes != null) && __isset.relatedContentTypes)
      {
        tmp192.RelatedContentTypes = this.RelatedContentTypes.DeepCopy();
      }
      tmp192.__isset.relatedContentTypes = this.__isset.relatedContentTypes;
      return tmp192;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                MaxNotes = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                MaxNotebooks = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                MaxTags = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                WritableNotebooksOnly = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IncludeContainingNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                IncludeDebugInfo = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                MaxExperts = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                MaxRelatedContent = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Set)
              {
                {
                  TSet _set193 = await iprot.ReadSetBeginAsync(cancellationToken);
                  RelatedContentTypes = new THashSet<global::Evernote.EDAM.Type.RelatedContentType>(_set193.Count);
                  for(int _i194 = 0; _i194 < _set193.Count; ++_i194)
                  {
                    global::Evernote.EDAM.Type.RelatedContentType _elem195;
                    _elem195 = (global::Evernote.EDAM.Type.RelatedContentType)await iprot.ReadI32Async(cancellationToken);
                    RelatedContentTypes.Add(_elem195);
                  }
                  await iprot.ReadSetEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp196 = new TStruct("RelatedResultSpec");
        await oprot.WriteStructBeginAsync(tmp196, cancellationToken);
        var tmp197 = new TField();
        if(__isset.maxNotes)
        {
          tmp197.Name = "maxNotes";
          tmp197.Type = TType.I32;
          tmp197.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteI32Async(MaxNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxNotebooks)
        {
          tmp197.Name = "maxNotebooks";
          tmp197.Type = TType.I32;
          tmp197.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteI32Async(MaxNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxTags)
        {
          tmp197.Name = "maxTags";
          tmp197.Type = TType.I32;
          tmp197.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteI32Async(MaxTags, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.writableNotebooksOnly)
        {
          tmp197.Name = "writableNotebooksOnly";
          tmp197.Type = TType.Bool;
          tmp197.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteBoolAsync(WritableNotebooksOnly, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeContainingNotebooks)
        {
          tmp197.Name = "includeContainingNotebooks";
          tmp197.Type = TType.Bool;
          tmp197.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteBoolAsync(IncludeContainingNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeDebugInfo)
        {
          tmp197.Name = "includeDebugInfo";
          tmp197.Type = TType.Bool;
          tmp197.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteBoolAsync(IncludeDebugInfo, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxExperts)
        {
          tmp197.Name = "maxExperts";
          tmp197.Type = TType.I32;
          tmp197.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteI32Async(MaxExperts, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxRelatedContent)
        {
          tmp197.Name = "maxRelatedContent";
          tmp197.Type = TType.I32;
          tmp197.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          await oprot.WriteI32Async(MaxRelatedContent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RelatedContentTypes != null) && __isset.relatedContentTypes)
        {
          tmp197.Name = "relatedContentTypes";
          tmp197.Type = TType.Set;
          tmp197.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
          {
            await oprot.WriteSetBeginAsync(new TSet(TType.I32, RelatedContentTypes.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.RelatedContentType _iter198 in RelatedContentTypes)
            {
              await oprot.WriteI32Async((int)_iter198, cancellationToken);
            }
            await oprot.WriteSetEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RelatedResultSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.maxNotes == other.__isset.maxNotes) && ((!__isset.maxNotes) || (global::System.Object.Equals(MaxNotes, other.MaxNotes))))
        && ((__isset.maxNotebooks == other.__isset.maxNotebooks) && ((!__isset.maxNotebooks) || (global::System.Object.Equals(MaxNotebooks, other.MaxNotebooks))))
        && ((__isset.maxTags == other.__isset.maxTags) && ((!__isset.maxTags) || (global::System.Object.Equals(MaxTags, other.MaxTags))))
        && ((__isset.writableNotebooksOnly == other.__isset.writableNotebooksOnly) && ((!__isset.writableNotebooksOnly) || (global::System.Object.Equals(WritableNotebooksOnly, other.WritableNotebooksOnly))))
        && ((__isset.includeContainingNotebooks == other.__isset.includeContainingNotebooks) && ((!__isset.includeContainingNotebooks) || (global::System.Object.Equals(IncludeContainingNotebooks, other.IncludeContainingNotebooks))))
        && ((__isset.includeDebugInfo == other.__isset.includeDebugInfo) && ((!__isset.includeDebugInfo) || (global::System.Object.Equals(IncludeDebugInfo, other.IncludeDebugInfo))))
        && ((__isset.maxExperts == other.__isset.maxExperts) && ((!__isset.maxExperts) || (global::System.Object.Equals(MaxExperts, other.MaxExperts))))
        && ((__isset.maxRelatedContent == other.__isset.maxRelatedContent) && ((!__isset.maxRelatedContent) || (global::System.Object.Equals(MaxRelatedContent, other.MaxRelatedContent))))
        && ((__isset.relatedContentTypes == other.__isset.relatedContentTypes) && ((!__isset.relatedContentTypes) || (TCollections.Equals(RelatedContentTypes, other.RelatedContentTypes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.maxNotes)
        {
          hashcode = (hashcode * 397) + MaxNotes.GetHashCode();
        }
        if(__isset.maxNotebooks)
        {
          hashcode = (hashcode * 397) + MaxNotebooks.GetHashCode();
        }
        if(__isset.maxTags)
        {
          hashcode = (hashcode * 397) + MaxTags.GetHashCode();
        }
        if(__isset.writableNotebooksOnly)
        {
          hashcode = (hashcode * 397) + WritableNotebooksOnly.GetHashCode();
        }
        if(__isset.includeContainingNotebooks)
        {
          hashcode = (hashcode * 397) + IncludeContainingNotebooks.GetHashCode();
        }
        if(__isset.includeDebugInfo)
        {
          hashcode = (hashcode * 397) + IncludeDebugInfo.GetHashCode();
        }
        if(__isset.maxExperts)
        {
          hashcode = (hashcode * 397) + MaxExperts.GetHashCode();
        }
        if(__isset.maxRelatedContent)
        {
          hashcode = (hashcode * 397) + MaxRelatedContent.GetHashCode();
        }
        if((RelatedContentTypes != null) && __isset.relatedContentTypes)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(RelatedContentTypes);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp199 = new StringBuilder("RelatedResultSpec(");
      int tmp200 = 0;
      if(__isset.maxNotes)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("MaxNotes: ");
        MaxNotes.ToString(tmp199);
      }
      if(__isset.maxNotebooks)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("MaxNotebooks: ");
        MaxNotebooks.ToString(tmp199);
      }
      if(__isset.maxTags)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("MaxTags: ");
        MaxTags.ToString(tmp199);
      }
      if(__isset.writableNotebooksOnly)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("WritableNotebooksOnly: ");
        WritableNotebooksOnly.ToString(tmp199);
      }
      if(__isset.includeContainingNotebooks)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("IncludeContainingNotebooks: ");
        IncludeContainingNotebooks.ToString(tmp199);
      }
      if(__isset.includeDebugInfo)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("IncludeDebugInfo: ");
        IncludeDebugInfo.ToString(tmp199);
      }
      if(__isset.maxExperts)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("MaxExperts: ");
        MaxExperts.ToString(tmp199);
      }
      if(__isset.maxRelatedContent)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("MaxRelatedContent: ");
        MaxRelatedContent.ToString(tmp199);
      }
      if((RelatedContentTypes != null) && __isset.relatedContentTypes)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("RelatedContentTypes: ");
        RelatedContentTypes.ToString(tmp199);
      }
      tmp199.Append(')');
      return tmp199.ToString();
    }
  }

}

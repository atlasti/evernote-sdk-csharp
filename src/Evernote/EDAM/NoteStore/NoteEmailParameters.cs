/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Parameters that must be given to the NoteStore emailNote call. These allow
  /// the caller to specify the note to send, the recipient addresses, etc.
  /// 
  /// <dl>
  ///  <dt>guid</dt>
  ///    <dd>
  ///      If set, this must be the GUID of a note within the user's account that
  ///      should be retrieved from the service and sent as email.  If not set,
  ///      the 'note' field must be provided instead.
  ///    </dd>
  /// 
  ///  <dt>note</dt>
  ///    <dd>
  ///      If the 'guid' field is not set, this field must be provided, including
  ///      the full contents of the note note (and all of its Resources) to send.
  ///      This can be used for a Note that as not been created in the service,
  ///      for example by a local client with local notes.
  ///    </dd>
  /// 
  ///  <dt>toAddresses</dt>
  ///    <dd>
  ///      If provided, this should contain a list of the SMTP email addresses
  ///      that should be included in the "To:" line of the email.
  ///      Callers must specify at least one "to" or "cc" email address.
  ///    </dd>
  /// 
  ///  <dt>ccAddresses</dt>
  ///    <dd>
  ///      If provided, this should contain a list of the SMTP email addresses
  ///      that should be included in the "Cc:" line of the email.
  ///      Callers must specify at least one "to" or "cc" email address.
  ///    </dd>
  /// 
  ///  <dt>subject</dt>
  ///    <dd>
  ///      If provided, this should contain the subject line of the email that
  ///      will be sent.  If not provided, the title of the note will be used
  ///      as the subject of the email.
  ///    </dd>
  /// 
  ///  <dt>message</dt>
  ///    <dd>
  ///      If provided, this is additional personal text that should be included
  ///      into the email as a message from the owner to the recipient(s).
  ///    </dd>
  /// </dl>
  /// </summary>
  public partial class NoteEmailParameters : TBase
  {
    private string _guid;
    private global::Evernote.EDAM.Type.Note _note;
    private List<string> _toAddresses;
    private List<string> _ccAddresses;
    private string _subject;
    private string _message;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public global::Evernote.EDAM.Type.Note Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        this._note = value;
      }
    }

    public List<string> ToAddresses
    {
      get
      {
        return _toAddresses;
      }
      set
      {
        __isset.toAddresses = true;
        this._toAddresses = value;
      }
    }

    public List<string> CcAddresses
    {
      get
      {
        return _ccAddresses;
      }
      set
      {
        __isset.ccAddresses = true;
        this._ccAddresses = value;
      }
    }

    public string Subject
    {
      get
      {
        return _subject;
      }
      set
      {
        __isset.subject = true;
        this._subject = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool note;
      public bool toAddresses;
      public bool ccAddresses;
      public bool subject;
      public bool message;
    }

    public NoteEmailParameters()
    {
    }

    public NoteEmailParameters DeepCopy()
    {
      var tmp140 = new NoteEmailParameters();
      if((Guid != null) && __isset.guid)
      {
        tmp140.Guid = this.Guid;
      }
      tmp140.__isset.guid = this.__isset.guid;
      if((Note != null) && __isset.note)
      {
        tmp140.Note = (global::Evernote.EDAM.Type.Note)this.Note.DeepCopy();
      }
      tmp140.__isset.note = this.__isset.note;
      if((ToAddresses != null) && __isset.toAddresses)
      {
        tmp140.ToAddresses = this.ToAddresses.DeepCopy();
      }
      tmp140.__isset.toAddresses = this.__isset.toAddresses;
      if((CcAddresses != null) && __isset.ccAddresses)
      {
        tmp140.CcAddresses = this.CcAddresses.DeepCopy();
      }
      tmp140.__isset.ccAddresses = this.__isset.ccAddresses;
      if((Subject != null) && __isset.subject)
      {
        tmp140.Subject = this.Subject;
      }
      tmp140.__isset.subject = this.__isset.subject;
      if((Message != null) && __isset.message)
      {
        tmp140.Message = this.Message;
      }
      tmp140.__isset.message = this.__isset.message;
      return tmp140;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Note = new global::Evernote.EDAM.Type.Note();
                await Note.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list141 = await iprot.ReadListBeginAsync(cancellationToken);
                  ToAddresses = new List<string>(_list141.Count);
                  for(int _i142 = 0; _i142 < _list141.Count; ++_i142)
                  {
                    string _elem143;
                    _elem143 = await iprot.ReadStringAsync(cancellationToken);
                    ToAddresses.Add(_elem143);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list144 = await iprot.ReadListBeginAsync(cancellationToken);
                  CcAddresses = new List<string>(_list144.Count);
                  for(int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    string _elem146;
                    _elem146 = await iprot.ReadStringAsync(cancellationToken);
                    CcAddresses.Add(_elem146);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Subject = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Message = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp147 = new TStruct("NoteEmailParameters");
        await oprot.WriteStructBeginAsync(tmp147, cancellationToken);
        var tmp148 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp148.Name = "guid";
          tmp148.Type = TType.String;
          tmp148.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Note != null) && __isset.note)
        {
          tmp148.Name = "note";
          tmp148.Type = TType.Struct;
          tmp148.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          await Note.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ToAddresses != null) && __isset.toAddresses)
        {
          tmp148.Name = "toAddresses";
          tmp148.Type = TType.List;
          tmp148.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ToAddresses.Count), cancellationToken);
            foreach (string _iter149 in ToAddresses)
            {
              await oprot.WriteStringAsync(_iter149, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CcAddresses != null) && __isset.ccAddresses)
        {
          tmp148.Name = "ccAddresses";
          tmp148.Type = TType.List;
          tmp148.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, CcAddresses.Count), cancellationToken);
            foreach (string _iter150 in CcAddresses)
            {
              await oprot.WriteStringAsync(_iter150, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Subject != null) && __isset.subject)
        {
          tmp148.Name = "subject";
          tmp148.Type = TType.String;
          tmp148.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          await oprot.WriteStringAsync(Subject, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Message != null) && __isset.message)
        {
          tmp148.Name = "message";
          tmp148.Type = TType.String;
          tmp148.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp148, cancellationToken);
          await oprot.WriteStringAsync(Message, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteEmailParameters other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.note == other.__isset.note) && ((!__isset.note) || (global::System.Object.Equals(Note, other.Note))))
        && ((__isset.toAddresses == other.__isset.toAddresses) && ((!__isset.toAddresses) || (TCollections.Equals(ToAddresses, other.ToAddresses))))
        && ((__isset.ccAddresses == other.__isset.ccAddresses) && ((!__isset.ccAddresses) || (TCollections.Equals(CcAddresses, other.CcAddresses))))
        && ((__isset.subject == other.__isset.subject) && ((!__isset.subject) || (global::System.Object.Equals(Subject, other.Subject))))
        && ((__isset.message == other.__isset.message) && ((!__isset.message) || (global::System.Object.Equals(Message, other.Message))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((Note != null) && __isset.note)
        {
          hashcode = (hashcode * 397) + Note.GetHashCode();
        }
        if((ToAddresses != null) && __isset.toAddresses)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ToAddresses);
        }
        if((CcAddresses != null) && __isset.ccAddresses)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(CcAddresses);
        }
        if((Subject != null) && __isset.subject)
        {
          hashcode = (hashcode * 397) + Subject.GetHashCode();
        }
        if((Message != null) && __isset.message)
        {
          hashcode = (hashcode * 397) + Message.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp151 = new StringBuilder("NoteEmailParameters(");
      int tmp152 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("Guid: ");
        Guid.ToString(tmp151);
      }
      if((Note != null) && __isset.note)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("Note: ");
        Note.ToString(tmp151);
      }
      if((ToAddresses != null) && __isset.toAddresses)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("ToAddresses: ");
        ToAddresses.ToString(tmp151);
      }
      if((CcAddresses != null) && __isset.ccAddresses)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("CcAddresses: ");
        CcAddresses.ToString(tmp151);
      }
      if((Subject != null) && __isset.subject)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("Subject: ");
        Subject.ToString(tmp151);
      }
      if((Message != null) && __isset.message)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("Message: ");
        Message.ToString(tmp151);
      }
      tmp151.Append(')');
      return tmp151.ToString();
    }
  }

}

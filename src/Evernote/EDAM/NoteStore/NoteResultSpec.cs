/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is provided to the getNoteWithResultSpec function to specify the subset of
  /// fields that should be included in the Note that is returned. This allows clients to request
  /// the minimum set of information that they require when retrieving a note, reducing the size
  /// of the response and improving the response time.
  /// 
  /// If one of the fields in this spec is not set, then it will be treated as 'false' by the service,
  /// so that the default behavior is to include none of the fields below in the Note.
  /// 
  /// <dl>
  ///   <dt>includeContent</dt>
  ///   <dd>If true, the Note.content field will be populated with the note's ENML contents.</dd>
  /// 
  ///   <dt>includeResourcesData</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'data' field's
  ///     body.</dd>
  /// 
  ///   <dt>includeResourcesRecognition</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'recognition'
  ///     field's body if recognition data is available.</dd>
  /// 
  ///   <dt>includeResourcesAlternateData</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'alternateData'
  ///     field's body, if an alternate form is available.</dd>
  /// 
  ///   <dt>includeSharedNotes</dt>
  ///   <dd>If true, the Note.sharedNotes field will be populated with the note's shares.</dd>
  /// 
  ///   <dt>includeNoteAppDataValues</dt>
  ///   <dd>If true, the Note.attributes.applicationData.fullMap field will be populated.</dd>
  /// 
  ///   <dt>includeResourceAppDataValues</dt>
  ///   <dd>If true, the Note.resource.attributes.applicationData.fullMap field will be populated.</dd>
  /// 
  ///   <dt>includeAccountLimits</dt>
  ///   <dd>If true, the Note.limits field will be populated with the note owner's account limits.</dd>
  /// </dl>
  /// </summary>
  public partial class NoteResultSpec : TBase
  {
    private bool _includeContent;
    private bool _includeResourcesData;
    private bool _includeResourcesRecognition;
    private bool _includeResourcesAlternateData;
    private bool _includeSharedNotes;
    private bool _includeNoteAppDataValues;
    private bool _includeResourceAppDataValues;
    private bool _includeAccountLimits;

    public bool IncludeContent
    {
      get
      {
        return _includeContent;
      }
      set
      {
        __isset.includeContent = true;
        this._includeContent = value;
      }
    }

    public bool IncludeResourcesData
    {
      get
      {
        return _includeResourcesData;
      }
      set
      {
        __isset.includeResourcesData = true;
        this._includeResourcesData = value;
      }
    }

    public bool IncludeResourcesRecognition
    {
      get
      {
        return _includeResourcesRecognition;
      }
      set
      {
        __isset.includeResourcesRecognition = true;
        this._includeResourcesRecognition = value;
      }
    }

    public bool IncludeResourcesAlternateData
    {
      get
      {
        return _includeResourcesAlternateData;
      }
      set
      {
        __isset.includeResourcesAlternateData = true;
        this._includeResourcesAlternateData = value;
      }
    }

    public bool IncludeSharedNotes
    {
      get
      {
        return _includeSharedNotes;
      }
      set
      {
        __isset.includeSharedNotes = true;
        this._includeSharedNotes = value;
      }
    }

    public bool IncludeNoteAppDataValues
    {
      get
      {
        return _includeNoteAppDataValues;
      }
      set
      {
        __isset.includeNoteAppDataValues = true;
        this._includeNoteAppDataValues = value;
      }
    }

    public bool IncludeResourceAppDataValues
    {
      get
      {
        return _includeResourceAppDataValues;
      }
      set
      {
        __isset.includeResourceAppDataValues = true;
        this._includeResourceAppDataValues = value;
      }
    }

    public bool IncludeAccountLimits
    {
      get
      {
        return _includeAccountLimits;
      }
      set
      {
        __isset.includeAccountLimits = true;
        this._includeAccountLimits = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool includeContent;
      public bool includeResourcesData;
      public bool includeResourcesRecognition;
      public bool includeResourcesAlternateData;
      public bool includeSharedNotes;
      public bool includeNoteAppDataValues;
      public bool includeResourceAppDataValues;
      public bool includeAccountLimits;
    }

    public NoteResultSpec()
    {
    }

    public NoteResultSpec DeepCopy()
    {
      var tmp135 = new NoteResultSpec();
      if(__isset.includeContent)
      {
        tmp135.IncludeContent = this.IncludeContent;
      }
      tmp135.__isset.includeContent = this.__isset.includeContent;
      if(__isset.includeResourcesData)
      {
        tmp135.IncludeResourcesData = this.IncludeResourcesData;
      }
      tmp135.__isset.includeResourcesData = this.__isset.includeResourcesData;
      if(__isset.includeResourcesRecognition)
      {
        tmp135.IncludeResourcesRecognition = this.IncludeResourcesRecognition;
      }
      tmp135.__isset.includeResourcesRecognition = this.__isset.includeResourcesRecognition;
      if(__isset.includeResourcesAlternateData)
      {
        tmp135.IncludeResourcesAlternateData = this.IncludeResourcesAlternateData;
      }
      tmp135.__isset.includeResourcesAlternateData = this.__isset.includeResourcesAlternateData;
      if(__isset.includeSharedNotes)
      {
        tmp135.IncludeSharedNotes = this.IncludeSharedNotes;
      }
      tmp135.__isset.includeSharedNotes = this.__isset.includeSharedNotes;
      if(__isset.includeNoteAppDataValues)
      {
        tmp135.IncludeNoteAppDataValues = this.IncludeNoteAppDataValues;
      }
      tmp135.__isset.includeNoteAppDataValues = this.__isset.includeNoteAppDataValues;
      if(__isset.includeResourceAppDataValues)
      {
        tmp135.IncludeResourceAppDataValues = this.IncludeResourceAppDataValues;
      }
      tmp135.__isset.includeResourceAppDataValues = this.__isset.includeResourceAppDataValues;
      if(__isset.includeAccountLimits)
      {
        tmp135.IncludeAccountLimits = this.IncludeAccountLimits;
      }
      tmp135.__isset.includeAccountLimits = this.__isset.includeAccountLimits;
      return tmp135;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IncludeContent = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                IncludeResourcesData = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                IncludeResourcesRecognition = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                IncludeResourcesAlternateData = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IncludeSharedNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                IncludeNoteAppDataValues = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                IncludeResourceAppDataValues = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                IncludeAccountLimits = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp136 = new TStruct("NoteResultSpec");
        await oprot.WriteStructBeginAsync(tmp136, cancellationToken);
        var tmp137 = new TField();
        if(__isset.includeContent)
        {
          tmp137.Name = "includeContent";
          tmp137.Type = TType.Bool;
          tmp137.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeContent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResourcesData)
        {
          tmp137.Name = "includeResourcesData";
          tmp137.Type = TType.Bool;
          tmp137.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResourcesData, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResourcesRecognition)
        {
          tmp137.Name = "includeResourcesRecognition";
          tmp137.Type = TType.Bool;
          tmp137.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResourcesRecognition, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResourcesAlternateData)
        {
          tmp137.Name = "includeResourcesAlternateData";
          tmp137.Type = TType.Bool;
          tmp137.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResourcesAlternateData, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeSharedNotes)
        {
          tmp137.Name = "includeSharedNotes";
          tmp137.Type = TType.Bool;
          tmp137.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeSharedNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNoteAppDataValues)
        {
          tmp137.Name = "includeNoteAppDataValues";
          tmp137.Type = TType.Bool;
          tmp137.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNoteAppDataValues, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResourceAppDataValues)
        {
          tmp137.Name = "includeResourceAppDataValues";
          tmp137.Type = TType.Bool;
          tmp137.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResourceAppDataValues, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeAccountLimits)
        {
          tmp137.Name = "includeAccountLimits";
          tmp137.Type = TType.Bool;
          tmp137.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteBoolAsync(IncludeAccountLimits, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteResultSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.includeContent == other.__isset.includeContent) && ((!__isset.includeContent) || (global::System.Object.Equals(IncludeContent, other.IncludeContent))))
        && ((__isset.includeResourcesData == other.__isset.includeResourcesData) && ((!__isset.includeResourcesData) || (global::System.Object.Equals(IncludeResourcesData, other.IncludeResourcesData))))
        && ((__isset.includeResourcesRecognition == other.__isset.includeResourcesRecognition) && ((!__isset.includeResourcesRecognition) || (global::System.Object.Equals(IncludeResourcesRecognition, other.IncludeResourcesRecognition))))
        && ((__isset.includeResourcesAlternateData == other.__isset.includeResourcesAlternateData) && ((!__isset.includeResourcesAlternateData) || (global::System.Object.Equals(IncludeResourcesAlternateData, other.IncludeResourcesAlternateData))))
        && ((__isset.includeSharedNotes == other.__isset.includeSharedNotes) && ((!__isset.includeSharedNotes) || (global::System.Object.Equals(IncludeSharedNotes, other.IncludeSharedNotes))))
        && ((__isset.includeNoteAppDataValues == other.__isset.includeNoteAppDataValues) && ((!__isset.includeNoteAppDataValues) || (global::System.Object.Equals(IncludeNoteAppDataValues, other.IncludeNoteAppDataValues))))
        && ((__isset.includeResourceAppDataValues == other.__isset.includeResourceAppDataValues) && ((!__isset.includeResourceAppDataValues) || (global::System.Object.Equals(IncludeResourceAppDataValues, other.IncludeResourceAppDataValues))))
        && ((__isset.includeAccountLimits == other.__isset.includeAccountLimits) && ((!__isset.includeAccountLimits) || (global::System.Object.Equals(IncludeAccountLimits, other.IncludeAccountLimits))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.includeContent)
        {
          hashcode = (hashcode * 397) + IncludeContent.GetHashCode();
        }
        if(__isset.includeResourcesData)
        {
          hashcode = (hashcode * 397) + IncludeResourcesData.GetHashCode();
        }
        if(__isset.includeResourcesRecognition)
        {
          hashcode = (hashcode * 397) + IncludeResourcesRecognition.GetHashCode();
        }
        if(__isset.includeResourcesAlternateData)
        {
          hashcode = (hashcode * 397) + IncludeResourcesAlternateData.GetHashCode();
        }
        if(__isset.includeSharedNotes)
        {
          hashcode = (hashcode * 397) + IncludeSharedNotes.GetHashCode();
        }
        if(__isset.includeNoteAppDataValues)
        {
          hashcode = (hashcode * 397) + IncludeNoteAppDataValues.GetHashCode();
        }
        if(__isset.includeResourceAppDataValues)
        {
          hashcode = (hashcode * 397) + IncludeResourceAppDataValues.GetHashCode();
        }
        if(__isset.includeAccountLimits)
        {
          hashcode = (hashcode * 397) + IncludeAccountLimits.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp138 = new StringBuilder("NoteResultSpec(");
      int tmp139 = 0;
      if(__isset.includeContent)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeContent: ");
        IncludeContent.ToString(tmp138);
      }
      if(__isset.includeResourcesData)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeResourcesData: ");
        IncludeResourcesData.ToString(tmp138);
      }
      if(__isset.includeResourcesRecognition)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeResourcesRecognition: ");
        IncludeResourcesRecognition.ToString(tmp138);
      }
      if(__isset.includeResourcesAlternateData)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeResourcesAlternateData: ");
        IncludeResourcesAlternateData.ToString(tmp138);
      }
      if(__isset.includeSharedNotes)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeSharedNotes: ");
        IncludeSharedNotes.ToString(tmp138);
      }
      if(__isset.includeNoteAppDataValues)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeNoteAppDataValues: ");
        IncludeNoteAppDataValues.ToString(tmp138);
      }
      if(__isset.includeResourceAppDataValues)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeResourceAppDataValues: ");
        IncludeResourceAppDataValues.ToString(tmp138);
      }
      if(__isset.includeAccountLimits)
      {
        if(0 < tmp139++) { tmp138.Append(", "); }
        tmp138.Append("IncludeAccountLimits: ");
        IncludeAccountLimits.ToString(tmp138);
      }
      tmp138.Append(')');
      return tmp138.ToString();
    }
  }

}

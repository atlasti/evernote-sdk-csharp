/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures errors that occur during a call to manageNoteShares. That
  /// function can be run best-effort, meaning that some change requests can
  /// be applied while others fail. Note that some errors such as system
  /// exceptions may still cause the entire call to fail.
  /// 
  /// Only one of the two ID fields will be set on a given error.
  /// 
  /// Only one of the two exception fields will be set on a given error.
  /// 
  /// <dl>
  ///   <dt>identityID</dt>
  ///   <dd>The identity ID of an outstanding invitation that was not updated
  ///     due to the error.</dd>
  /// 
  ///   <dt>userID</dt>
  ///   <dd>The user ID of an existing membership that was not updated due
  ///     to the error.</dd>
  /// 
  ///   <dt>userException</dt>
  ///   <dd>If the error is represented as an EDAMUserException that would
  ///     have otherwise been thrown without best-effort execution.</dd>
  /// 
  ///   <dt>notFoundException</dt>
  ///   <dd>If the error is represented as an EDAMNotFoundException that
  ///     would have otherwise been thrown without best-effort execution.
  ///     The identifier field of the exception will be either "Identity.id"
  ///     or "User.id", indicating that no existing share could be found for
  ///     the specified recipient.</dd>
  /// </dl>
  /// </summary>
  public partial class ManageNoteSharesError : TBase
  {
    private long _identityID;
    private int _userID;
    private global::Evernote.EDAM.Error.EDAMUserException _userException;
    private global::Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

    public long IdentityID
    {
      get
      {
        return _identityID;
      }
      set
      {
        __isset.identityID = true;
        this._identityID = value;
      }
    }

    public int UserID
    {
      get
      {
        return _userID;
      }
      set
      {
        __isset.userID = true;
        this._userID = value;
      }
    }

    public global::Evernote.EDAM.Error.EDAMUserException UserException
    {
      get
      {
        return _userException;
      }
      set
      {
        __isset.userException = true;
        this._userException = value;
      }
    }

    public global::Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
    {
      get
      {
        return _notFoundException;
      }
      set
      {
        __isset.notFoundException = true;
        this._notFoundException = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool identityID;
      public bool userID;
      public bool userException;
      public bool notFoundException;
    }

    public ManageNoteSharesError()
    {
    }

    public ManageNoteSharesError DeepCopy()
    {
      var tmp341 = new ManageNoteSharesError();
      if(__isset.identityID)
      {
        tmp341.IdentityID = this.IdentityID;
      }
      tmp341.__isset.identityID = this.__isset.identityID;
      if(__isset.userID)
      {
        tmp341.UserID = this.UserID;
      }
      tmp341.__isset.userID = this.__isset.userID;
      if((UserException != null) && __isset.userException)
      {
        tmp341.UserException = (global::Evernote.EDAM.Error.EDAMUserException)this.UserException.DeepCopy();
      }
      tmp341.__isset.userException = this.__isset.userException;
      if((NotFoundException != null) && __isset.notFoundException)
      {
        tmp341.NotFoundException = (global::Evernote.EDAM.Error.EDAMNotFoundException)this.NotFoundException.DeepCopy();
      }
      tmp341.__isset.notFoundException = this.__isset.notFoundException;
      return tmp341;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                IdentityID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                UserID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                UserException = new global::Evernote.EDAM.Error.EDAMUserException();
                await UserException.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                NotFoundException = new global::Evernote.EDAM.Error.EDAMNotFoundException();
                await NotFoundException.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp342 = new TStruct("ManageNoteSharesError");
        await oprot.WriteStructBeginAsync(tmp342, cancellationToken);
        var tmp343 = new TField();
        if(__isset.identityID)
        {
          tmp343.Name = "identityID";
          tmp343.Type = TType.I64;
          tmp343.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          await oprot.WriteI64Async(IdentityID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userID)
        {
          tmp343.Name = "userID";
          tmp343.Type = TType.I32;
          tmp343.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          await oprot.WriteI32Async(UserID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UserException != null) && __isset.userException)
        {
          tmp343.Name = "userException";
          tmp343.Type = TType.Struct;
          tmp343.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          await UserException.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NotFoundException != null) && __isset.notFoundException)
        {
          tmp343.Name = "notFoundException";
          tmp343.Type = TType.Struct;
          tmp343.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          await NotFoundException.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ManageNoteSharesError other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.identityID == other.__isset.identityID) && ((!__isset.identityID) || (global::System.Object.Equals(IdentityID, other.IdentityID))))
        && ((__isset.userID == other.__isset.userID) && ((!__isset.userID) || (global::System.Object.Equals(UserID, other.UserID))))
        && ((__isset.userException == other.__isset.userException) && ((!__isset.userException) || (global::System.Object.Equals(UserException, other.UserException))))
        && ((__isset.notFoundException == other.__isset.notFoundException) && ((!__isset.notFoundException) || (global::System.Object.Equals(NotFoundException, other.NotFoundException))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.identityID)
        {
          hashcode = (hashcode * 397) + IdentityID.GetHashCode();
        }
        if(__isset.userID)
        {
          hashcode = (hashcode * 397) + UserID.GetHashCode();
        }
        if((UserException != null) && __isset.userException)
        {
          hashcode = (hashcode * 397) + UserException.GetHashCode();
        }
        if((NotFoundException != null) && __isset.notFoundException)
        {
          hashcode = (hashcode * 397) + NotFoundException.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp344 = new StringBuilder("ManageNoteSharesError(");
      int tmp345 = 0;
      if(__isset.identityID)
      {
        if(0 < tmp345++) { tmp344.Append(", "); }
        tmp344.Append("IdentityID: ");
        IdentityID.ToString(tmp344);
      }
      if(__isset.userID)
      {
        if(0 < tmp345++) { tmp344.Append(", "); }
        tmp344.Append("UserID: ");
        UserID.ToString(tmp344);
      }
      if((UserException != null) && __isset.userException)
      {
        if(0 < tmp345++) { tmp344.Append(", "); }
        tmp344.Append("UserException: ");
        UserException.ToString(tmp344);
      }
      if((NotFoundException != null) && __isset.notFoundException)
      {
        if(0 < tmp345++) { tmp344.Append(", "); }
        tmp344.Append("NotFoundException: ");
        NotFoundException.ToString(tmp344);
      }
      tmp344.Append(')');
      return tmp344.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  ///  This structure is used with the 'getFilteredSyncChunk' call to provide
  ///  fine-grained control over the data that's returned when a client needs
  ///  to synchronize with the service. Each flag in this structure specifies
  ///  whether to include one class of data in the results of that call.
  /// 
  /// <dl>
  ///  <dt>includeNotes</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.notes field
  ///    </dd>
  /// 
  ///  <dt>includeNoteResources</dt>
  ///    <dd>
  ///    If true, then the server will include the 'resources' field on all of
  ///    the Notes that are in SyncChunk.notes.
  ///    If 'includeNotes' is false, then this will have no effect.
  ///    </dd>
  /// 
  ///  <dt>includeNoteAttributes</dt>
  ///    <dd>
  ///    If true, then the server will include the 'attributes' field on all of
  ///    the Notes that are in SyncChunks.notes.
  ///    If 'includeNotes' is false, then this will have no effect.
  ///    </dd>
  /// 
  ///  <dt>includeNotebooks</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.notebooks field
  ///    </dd>
  /// 
  ///  <dt>includeTags</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.tags field
  ///    </dd>
  /// 
  ///  <dt>includeSearches</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.searches field
  ///    </dd>
  /// 
  ///  <dt>includeResources</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.resources field.
  ///    Since the Resources are also provided with their Note
  ///    (in the Notes.resources list), this is primarily useful for clients that
  ///    want to watch for changes to individual Resources due to recognition data
  ///    being added.
  ///    </dd>
  /// 
  ///  <dt>includeLinkedNotebooks</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.linkedNotebooks field.
  ///    </dd>
  /// 
  ///  <dt>includeExpunged</dt>
  ///    <dd>
  ///    If true, then the server will include the 'expunged' data for any type
  ///    of included data.  For example, if 'includeTags' and 'includeExpunged'
  ///    are both true, then the SyncChunks.expungedTags field will be set with
  ///    the GUIDs of tags that have been expunged from the server.
  ///    </dd>
  /// 
  ///  <dt>includeNoteApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the values for the applicationData map will be filled
  ///    in, assuming notes and note attributes are being returned.  Otherwise,
  ///    only the keysOnly field will be filled in.
  ///    </dd>
  /// 
  ///  <dt>includeResourceApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the fullMap values for the applicationData map will be
  ///    filled in, assuming resources and resource attributes are being returned
  ///    (includeResources is true).  Otherwise, only the keysOnly field will be
  ///    filled in.
  ///    </dd>
  /// 
  ///  <dt>includeNoteResourceApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the fullMap values for the applicationData map will be
  ///    filled in for resources found inside of notes, assuming resources are
  ///    being returned in notes (includeNoteResources is true).  Otherwise,
  ///    only the keysOnly field will be filled in.
  ///    </dd>
  /// 
  ///  <dt>omitSharedNotebooks<dt>
  ///    <dd>
  ///    Normally, if 'includeNotebooks' is true, then the SyncChunks will
  ///    include Notebooks that may include a set of SharedNotebook
  ///    invitations via Notebook.sharedNotebookIds and Notebook.sharedNotebooks.
  ///    However, if omitSharedNotebooks is set to true, then the Notebooks
  ///    will omit those two fields and leave them unset. This should be used
  ///    by clients who want to know their own set of Notebooks (and the
  ///    associated permissions via Notebook.recipientSettings), and who
  ///    do not need to know the full set of other people who can also see
  ///    that same notebook.
  ///    </dd>
  /// 
  ///  <dt>requireNoteContentClass</dt>
  ///    <dd>
  ///    If set, then only send notes whose content class matches this value.
  ///    The value can be a literal match or, if the last character is an
  ///    asterisk, a prefix match.
  ///    </dd>
  /// 
  ///  <dt>notebookGuids</dt>
  ///    <dd>
  ///    If set, then restrict the returned notebooks, notes, and
  ///    resources to those associated with one of the notebooks whose
  ///    GUID is provided in this list.  If not set, then no filtering on
  ///    notebook GUID will be performed.  If you set this field, you may
  ///    not also set includeExpunged else an EDAMUserException with an
  ///    error code of DATA_CONFLICT will be thrown.  You only need to set
  ///    this field if you want to restrict the returned entities more
  ///    than what your authentication token allows you to access.  For
  ///    example, there is no need to set this field for single notebook
  ///    tokens such as for shared notebooks.  You can use this field to
  ///    synchronize a newly discovered business notebook while
  ///    incrementally synchronizing a business account, in which case you
  ///    will only need to consider setting includeNotes,
  ///    includeNotebooks, includeNoteAttributes, includeNoteResources,
  ///    and maybe some of the "FullMap" fields.
  ///    </dd>
  /// 
  ///  <dt>includeSharedNotes</dt>
  ///    <dd>
  ///    If true, then the service will include the sharedNotes field on all
  ///    notes that are in SyncChunk.notes. If 'includeNotes' is false, then
  ///    this will have no effect.
  ///    </dd>
  ///  </dl>
  /// </summary>
  public partial class SyncChunkFilter : TBase
  {
    private bool _includeNotes;
    private bool _includeNoteResources;
    private bool _includeNoteAttributes;
    private bool _includeNotebooks;
    private bool _includeTags;
    private bool _includeSearches;
    private bool _includeResources;
    private bool _includeLinkedNotebooks;
    private bool _includeExpunged;
    private bool _includeNoteApplicationDataFullMap;
    private bool _includeResourceApplicationDataFullMap;
    private bool _includeNoteResourceApplicationDataFullMap;
    private bool _includeSharedNotes;
    private bool _omitSharedNotebooks;
    private string _requireNoteContentClass;
    private THashSet<string> _notebookGuids;

    public bool IncludeNotes
    {
      get
      {
        return _includeNotes;
      }
      set
      {
        __isset.includeNotes = true;
        this._includeNotes = value;
      }
    }

    public bool IncludeNoteResources
    {
      get
      {
        return _includeNoteResources;
      }
      set
      {
        __isset.includeNoteResources = true;
        this._includeNoteResources = value;
      }
    }

    public bool IncludeNoteAttributes
    {
      get
      {
        return _includeNoteAttributes;
      }
      set
      {
        __isset.includeNoteAttributes = true;
        this._includeNoteAttributes = value;
      }
    }

    public bool IncludeNotebooks
    {
      get
      {
        return _includeNotebooks;
      }
      set
      {
        __isset.includeNotebooks = true;
        this._includeNotebooks = value;
      }
    }

    public bool IncludeTags
    {
      get
      {
        return _includeTags;
      }
      set
      {
        __isset.includeTags = true;
        this._includeTags = value;
      }
    }

    public bool IncludeSearches
    {
      get
      {
        return _includeSearches;
      }
      set
      {
        __isset.includeSearches = true;
        this._includeSearches = value;
      }
    }

    public bool IncludeResources
    {
      get
      {
        return _includeResources;
      }
      set
      {
        __isset.includeResources = true;
        this._includeResources = value;
      }
    }

    public bool IncludeLinkedNotebooks
    {
      get
      {
        return _includeLinkedNotebooks;
      }
      set
      {
        __isset.includeLinkedNotebooks = true;
        this._includeLinkedNotebooks = value;
      }
    }

    public bool IncludeExpunged
    {
      get
      {
        return _includeExpunged;
      }
      set
      {
        __isset.includeExpunged = true;
        this._includeExpunged = value;
      }
    }

    public bool IncludeNoteApplicationDataFullMap
    {
      get
      {
        return _includeNoteApplicationDataFullMap;
      }
      set
      {
        __isset.includeNoteApplicationDataFullMap = true;
        this._includeNoteApplicationDataFullMap = value;
      }
    }

    public bool IncludeResourceApplicationDataFullMap
    {
      get
      {
        return _includeResourceApplicationDataFullMap;
      }
      set
      {
        __isset.includeResourceApplicationDataFullMap = true;
        this._includeResourceApplicationDataFullMap = value;
      }
    }

    public bool IncludeNoteResourceApplicationDataFullMap
    {
      get
      {
        return _includeNoteResourceApplicationDataFullMap;
      }
      set
      {
        __isset.includeNoteResourceApplicationDataFullMap = true;
        this._includeNoteResourceApplicationDataFullMap = value;
      }
    }

    public bool IncludeSharedNotes
    {
      get
      {
        return _includeSharedNotes;
      }
      set
      {
        __isset.includeSharedNotes = true;
        this._includeSharedNotes = value;
      }
    }

    public bool OmitSharedNotebooks
    {
      get
      {
        return _omitSharedNotebooks;
      }
      set
      {
        __isset.omitSharedNotebooks = true;
        this._omitSharedNotebooks = value;
      }
    }

    public string RequireNoteContentClass
    {
      get
      {
        return _requireNoteContentClass;
      }
      set
      {
        __isset.requireNoteContentClass = true;
        this._requireNoteContentClass = value;
      }
    }

    public THashSet<string> NotebookGuids
    {
      get
      {
        return _notebookGuids;
      }
      set
      {
        __isset.notebookGuids = true;
        this._notebookGuids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool includeNotes;
      public bool includeNoteResources;
      public bool includeNoteAttributes;
      public bool includeNotebooks;
      public bool includeTags;
      public bool includeSearches;
      public bool includeResources;
      public bool includeLinkedNotebooks;
      public bool includeExpunged;
      public bool includeNoteApplicationDataFullMap;
      public bool includeResourceApplicationDataFullMap;
      public bool includeNoteResourceApplicationDataFullMap;
      public bool includeSharedNotes;
      public bool omitSharedNotebooks;
      public bool requireNoteContentClass;
      public bool notebookGuids;
    }

    public SyncChunkFilter()
    {
    }

    public SyncChunkFilter DeepCopy()
    {
      var tmp54 = new SyncChunkFilter();
      if(__isset.includeNotes)
      {
        tmp54.IncludeNotes = this.IncludeNotes;
      }
      tmp54.__isset.includeNotes = this.__isset.includeNotes;
      if(__isset.includeNoteResources)
      {
        tmp54.IncludeNoteResources = this.IncludeNoteResources;
      }
      tmp54.__isset.includeNoteResources = this.__isset.includeNoteResources;
      if(__isset.includeNoteAttributes)
      {
        tmp54.IncludeNoteAttributes = this.IncludeNoteAttributes;
      }
      tmp54.__isset.includeNoteAttributes = this.__isset.includeNoteAttributes;
      if(__isset.includeNotebooks)
      {
        tmp54.IncludeNotebooks = this.IncludeNotebooks;
      }
      tmp54.__isset.includeNotebooks = this.__isset.includeNotebooks;
      if(__isset.includeTags)
      {
        tmp54.IncludeTags = this.IncludeTags;
      }
      tmp54.__isset.includeTags = this.__isset.includeTags;
      if(__isset.includeSearches)
      {
        tmp54.IncludeSearches = this.IncludeSearches;
      }
      tmp54.__isset.includeSearches = this.__isset.includeSearches;
      if(__isset.includeResources)
      {
        tmp54.IncludeResources = this.IncludeResources;
      }
      tmp54.__isset.includeResources = this.__isset.includeResources;
      if(__isset.includeLinkedNotebooks)
      {
        tmp54.IncludeLinkedNotebooks = this.IncludeLinkedNotebooks;
      }
      tmp54.__isset.includeLinkedNotebooks = this.__isset.includeLinkedNotebooks;
      if(__isset.includeExpunged)
      {
        tmp54.IncludeExpunged = this.IncludeExpunged;
      }
      tmp54.__isset.includeExpunged = this.__isset.includeExpunged;
      if(__isset.includeNoteApplicationDataFullMap)
      {
        tmp54.IncludeNoteApplicationDataFullMap = this.IncludeNoteApplicationDataFullMap;
      }
      tmp54.__isset.includeNoteApplicationDataFullMap = this.__isset.includeNoteApplicationDataFullMap;
      if(__isset.includeResourceApplicationDataFullMap)
      {
        tmp54.IncludeResourceApplicationDataFullMap = this.IncludeResourceApplicationDataFullMap;
      }
      tmp54.__isset.includeResourceApplicationDataFullMap = this.__isset.includeResourceApplicationDataFullMap;
      if(__isset.includeNoteResourceApplicationDataFullMap)
      {
        tmp54.IncludeNoteResourceApplicationDataFullMap = this.IncludeNoteResourceApplicationDataFullMap;
      }
      tmp54.__isset.includeNoteResourceApplicationDataFullMap = this.__isset.includeNoteResourceApplicationDataFullMap;
      if(__isset.includeSharedNotes)
      {
        tmp54.IncludeSharedNotes = this.IncludeSharedNotes;
      }
      tmp54.__isset.includeSharedNotes = this.__isset.includeSharedNotes;
      if(__isset.omitSharedNotebooks)
      {
        tmp54.OmitSharedNotebooks = this.OmitSharedNotebooks;
      }
      tmp54.__isset.omitSharedNotebooks = this.__isset.omitSharedNotebooks;
      if((RequireNoteContentClass != null) && __isset.requireNoteContentClass)
      {
        tmp54.RequireNoteContentClass = this.RequireNoteContentClass;
      }
      tmp54.__isset.requireNoteContentClass = this.__isset.requireNoteContentClass;
      if((NotebookGuids != null) && __isset.notebookGuids)
      {
        tmp54.NotebookGuids = this.NotebookGuids.DeepCopy();
      }
      tmp54.__isset.notebookGuids = this.__isset.notebookGuids;
      return tmp54;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IncludeNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                IncludeNoteResources = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                IncludeNoteAttributes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                IncludeNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IncludeTags = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                IncludeSearches = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                IncludeResources = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                IncludeLinkedNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                IncludeExpunged = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Bool)
              {
                IncludeNoteApplicationDataFullMap = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Bool)
              {
                IncludeResourceApplicationDataFullMap = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Bool)
              {
                IncludeNoteResourceApplicationDataFullMap = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Bool)
              {
                IncludeSharedNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Bool)
              {
                OmitSharedNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                RequireNoteContentClass = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Set)
              {
                {
                  TSet _set55 = await iprot.ReadSetBeginAsync(cancellationToken);
                  NotebookGuids = new THashSet<string>(_set55.Count);
                  for(int _i56 = 0; _i56 < _set55.Count; ++_i56)
                  {
                    string _elem57;
                    _elem57 = await iprot.ReadStringAsync(cancellationToken);
                    NotebookGuids.Add(_elem57);
                  }
                  await iprot.ReadSetEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp58 = new TStruct("SyncChunkFilter");
        await oprot.WriteStructBeginAsync(tmp58, cancellationToken);
        var tmp59 = new TField();
        if(__isset.includeNotes)
        {
          tmp59.Name = "includeNotes";
          tmp59.Type = TType.Bool;
          tmp59.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNoteResources)
        {
          tmp59.Name = "includeNoteResources";
          tmp59.Type = TType.Bool;
          tmp59.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNoteResources, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNoteAttributes)
        {
          tmp59.Name = "includeNoteAttributes";
          tmp59.Type = TType.Bool;
          tmp59.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNoteAttributes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNotebooks)
        {
          tmp59.Name = "includeNotebooks";
          tmp59.Type = TType.Bool;
          tmp59.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeTags)
        {
          tmp59.Name = "includeTags";
          tmp59.Type = TType.Bool;
          tmp59.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeTags, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeSearches)
        {
          tmp59.Name = "includeSearches";
          tmp59.Type = TType.Bool;
          tmp59.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeSearches, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResources)
        {
          tmp59.Name = "includeResources";
          tmp59.Type = TType.Bool;
          tmp59.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResources, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeLinkedNotebooks)
        {
          tmp59.Name = "includeLinkedNotebooks";
          tmp59.Type = TType.Bool;
          tmp59.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeLinkedNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeExpunged)
        {
          tmp59.Name = "includeExpunged";
          tmp59.Type = TType.Bool;
          tmp59.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeExpunged, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNoteApplicationDataFullMap)
        {
          tmp59.Name = "includeNoteApplicationDataFullMap";
          tmp59.Type = TType.Bool;
          tmp59.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNoteApplicationDataFullMap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RequireNoteContentClass != null) && __isset.requireNoteContentClass)
        {
          tmp59.Name = "requireNoteContentClass";
          tmp59.Type = TType.String;
          tmp59.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteStringAsync(RequireNoteContentClass, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResourceApplicationDataFullMap)
        {
          tmp59.Name = "includeResourceApplicationDataFullMap";
          tmp59.Type = TType.Bool;
          tmp59.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResourceApplicationDataFullMap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeNoteResourceApplicationDataFullMap)
        {
          tmp59.Name = "includeNoteResourceApplicationDataFullMap";
          tmp59.Type = TType.Bool;
          tmp59.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeNoteResourceApplicationDataFullMap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NotebookGuids != null) && __isset.notebookGuids)
        {
          tmp59.Name = "notebookGuids";
          tmp59.Type = TType.Set;
          tmp59.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          {
            await oprot.WriteSetBeginAsync(new TSet(TType.String, NotebookGuids.Count), cancellationToken);
            foreach (string _iter60 in NotebookGuids)
            {
              await oprot.WriteStringAsync(_iter60, cancellationToken);
            }
            await oprot.WriteSetEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.omitSharedNotebooks)
        {
          tmp59.Name = "omitSharedNotebooks";
          tmp59.Type = TType.Bool;
          tmp59.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(OmitSharedNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeSharedNotes)
        {
          tmp59.Name = "includeSharedNotes";
          tmp59.Type = TType.Bool;
          tmp59.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteBoolAsync(IncludeSharedNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SyncChunkFilter other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.includeNotes == other.__isset.includeNotes) && ((!__isset.includeNotes) || (global::System.Object.Equals(IncludeNotes, other.IncludeNotes))))
        && ((__isset.includeNoteResources == other.__isset.includeNoteResources) && ((!__isset.includeNoteResources) || (global::System.Object.Equals(IncludeNoteResources, other.IncludeNoteResources))))
        && ((__isset.includeNoteAttributes == other.__isset.includeNoteAttributes) && ((!__isset.includeNoteAttributes) || (global::System.Object.Equals(IncludeNoteAttributes, other.IncludeNoteAttributes))))
        && ((__isset.includeNotebooks == other.__isset.includeNotebooks) && ((!__isset.includeNotebooks) || (global::System.Object.Equals(IncludeNotebooks, other.IncludeNotebooks))))
        && ((__isset.includeTags == other.__isset.includeTags) && ((!__isset.includeTags) || (global::System.Object.Equals(IncludeTags, other.IncludeTags))))
        && ((__isset.includeSearches == other.__isset.includeSearches) && ((!__isset.includeSearches) || (global::System.Object.Equals(IncludeSearches, other.IncludeSearches))))
        && ((__isset.includeResources == other.__isset.includeResources) && ((!__isset.includeResources) || (global::System.Object.Equals(IncludeResources, other.IncludeResources))))
        && ((__isset.includeLinkedNotebooks == other.__isset.includeLinkedNotebooks) && ((!__isset.includeLinkedNotebooks) || (global::System.Object.Equals(IncludeLinkedNotebooks, other.IncludeLinkedNotebooks))))
        && ((__isset.includeExpunged == other.__isset.includeExpunged) && ((!__isset.includeExpunged) || (global::System.Object.Equals(IncludeExpunged, other.IncludeExpunged))))
        && ((__isset.includeNoteApplicationDataFullMap == other.__isset.includeNoteApplicationDataFullMap) && ((!__isset.includeNoteApplicationDataFullMap) || (global::System.Object.Equals(IncludeNoteApplicationDataFullMap, other.IncludeNoteApplicationDataFullMap))))
        && ((__isset.includeResourceApplicationDataFullMap == other.__isset.includeResourceApplicationDataFullMap) && ((!__isset.includeResourceApplicationDataFullMap) || (global::System.Object.Equals(IncludeResourceApplicationDataFullMap, other.IncludeResourceApplicationDataFullMap))))
        && ((__isset.includeNoteResourceApplicationDataFullMap == other.__isset.includeNoteResourceApplicationDataFullMap) && ((!__isset.includeNoteResourceApplicationDataFullMap) || (global::System.Object.Equals(IncludeNoteResourceApplicationDataFullMap, other.IncludeNoteResourceApplicationDataFullMap))))
        && ((__isset.includeSharedNotes == other.__isset.includeSharedNotes) && ((!__isset.includeSharedNotes) || (global::System.Object.Equals(IncludeSharedNotes, other.IncludeSharedNotes))))
        && ((__isset.omitSharedNotebooks == other.__isset.omitSharedNotebooks) && ((!__isset.omitSharedNotebooks) || (global::System.Object.Equals(OmitSharedNotebooks, other.OmitSharedNotebooks))))
        && ((__isset.requireNoteContentClass == other.__isset.requireNoteContentClass) && ((!__isset.requireNoteContentClass) || (global::System.Object.Equals(RequireNoteContentClass, other.RequireNoteContentClass))))
        && ((__isset.notebookGuids == other.__isset.notebookGuids) && ((!__isset.notebookGuids) || (TCollections.Equals(NotebookGuids, other.NotebookGuids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.includeNotes)
        {
          hashcode = (hashcode * 397) + IncludeNotes.GetHashCode();
        }
        if(__isset.includeNoteResources)
        {
          hashcode = (hashcode * 397) + IncludeNoteResources.GetHashCode();
        }
        if(__isset.includeNoteAttributes)
        {
          hashcode = (hashcode * 397) + IncludeNoteAttributes.GetHashCode();
        }
        if(__isset.includeNotebooks)
        {
          hashcode = (hashcode * 397) + IncludeNotebooks.GetHashCode();
        }
        if(__isset.includeTags)
        {
          hashcode = (hashcode * 397) + IncludeTags.GetHashCode();
        }
        if(__isset.includeSearches)
        {
          hashcode = (hashcode * 397) + IncludeSearches.GetHashCode();
        }
        if(__isset.includeResources)
        {
          hashcode = (hashcode * 397) + IncludeResources.GetHashCode();
        }
        if(__isset.includeLinkedNotebooks)
        {
          hashcode = (hashcode * 397) + IncludeLinkedNotebooks.GetHashCode();
        }
        if(__isset.includeExpunged)
        {
          hashcode = (hashcode * 397) + IncludeExpunged.GetHashCode();
        }
        if(__isset.includeNoteApplicationDataFullMap)
        {
          hashcode = (hashcode * 397) + IncludeNoteApplicationDataFullMap.GetHashCode();
        }
        if(__isset.includeResourceApplicationDataFullMap)
        {
          hashcode = (hashcode * 397) + IncludeResourceApplicationDataFullMap.GetHashCode();
        }
        if(__isset.includeNoteResourceApplicationDataFullMap)
        {
          hashcode = (hashcode * 397) + IncludeNoteResourceApplicationDataFullMap.GetHashCode();
        }
        if(__isset.includeSharedNotes)
        {
          hashcode = (hashcode * 397) + IncludeSharedNotes.GetHashCode();
        }
        if(__isset.omitSharedNotebooks)
        {
          hashcode = (hashcode * 397) + OmitSharedNotebooks.GetHashCode();
        }
        if((RequireNoteContentClass != null) && __isset.requireNoteContentClass)
        {
          hashcode = (hashcode * 397) + RequireNoteContentClass.GetHashCode();
        }
        if((NotebookGuids != null) && __isset.notebookGuids)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(NotebookGuids);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp61 = new StringBuilder("SyncChunkFilter(");
      int tmp62 = 0;
      if(__isset.includeNotes)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNotes: ");
        IncludeNotes.ToString(tmp61);
      }
      if(__isset.includeNoteResources)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNoteResources: ");
        IncludeNoteResources.ToString(tmp61);
      }
      if(__isset.includeNoteAttributes)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNoteAttributes: ");
        IncludeNoteAttributes.ToString(tmp61);
      }
      if(__isset.includeNotebooks)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNotebooks: ");
        IncludeNotebooks.ToString(tmp61);
      }
      if(__isset.includeTags)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeTags: ");
        IncludeTags.ToString(tmp61);
      }
      if(__isset.includeSearches)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeSearches: ");
        IncludeSearches.ToString(tmp61);
      }
      if(__isset.includeResources)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeResources: ");
        IncludeResources.ToString(tmp61);
      }
      if(__isset.includeLinkedNotebooks)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeLinkedNotebooks: ");
        IncludeLinkedNotebooks.ToString(tmp61);
      }
      if(__isset.includeExpunged)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeExpunged: ");
        IncludeExpunged.ToString(tmp61);
      }
      if(__isset.includeNoteApplicationDataFullMap)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNoteApplicationDataFullMap: ");
        IncludeNoteApplicationDataFullMap.ToString(tmp61);
      }
      if(__isset.includeResourceApplicationDataFullMap)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeResourceApplicationDataFullMap: ");
        IncludeResourceApplicationDataFullMap.ToString(tmp61);
      }
      if(__isset.includeNoteResourceApplicationDataFullMap)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeNoteResourceApplicationDataFullMap: ");
        IncludeNoteResourceApplicationDataFullMap.ToString(tmp61);
      }
      if(__isset.includeSharedNotes)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("IncludeSharedNotes: ");
        IncludeSharedNotes.ToString(tmp61);
      }
      if(__isset.omitSharedNotebooks)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("OmitSharedNotebooks: ");
        OmitSharedNotebooks.ToString(tmp61);
      }
      if((RequireNoteContentClass != null) && __isset.requireNoteContentClass)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("RequireNoteContentClass: ");
        RequireNoteContentClass.ToString(tmp61);
      }
      if((NotebookGuids != null) && __isset.notebookGuids)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("NotebookGuids: ");
        NotebookGuids.ToString(tmp61);
      }
      tmp61.Append(')');
      return tmp61.ToString();
    }
  }

}

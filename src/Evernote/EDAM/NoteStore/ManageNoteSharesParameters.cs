/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures parameters used by clients to manage the shares for a given
  /// note via the manageNoteShares function. This is used only to manage
  /// the existing memberships and invitations for a note. To invite a new
  /// recipient, use NoteStore.createOrUpdateSharedNotes.
  /// 
  /// The only field of an existing membership or invitation that can be
  /// updated by this function is the share privilege.
  /// 
  /// <dl>
  ///   <dt>noteGuid</dt>
  ///   <dd>The GUID of the note whose shares are being managed.</dd>
  /// 
  ///   <dt>membershipsToUpdate</dt>
  ///   <dd>A list of existing memberships to update. This field is not
  ///     meant to be the full set of memberships for the note. Clients
  ///     should only include those existing memberships that they wish
  ///     to modify. To remove an existing membership, see the unshares
  ///     field.</dd>
  /// 
  ///   <dt>invitationsToUpdate</dt>
  ///   <dd>The list of outstanding invitations to update, as matched by the
  ///     identity field of the NoteInvitationShareRelatioship instances.
  ///     This field is not meant to be the full set of invitations for the
  ///     note. Clients should only include those existing invitations that
  ///     they wish to modify.</dd>
  /// 
  ///   <dt>membershipsToUnshare</dt>
  ///   <dd>A list of existing memberships to expunge from the service.</dd>
  /// 
  ///   <dt>invitationsToUnshare</dt>
  ///   <dd>A list of outstanding invitations to expunge from the service.</dd>
  /// </dl>
  /// </summary>
  public partial class ManageNoteSharesParameters : TBase
  {
    private string _noteGuid;
    private List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> _membershipsToUpdate;
    private List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> _invitationsToUpdate;
    private List<int> _membershipsToUnshare;
    private List<long> _invitationsToUnshare;

    public string NoteGuid
    {
      get
      {
        return _noteGuid;
      }
      set
      {
        __isset.noteGuid = true;
        this._noteGuid = value;
      }
    }

    public List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship> MembershipsToUpdate
    {
      get
      {
        return _membershipsToUpdate;
      }
      set
      {
        __isset.membershipsToUpdate = true;
        this._membershipsToUpdate = value;
      }
    }

    public List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship> InvitationsToUpdate
    {
      get
      {
        return _invitationsToUpdate;
      }
      set
      {
        __isset.invitationsToUpdate = true;
        this._invitationsToUpdate = value;
      }
    }

    public List<int> MembershipsToUnshare
    {
      get
      {
        return _membershipsToUnshare;
      }
      set
      {
        __isset.membershipsToUnshare = true;
        this._membershipsToUnshare = value;
      }
    }

    public List<long> InvitationsToUnshare
    {
      get
      {
        return _invitationsToUnshare;
      }
      set
      {
        __isset.invitationsToUnshare = true;
        this._invitationsToUnshare = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool noteGuid;
      public bool membershipsToUpdate;
      public bool invitationsToUpdate;
      public bool membershipsToUnshare;
      public bool invitationsToUnshare;
    }

    public ManageNoteSharesParameters()
    {
    }

    public ManageNoteSharesParameters DeepCopy()
    {
      var tmp320 = new ManageNoteSharesParameters();
      if((NoteGuid != null) && __isset.noteGuid)
      {
        tmp320.NoteGuid = this.NoteGuid;
      }
      tmp320.__isset.noteGuid = this.__isset.noteGuid;
      if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
      {
        tmp320.MembershipsToUpdate = this.MembershipsToUpdate.DeepCopy();
      }
      tmp320.__isset.membershipsToUpdate = this.__isset.membershipsToUpdate;
      if((InvitationsToUpdate != null) && __isset.invitationsToUpdate)
      {
        tmp320.InvitationsToUpdate = this.InvitationsToUpdate.DeepCopy();
      }
      tmp320.__isset.invitationsToUpdate = this.__isset.invitationsToUpdate;
      if((MembershipsToUnshare != null) && __isset.membershipsToUnshare)
      {
        tmp320.MembershipsToUnshare = this.MembershipsToUnshare.DeepCopy();
      }
      tmp320.__isset.membershipsToUnshare = this.__isset.membershipsToUnshare;
      if((InvitationsToUnshare != null) && __isset.invitationsToUnshare)
      {
        tmp320.InvitationsToUnshare = this.InvitationsToUnshare.DeepCopy();
      }
      tmp320.__isset.invitationsToUnshare = this.__isset.invitationsToUnshare;
      return tmp320;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                NoteGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list321 = await iprot.ReadListBeginAsync(cancellationToken);
                  MembershipsToUpdate = new List<global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship>(_list321.Count);
                  for(int _i322 = 0; _i322 < _list321.Count; ++_i322)
                  {
                    global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship _elem323;
                    _elem323 = new global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship();
                    await _elem323.ReadAsync(iprot, cancellationToken);
                    MembershipsToUpdate.Add(_elem323);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list324 = await iprot.ReadListBeginAsync(cancellationToken);
                  InvitationsToUpdate = new List<global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship>(_list324.Count);
                  for(int _i325 = 0; _i325 < _list324.Count; ++_i325)
                  {
                    global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship _elem326;
                    _elem326 = new global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship();
                    await _elem326.ReadAsync(iprot, cancellationToken);
                    InvitationsToUpdate.Add(_elem326);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list327 = await iprot.ReadListBeginAsync(cancellationToken);
                  MembershipsToUnshare = new List<int>(_list327.Count);
                  for(int _i328 = 0; _i328 < _list327.Count; ++_i328)
                  {
                    int _elem329;
                    _elem329 = await iprot.ReadI32Async(cancellationToken);
                    MembershipsToUnshare.Add(_elem329);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list330 = await iprot.ReadListBeginAsync(cancellationToken);
                  InvitationsToUnshare = new List<long>(_list330.Count);
                  for(int _i331 = 0; _i331 < _list330.Count; ++_i331)
                  {
                    long _elem332;
                    _elem332 = await iprot.ReadI64Async(cancellationToken);
                    InvitationsToUnshare.Add(_elem332);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp333 = new TStruct("ManageNoteSharesParameters");
        await oprot.WriteStructBeginAsync(tmp333, cancellationToken);
        var tmp334 = new TField();
        if((NoteGuid != null) && __isset.noteGuid)
        {
          tmp334.Name = "noteGuid";
          tmp334.Type = TType.String;
          tmp334.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
          await oprot.WriteStringAsync(NoteGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
        {
          tmp334.Name = "membershipsToUpdate";
          tmp334.Type = TType.List;
          tmp334.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, MembershipsToUpdate.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.NoteMemberShareRelationship _iter335 in MembershipsToUpdate)
            {
              await _iter335.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InvitationsToUpdate != null) && __isset.invitationsToUpdate)
        {
          tmp334.Name = "invitationsToUpdate";
          tmp334.Type = TType.List;
          tmp334.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, InvitationsToUpdate.Count), cancellationToken);
            foreach (global::Evernote.EDAM.NoteStore.NoteInvitationShareRelationship _iter336 in InvitationsToUpdate)
            {
              await _iter336.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MembershipsToUnshare != null) && __isset.membershipsToUnshare)
        {
          tmp334.Name = "membershipsToUnshare";
          tmp334.Type = TType.List;
          tmp334.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, MembershipsToUnshare.Count), cancellationToken);
            foreach (int _iter337 in MembershipsToUnshare)
            {
              await oprot.WriteI32Async(_iter337, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InvitationsToUnshare != null) && __isset.invitationsToUnshare)
        {
          tmp334.Name = "invitationsToUnshare";
          tmp334.Type = TType.List;
          tmp334.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, InvitationsToUnshare.Count), cancellationToken);
            foreach (long _iter338 in InvitationsToUnshare)
            {
              await oprot.WriteI64Async(_iter338, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ManageNoteSharesParameters other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))))
        && ((__isset.membershipsToUpdate == other.__isset.membershipsToUpdate) && ((!__isset.membershipsToUpdate) || (TCollections.Equals(MembershipsToUpdate, other.MembershipsToUpdate))))
        && ((__isset.invitationsToUpdate == other.__isset.invitationsToUpdate) && ((!__isset.invitationsToUpdate) || (TCollections.Equals(InvitationsToUpdate, other.InvitationsToUpdate))))
        && ((__isset.membershipsToUnshare == other.__isset.membershipsToUnshare) && ((!__isset.membershipsToUnshare) || (TCollections.Equals(MembershipsToUnshare, other.MembershipsToUnshare))))
        && ((__isset.invitationsToUnshare == other.__isset.invitationsToUnshare) && ((!__isset.invitationsToUnshare) || (TCollections.Equals(InvitationsToUnshare, other.InvitationsToUnshare))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NoteGuid != null) && __isset.noteGuid)
        {
          hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
        }
        if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(MembershipsToUpdate);
        }
        if((InvitationsToUpdate != null) && __isset.invitationsToUpdate)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InvitationsToUpdate);
        }
        if((MembershipsToUnshare != null) && __isset.membershipsToUnshare)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(MembershipsToUnshare);
        }
        if((InvitationsToUnshare != null) && __isset.invitationsToUnshare)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InvitationsToUnshare);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp339 = new StringBuilder("ManageNoteSharesParameters(");
      int tmp340 = 0;
      if((NoteGuid != null) && __isset.noteGuid)
      {
        if(0 < tmp340++) { tmp339.Append(", "); }
        tmp339.Append("NoteGuid: ");
        NoteGuid.ToString(tmp339);
      }
      if((MembershipsToUpdate != null) && __isset.membershipsToUpdate)
      {
        if(0 < tmp340++) { tmp339.Append(", "); }
        tmp339.Append("MembershipsToUpdate: ");
        MembershipsToUpdate.ToString(tmp339);
      }
      if((InvitationsToUpdate != null) && __isset.invitationsToUpdate)
      {
        if(0 < tmp340++) { tmp339.Append(", "); }
        tmp339.Append("InvitationsToUpdate: ");
        InvitationsToUpdate.ToString(tmp339);
      }
      if((MembershipsToUnshare != null) && __isset.membershipsToUnshare)
      {
        if(0 < tmp340++) { tmp339.Append(", "); }
        tmp339.Append("MembershipsToUnshare: ");
        MembershipsToUnshare.ToString(tmp339);
      }
      if((InvitationsToUnshare != null) && __isset.invitationsToUnshare)
      {
        if(0 < tmp340++) { tmp339.Append(", "); }
        tmp339.Append("InvitationsToUnshare: ");
        InvitationsToUnshare.ToString(tmp339);
      }
      tmp339.Append(')');
      return tmp339.ToString();
    }
  }

}

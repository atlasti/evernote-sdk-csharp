/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A named search associated with the account that can be quickly re-used.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this search.  Will be set by the
  ///   service, so may be omitted by the client when creating.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>name</dt>
  ///   <dd>The name of the saved search to display in the GUI.  The
  ///   account may only contain one search with a given name (case-insensitive
  ///   compare). Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
  ///   </dd>
  /// 
  /// <dt>query</dt>
  ///   <dd>A string expressing the search to be performed.
  ///   <br/>
  ///   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>format</dt>
  ///   <dd>The format of the query string, to determine how to parse
  ///   and process it.
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>scope</dt>
  ///   <dd><p>Specifies the set of notes that should be included in the search, if
  ///    possible.</p>
  ///    <p>Clients are expected to search as much of the desired scope as possible,
  ///    with the understanding that a given client may not be able to cover the full
  ///    specified scope. For example, when executing a search that includes notes in both
  ///    the owner's account and business notebooks, a mobile client may choose to only
  ///    search within the user's account because it is not capable of searching both
  ///    scopes simultaneously. When a search across multiple scopes is not possible,
  ///    a client may choose which scope to search based on the current application
  ///    context. If a client cannot search any of the desired scopes, it should refuse
  ///    to execute the search.</p>
  ///    </dd>
  /// </dl>
  /// </summary>
  public partial class SavedSearch : TBase
  {
    private string _guid;
    private string _name;
    private string _query;
    private global::Evernote.EDAM.Type.QueryFormat _format;
    private int _updateSequenceNum;
    private global::Evernote.EDAM.Type.SavedSearchScope _scope;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.QueryFormat"/>
    /// </summary>
    public global::Evernote.EDAM.Type.QueryFormat Format
    {
      get
      {
        return _format;
      }
      set
      {
        __isset.format = true;
        this._format = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public global::Evernote.EDAM.Type.SavedSearchScope Scope
    {
      get
      {
        return _scope;
      }
      set
      {
        __isset.scope = true;
        this._scope = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool name;
      public bool query;
      public bool format;
      public bool updateSequenceNum;
      public bool scope;
    }

    public SavedSearch()
    {
    }

    public SavedSearch DeepCopy()
    {
      var tmp143 = new SavedSearch();
      if((Guid != null) && __isset.guid)
      {
        tmp143.Guid = this.Guid;
      }
      tmp143.__isset.guid = this.__isset.guid;
      if((Name != null) && __isset.name)
      {
        tmp143.Name = this.Name;
      }
      tmp143.__isset.name = this.__isset.name;
      if((Query != null) && __isset.query)
      {
        tmp143.Query = this.Query;
      }
      tmp143.__isset.query = this.__isset.query;
      if(__isset.format)
      {
        tmp143.Format = this.Format;
      }
      tmp143.__isset.format = this.__isset.format;
      if(__isset.updateSequenceNum)
      {
        tmp143.UpdateSequenceNum = this.UpdateSequenceNum;
      }
      tmp143.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
      if((Scope != null) && __isset.scope)
      {
        tmp143.Scope = (global::Evernote.EDAM.Type.SavedSearchScope)this.Scope.DeepCopy();
      }
      tmp143.__isset.scope = this.__isset.scope;
      return tmp143;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Format = (global::Evernote.EDAM.Type.QueryFormat)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Scope = new global::Evernote.EDAM.Type.SavedSearchScope();
                await Scope.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp144 = new TStruct("SavedSearch");
        await oprot.WriteStructBeginAsync(tmp144, cancellationToken);
        var tmp145 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp145.Name = "guid";
          tmp145.Type = TType.String;
          tmp145.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp145.Name = "name";
          tmp145.Type = TType.String;
          tmp145.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Query != null) && __isset.query)
        {
          tmp145.Name = "query";
          tmp145.Type = TType.String;
          tmp145.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteStringAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.format)
        {
          tmp145.Name = "format";
          tmp145.Type = TType.I32;
          tmp145.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteI32Async((int)Format, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateSequenceNum)
        {
          tmp145.Name = "updateSequenceNum";
          tmp145.Type = TType.I32;
          tmp145.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Scope != null) && __isset.scope)
        {
          tmp145.Name = "scope";
          tmp145.Type = TType.Struct;
          tmp145.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
          await Scope.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SavedSearch other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.query == other.__isset.query) && ((!__isset.query) || (global::System.Object.Equals(Query, other.Query))))
        && ((__isset.format == other.__isset.format) && ((!__isset.format) || (global::System.Object.Equals(Format, other.Format))))
        && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))))
        && ((__isset.scope == other.__isset.scope) && ((!__isset.scope) || (global::System.Object.Equals(Scope, other.Scope))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Query != null) && __isset.query)
        {
          hashcode = (hashcode * 397) + Query.GetHashCode();
        }
        if(__isset.format)
        {
          hashcode = (hashcode * 397) + Format.GetHashCode();
        }
        if(__isset.updateSequenceNum)
        {
          hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        }
        if((Scope != null) && __isset.scope)
        {
          hashcode = (hashcode * 397) + Scope.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp146 = new StringBuilder("SavedSearch(");
      int tmp147 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Guid: ");
        Guid.ToString(tmp146);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Name: ");
        Name.ToString(tmp146);
      }
      if((Query != null) && __isset.query)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Query: ");
        Query.ToString(tmp146);
      }
      if(__isset.format)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Format: ");
        Format.ToString(tmp146);
      }
      if(__isset.updateSequenceNum)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("UpdateSequenceNum: ");
        UpdateSequenceNum.ToString(tmp146);
      }
      if((Scope != null) && __isset.scope)
      {
        if(0 < tmp147++) { tmp146.Append(", "); }
        tmp146.Append("Scope: ");
        Scope.ToString(tmp146);
      }
      tmp146.Append(')');
      return tmp146.ToString();
    }
  }

}

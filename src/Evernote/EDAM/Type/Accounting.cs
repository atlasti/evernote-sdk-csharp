/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  This represents the bookkeeping information for the user's subscription.
  /// 
  /// <dl>
  ///  <dt>uploadLimitEnd</dt>
  ///    <dd>The date and time when the current upload limit
  ///    expires.  At this time, the monthly upload count reverts to 0 and a new
  ///    limit is imposed.  This date and time is exclusive, so this is effectively
  ///    the start of the new month.
  ///    </dd>
  ///  <dt>uploadLimitNextMonth</dt>
  ///    <dd> When uploadLimitEnd is reached, the service
  ///    will change uploadLimit to uploadLimitNextMonth. If a premium account is
  ///    canceled, this mechanism will reset the quota appropriately.
  ///    </dd>
  ///  <dt>premiumServiceStatus</dt>
  ///    <dd>Indicates the phases of a premium account
  ///    during the billing process.
  ///    </dd>
  ///  <dt>premiumOrderNumber</dt>
  ///    <dd>The order number used by the commerce system to
  ///    process recurring payments
  ///    </dd>
  ///  <dt>premiumServiceStart</dt>
  ///    <dd>The start date when this premium promotion
  ///    began (this number will get overwritten if a premium service is canceled
  ///    and then re-activated).
  ///    </dd>
  ///  <dt>premiumCommerceService</dt>
  ///    <dd>The commerce system used (paypal, Google
  ///    checkout, etc)
  ///    </dd>
  ///  <dt>premiumServiceSKU</dt>
  ///    <dd>The code associated with the purchase eg. monthly
  ///    or annual purchase. Clients should interpret this value and localize it.
  ///    </dd>
  ///  <dt>lastSuccessfulCharge</dt>
  ///    <dd>Date the last time the user was charged.
  ///    Null if never charged.
  ///    </dd>
  ///  <dt>lastFailedCharge</dt>
  ///    <dd>Date the last time a charge was attempted and
  ///    failed.
  ///    </dd>
  ///  <dt>lastFailedChargeReason</dt>
  ///    <dd>Reason provided for the charge failure
  ///    </dd>
  ///  <dt>nextPaymentDue</dt>
  ///    <dd>The end of the billing cycle. This could be in the
  ///    past if there are failed charges.
  ///    </dd>
  ///  <dt>premiumLockUntil</dt>
  ///    <dd>An internal variable to manage locking operations
  ///    on the commerce variables.
  ///    </dd>
  ///  <dt>updated</dt>
  ///    <dd>The date any modification where made to this record.
  ///    </dd>
  ///  <dt>premiumSubscriptionNumber</dt>
  ///    <dd>The number number identifying the
  ///    recurring subscription used to make the recurring charges.
  ///    </dd>
  ///  <dt>lastRequestedCharge</dt>
  ///    <dd>Date charge last attempted</dd>
  ///  <dt>currency</dt>
  ///    <dd>ISO 4217 currency code</dd>
  ///  <dt>unitPrice</dt>
  ///    <dd>charge in the smallest unit of the currency (e.g. cents for USD)</dd>
  ///  <dt>businessId</dt>
  ///    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
  ///  <dt>businessName</dt>
  ///    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
  ///  <dt>businessRole</dt>
  ///    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
  ///  <dt>unitDiscount</dt>
  ///    <dd>discount per seat in negative amount and smallest unit of the currency (e.g.
  ///        cents for USD)</dd>
  ///  <dt>nextChargeDate</dt>
  ///    <dd>The next time the user will be charged, may or may not be the same as
  ///        nextPaymentDue</dd>
  ///  </dl>
  /// </summary>
  public partial class Accounting : TBase
  {
    private long _uploadLimitEnd;
    private long _uploadLimitNextMonth;
    private global::Evernote.EDAM.Type.PremiumOrderStatus _premiumServiceStatus;
    private string _premiumOrderNumber;
    private string _premiumCommerceService;
    private long _premiumServiceStart;
    private string _premiumServiceSKU;
    private long _lastSuccessfulCharge;
    private long _lastFailedCharge;
    private string _lastFailedChargeReason;
    private long _nextPaymentDue;
    private long _premiumLockUntil;
    private long _updated;
    private string _premiumSubscriptionNumber;
    private long _lastRequestedCharge;
    private string _currency;
    private int _unitPrice;
    private int _businessId;
    private string _businessName;
    private global::Evernote.EDAM.Type.BusinessUserRole _businessRole;
    private int _unitDiscount;
    private long _nextChargeDate;
    private int _availablePoints;

    public long UploadLimitEnd
    {
      get
      {
        return _uploadLimitEnd;
      }
      set
      {
        __isset.uploadLimitEnd = true;
        this._uploadLimitEnd = value;
      }
    }

    public long UploadLimitNextMonth
    {
      get
      {
        return _uploadLimitNextMonth;
      }
      set
      {
        __isset.uploadLimitNextMonth = true;
        this._uploadLimitNextMonth = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.PremiumOrderStatus"/>
    /// </summary>
    public global::Evernote.EDAM.Type.PremiumOrderStatus PremiumServiceStatus
    {
      get
      {
        return _premiumServiceStatus;
      }
      set
      {
        __isset.premiumServiceStatus = true;
        this._premiumServiceStatus = value;
      }
    }

    public string PremiumOrderNumber
    {
      get
      {
        return _premiumOrderNumber;
      }
      set
      {
        __isset.premiumOrderNumber = true;
        this._premiumOrderNumber = value;
      }
    }

    public string PremiumCommerceService
    {
      get
      {
        return _premiumCommerceService;
      }
      set
      {
        __isset.premiumCommerceService = true;
        this._premiumCommerceService = value;
      }
    }

    public long PremiumServiceStart
    {
      get
      {
        return _premiumServiceStart;
      }
      set
      {
        __isset.premiumServiceStart = true;
        this._premiumServiceStart = value;
      }
    }

    public string PremiumServiceSKU
    {
      get
      {
        return _premiumServiceSKU;
      }
      set
      {
        __isset.premiumServiceSKU = true;
        this._premiumServiceSKU = value;
      }
    }

    public long LastSuccessfulCharge
    {
      get
      {
        return _lastSuccessfulCharge;
      }
      set
      {
        __isset.lastSuccessfulCharge = true;
        this._lastSuccessfulCharge = value;
      }
    }

    public long LastFailedCharge
    {
      get
      {
        return _lastFailedCharge;
      }
      set
      {
        __isset.lastFailedCharge = true;
        this._lastFailedCharge = value;
      }
    }

    public string LastFailedChargeReason
    {
      get
      {
        return _lastFailedChargeReason;
      }
      set
      {
        __isset.lastFailedChargeReason = true;
        this._lastFailedChargeReason = value;
      }
    }

    public long NextPaymentDue
    {
      get
      {
        return _nextPaymentDue;
      }
      set
      {
        __isset.nextPaymentDue = true;
        this._nextPaymentDue = value;
      }
    }

    public long PremiumLockUntil
    {
      get
      {
        return _premiumLockUntil;
      }
      set
      {
        __isset.premiumLockUntil = true;
        this._premiumLockUntil = value;
      }
    }

    public long Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }

    public string PremiumSubscriptionNumber
    {
      get
      {
        return _premiumSubscriptionNumber;
      }
      set
      {
        __isset.premiumSubscriptionNumber = true;
        this._premiumSubscriptionNumber = value;
      }
    }

    public long LastRequestedCharge
    {
      get
      {
        return _lastRequestedCharge;
      }
      set
      {
        __isset.lastRequestedCharge = true;
        this._lastRequestedCharge = value;
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }

    public int UnitPrice
    {
      get
      {
        return _unitPrice;
      }
      set
      {
        __isset.unitPrice = true;
        this._unitPrice = value;
      }
    }

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }

    public string BusinessName
    {
      get
      {
        return _businessName;
      }
      set
      {
        __isset.businessName = true;
        this._businessName = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.BusinessUserRole"/>
    /// </summary>
    public global::Evernote.EDAM.Type.BusinessUserRole BusinessRole
    {
      get
      {
        return _businessRole;
      }
      set
      {
        __isset.businessRole = true;
        this._businessRole = value;
      }
    }

    public int UnitDiscount
    {
      get
      {
        return _unitDiscount;
      }
      set
      {
        __isset.unitDiscount = true;
        this._unitDiscount = value;
      }
    }

    public long NextChargeDate
    {
      get
      {
        return _nextChargeDate;
      }
      set
      {
        __isset.nextChargeDate = true;
        this._nextChargeDate = value;
      }
    }

    public int AvailablePoints
    {
      get
      {
        return _availablePoints;
      }
      set
      {
        __isset.availablePoints = true;
        this._availablePoints = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool uploadLimitEnd;
      public bool uploadLimitNextMonth;
      public bool premiumServiceStatus;
      public bool premiumOrderNumber;
      public bool premiumCommerceService;
      public bool premiumServiceStart;
      public bool premiumServiceSKU;
      public bool lastSuccessfulCharge;
      public bool lastFailedCharge;
      public bool lastFailedChargeReason;
      public bool nextPaymentDue;
      public bool premiumLockUntil;
      public bool updated;
      public bool premiumSubscriptionNumber;
      public bool lastRequestedCharge;
      public bool currency;
      public bool unitPrice;
      public bool businessId;
      public bool businessName;
      public bool businessRole;
      public bool unitDiscount;
      public bool nextChargeDate;
      public bool availablePoints;
    }

    public Accounting()
    {
    }

    public Accounting DeepCopy()
    {
      var tmp23 = new Accounting();
      if(__isset.uploadLimitEnd)
      {
        tmp23.UploadLimitEnd = this.UploadLimitEnd;
      }
      tmp23.__isset.uploadLimitEnd = this.__isset.uploadLimitEnd;
      if(__isset.uploadLimitNextMonth)
      {
        tmp23.UploadLimitNextMonth = this.UploadLimitNextMonth;
      }
      tmp23.__isset.uploadLimitNextMonth = this.__isset.uploadLimitNextMonth;
      if(__isset.premiumServiceStatus)
      {
        tmp23.PremiumServiceStatus = this.PremiumServiceStatus;
      }
      tmp23.__isset.premiumServiceStatus = this.__isset.premiumServiceStatus;
      if((PremiumOrderNumber != null) && __isset.premiumOrderNumber)
      {
        tmp23.PremiumOrderNumber = this.PremiumOrderNumber;
      }
      tmp23.__isset.premiumOrderNumber = this.__isset.premiumOrderNumber;
      if((PremiumCommerceService != null) && __isset.premiumCommerceService)
      {
        tmp23.PremiumCommerceService = this.PremiumCommerceService;
      }
      tmp23.__isset.premiumCommerceService = this.__isset.premiumCommerceService;
      if(__isset.premiumServiceStart)
      {
        tmp23.PremiumServiceStart = this.PremiumServiceStart;
      }
      tmp23.__isset.premiumServiceStart = this.__isset.premiumServiceStart;
      if((PremiumServiceSKU != null) && __isset.premiumServiceSKU)
      {
        tmp23.PremiumServiceSKU = this.PremiumServiceSKU;
      }
      tmp23.__isset.premiumServiceSKU = this.__isset.premiumServiceSKU;
      if(__isset.lastSuccessfulCharge)
      {
        tmp23.LastSuccessfulCharge = this.LastSuccessfulCharge;
      }
      tmp23.__isset.lastSuccessfulCharge = this.__isset.lastSuccessfulCharge;
      if(__isset.lastFailedCharge)
      {
        tmp23.LastFailedCharge = this.LastFailedCharge;
      }
      tmp23.__isset.lastFailedCharge = this.__isset.lastFailedCharge;
      if((LastFailedChargeReason != null) && __isset.lastFailedChargeReason)
      {
        tmp23.LastFailedChargeReason = this.LastFailedChargeReason;
      }
      tmp23.__isset.lastFailedChargeReason = this.__isset.lastFailedChargeReason;
      if(__isset.nextPaymentDue)
      {
        tmp23.NextPaymentDue = this.NextPaymentDue;
      }
      tmp23.__isset.nextPaymentDue = this.__isset.nextPaymentDue;
      if(__isset.premiumLockUntil)
      {
        tmp23.PremiumLockUntil = this.PremiumLockUntil;
      }
      tmp23.__isset.premiumLockUntil = this.__isset.premiumLockUntil;
      if(__isset.updated)
      {
        tmp23.Updated = this.Updated;
      }
      tmp23.__isset.updated = this.__isset.updated;
      if((PremiumSubscriptionNumber != null) && __isset.premiumSubscriptionNumber)
      {
        tmp23.PremiumSubscriptionNumber = this.PremiumSubscriptionNumber;
      }
      tmp23.__isset.premiumSubscriptionNumber = this.__isset.premiumSubscriptionNumber;
      if(__isset.lastRequestedCharge)
      {
        tmp23.LastRequestedCharge = this.LastRequestedCharge;
      }
      tmp23.__isset.lastRequestedCharge = this.__isset.lastRequestedCharge;
      if((Currency != null) && __isset.currency)
      {
        tmp23.Currency = this.Currency;
      }
      tmp23.__isset.currency = this.__isset.currency;
      if(__isset.unitPrice)
      {
        tmp23.UnitPrice = this.UnitPrice;
      }
      tmp23.__isset.unitPrice = this.__isset.unitPrice;
      if(__isset.businessId)
      {
        tmp23.BusinessId = this.BusinessId;
      }
      tmp23.__isset.businessId = this.__isset.businessId;
      if((BusinessName != null) && __isset.businessName)
      {
        tmp23.BusinessName = this.BusinessName;
      }
      tmp23.__isset.businessName = this.__isset.businessName;
      if(__isset.businessRole)
      {
        tmp23.BusinessRole = this.BusinessRole;
      }
      tmp23.__isset.businessRole = this.__isset.businessRole;
      if(__isset.unitDiscount)
      {
        tmp23.UnitDiscount = this.UnitDiscount;
      }
      tmp23.__isset.unitDiscount = this.__isset.unitDiscount;
      if(__isset.nextChargeDate)
      {
        tmp23.NextChargeDate = this.NextChargeDate;
      }
      tmp23.__isset.nextChargeDate = this.__isset.nextChargeDate;
      if(__isset.availablePoints)
      {
        tmp23.AvailablePoints = this.AvailablePoints;
      }
      tmp23.__isset.availablePoints = this.__isset.availablePoints;
      return tmp23;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64)
              {
                UploadLimitEnd = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                UploadLimitNextMonth = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                PremiumServiceStatus = (global::Evernote.EDAM.Type.PremiumOrderStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                PremiumOrderNumber = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                PremiumCommerceService = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                PremiumServiceStart = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                PremiumServiceSKU = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I64)
              {
                LastSuccessfulCharge = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I64)
              {
                LastFailedCharge = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                LastFailedChargeReason = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I64)
              {
                NextPaymentDue = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.I64)
              {
                PremiumLockUntil = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.I64)
              {
                Updated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.String)
              {
                PremiumSubscriptionNumber = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.I64)
              {
                LastRequestedCharge = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.String)
              {
                Currency = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.I32)
              {
                UnitPrice = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.I32)
              {
                BusinessId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.String)
              {
                BusinessName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.I32)
              {
                BusinessRole = (global::Evernote.EDAM.Type.BusinessUserRole)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.I32)
              {
                UnitDiscount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.I64)
              {
                NextChargeDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 25:
              if (field.Type == TType.I32)
              {
                AvailablePoints = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp24 = new TStruct("Accounting");
        await oprot.WriteStructBeginAsync(tmp24, cancellationToken);
        var tmp25 = new TField();
        if(__isset.uploadLimitEnd)
        {
          tmp25.Name = "uploadLimitEnd";
          tmp25.Type = TType.I64;
          tmp25.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(UploadLimitEnd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uploadLimitNextMonth)
        {
          tmp25.Name = "uploadLimitNextMonth";
          tmp25.Type = TType.I64;
          tmp25.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(UploadLimitNextMonth, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.premiumServiceStatus)
        {
          tmp25.Name = "premiumServiceStatus";
          tmp25.Type = TType.I32;
          tmp25.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async((int)PremiumServiceStatus, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PremiumOrderNumber != null) && __isset.premiumOrderNumber)
        {
          tmp25.Name = "premiumOrderNumber";
          tmp25.Type = TType.String;
          tmp25.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(PremiumOrderNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PremiumCommerceService != null) && __isset.premiumCommerceService)
        {
          tmp25.Name = "premiumCommerceService";
          tmp25.Type = TType.String;
          tmp25.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(PremiumCommerceService, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.premiumServiceStart)
        {
          tmp25.Name = "premiumServiceStart";
          tmp25.Type = TType.I64;
          tmp25.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(PremiumServiceStart, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PremiumServiceSKU != null) && __isset.premiumServiceSKU)
        {
          tmp25.Name = "premiumServiceSKU";
          tmp25.Type = TType.String;
          tmp25.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(PremiumServiceSKU, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lastSuccessfulCharge)
        {
          tmp25.Name = "lastSuccessfulCharge";
          tmp25.Type = TType.I64;
          tmp25.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(LastSuccessfulCharge, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lastFailedCharge)
        {
          tmp25.Name = "lastFailedCharge";
          tmp25.Type = TType.I64;
          tmp25.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(LastFailedCharge, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LastFailedChargeReason != null) && __isset.lastFailedChargeReason)
        {
          tmp25.Name = "lastFailedChargeReason";
          tmp25.Type = TType.String;
          tmp25.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(LastFailedChargeReason, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.nextPaymentDue)
        {
          tmp25.Name = "nextPaymentDue";
          tmp25.Type = TType.I64;
          tmp25.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(NextPaymentDue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.premiumLockUntil)
        {
          tmp25.Name = "premiumLockUntil";
          tmp25.Type = TType.I64;
          tmp25.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(PremiumLockUntil, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updated)
        {
          tmp25.Name = "updated";
          tmp25.Type = TType.I64;
          tmp25.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(Updated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PremiumSubscriptionNumber != null) && __isset.premiumSubscriptionNumber)
        {
          tmp25.Name = "premiumSubscriptionNumber";
          tmp25.Type = TType.String;
          tmp25.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(PremiumSubscriptionNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lastRequestedCharge)
        {
          tmp25.Name = "lastRequestedCharge";
          tmp25.Type = TType.I64;
          tmp25.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(LastRequestedCharge, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Currency != null) && __isset.currency)
        {
          tmp25.Name = "currency";
          tmp25.Type = TType.String;
          tmp25.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(Currency, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.unitPrice)
        {
          tmp25.Name = "unitPrice";
          tmp25.Type = TType.I32;
          tmp25.ID = 19;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async(UnitPrice, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.businessId)
        {
          tmp25.Name = "businessId";
          tmp25.Type = TType.I32;
          tmp25.ID = 20;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async(BusinessId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BusinessName != null) && __isset.businessName)
        {
          tmp25.Name = "businessName";
          tmp25.Type = TType.String;
          tmp25.ID = 21;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(BusinessName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.businessRole)
        {
          tmp25.Name = "businessRole";
          tmp25.Type = TType.I32;
          tmp25.ID = 22;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async((int)BusinessRole, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.unitDiscount)
        {
          tmp25.Name = "unitDiscount";
          tmp25.Type = TType.I32;
          tmp25.ID = 23;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async(UnitDiscount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.nextChargeDate)
        {
          tmp25.Name = "nextChargeDate";
          tmp25.Type = TType.I64;
          tmp25.ID = 24;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI64Async(NextChargeDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.availablePoints)
        {
          tmp25.Name = "availablePoints";
          tmp25.Type = TType.I32;
          tmp25.ID = 25;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteI32Async(AvailablePoints, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Accounting other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.uploadLimitEnd == other.__isset.uploadLimitEnd) && ((!__isset.uploadLimitEnd) || (global::System.Object.Equals(UploadLimitEnd, other.UploadLimitEnd))))
        && ((__isset.uploadLimitNextMonth == other.__isset.uploadLimitNextMonth) && ((!__isset.uploadLimitNextMonth) || (global::System.Object.Equals(UploadLimitNextMonth, other.UploadLimitNextMonth))))
        && ((__isset.premiumServiceStatus == other.__isset.premiumServiceStatus) && ((!__isset.premiumServiceStatus) || (global::System.Object.Equals(PremiumServiceStatus, other.PremiumServiceStatus))))
        && ((__isset.premiumOrderNumber == other.__isset.premiumOrderNumber) && ((!__isset.premiumOrderNumber) || (global::System.Object.Equals(PremiumOrderNumber, other.PremiumOrderNumber))))
        && ((__isset.premiumCommerceService == other.__isset.premiumCommerceService) && ((!__isset.premiumCommerceService) || (global::System.Object.Equals(PremiumCommerceService, other.PremiumCommerceService))))
        && ((__isset.premiumServiceStart == other.__isset.premiumServiceStart) && ((!__isset.premiumServiceStart) || (global::System.Object.Equals(PremiumServiceStart, other.PremiumServiceStart))))
        && ((__isset.premiumServiceSKU == other.__isset.premiumServiceSKU) && ((!__isset.premiumServiceSKU) || (global::System.Object.Equals(PremiumServiceSKU, other.PremiumServiceSKU))))
        && ((__isset.lastSuccessfulCharge == other.__isset.lastSuccessfulCharge) && ((!__isset.lastSuccessfulCharge) || (global::System.Object.Equals(LastSuccessfulCharge, other.LastSuccessfulCharge))))
        && ((__isset.lastFailedCharge == other.__isset.lastFailedCharge) && ((!__isset.lastFailedCharge) || (global::System.Object.Equals(LastFailedCharge, other.LastFailedCharge))))
        && ((__isset.lastFailedChargeReason == other.__isset.lastFailedChargeReason) && ((!__isset.lastFailedChargeReason) || (global::System.Object.Equals(LastFailedChargeReason, other.LastFailedChargeReason))))
        && ((__isset.nextPaymentDue == other.__isset.nextPaymentDue) && ((!__isset.nextPaymentDue) || (global::System.Object.Equals(NextPaymentDue, other.NextPaymentDue))))
        && ((__isset.premiumLockUntil == other.__isset.premiumLockUntil) && ((!__isset.premiumLockUntil) || (global::System.Object.Equals(PremiumLockUntil, other.PremiumLockUntil))))
        && ((__isset.updated == other.__isset.updated) && ((!__isset.updated) || (global::System.Object.Equals(Updated, other.Updated))))
        && ((__isset.premiumSubscriptionNumber == other.__isset.premiumSubscriptionNumber) && ((!__isset.premiumSubscriptionNumber) || (global::System.Object.Equals(PremiumSubscriptionNumber, other.PremiumSubscriptionNumber))))
        && ((__isset.lastRequestedCharge == other.__isset.lastRequestedCharge) && ((!__isset.lastRequestedCharge) || (global::System.Object.Equals(LastRequestedCharge, other.LastRequestedCharge))))
        && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (global::System.Object.Equals(Currency, other.Currency))))
        && ((__isset.unitPrice == other.__isset.unitPrice) && ((!__isset.unitPrice) || (global::System.Object.Equals(UnitPrice, other.UnitPrice))))
        && ((__isset.businessId == other.__isset.businessId) && ((!__isset.businessId) || (global::System.Object.Equals(BusinessId, other.BusinessId))))
        && ((__isset.businessName == other.__isset.businessName) && ((!__isset.businessName) || (global::System.Object.Equals(BusinessName, other.BusinessName))))
        && ((__isset.businessRole == other.__isset.businessRole) && ((!__isset.businessRole) || (global::System.Object.Equals(BusinessRole, other.BusinessRole))))
        && ((__isset.unitDiscount == other.__isset.unitDiscount) && ((!__isset.unitDiscount) || (global::System.Object.Equals(UnitDiscount, other.UnitDiscount))))
        && ((__isset.nextChargeDate == other.__isset.nextChargeDate) && ((!__isset.nextChargeDate) || (global::System.Object.Equals(NextChargeDate, other.NextChargeDate))))
        && ((__isset.availablePoints == other.__isset.availablePoints) && ((!__isset.availablePoints) || (global::System.Object.Equals(AvailablePoints, other.AvailablePoints))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.uploadLimitEnd)
        {
          hashcode = (hashcode * 397) + UploadLimitEnd.GetHashCode();
        }
        if(__isset.uploadLimitNextMonth)
        {
          hashcode = (hashcode * 397) + UploadLimitNextMonth.GetHashCode();
        }
        if(__isset.premiumServiceStatus)
        {
          hashcode = (hashcode * 397) + PremiumServiceStatus.GetHashCode();
        }
        if((PremiumOrderNumber != null) && __isset.premiumOrderNumber)
        {
          hashcode = (hashcode * 397) + PremiumOrderNumber.GetHashCode();
        }
        if((PremiumCommerceService != null) && __isset.premiumCommerceService)
        {
          hashcode = (hashcode * 397) + PremiumCommerceService.GetHashCode();
        }
        if(__isset.premiumServiceStart)
        {
          hashcode = (hashcode * 397) + PremiumServiceStart.GetHashCode();
        }
        if((PremiumServiceSKU != null) && __isset.premiumServiceSKU)
        {
          hashcode = (hashcode * 397) + PremiumServiceSKU.GetHashCode();
        }
        if(__isset.lastSuccessfulCharge)
        {
          hashcode = (hashcode * 397) + LastSuccessfulCharge.GetHashCode();
        }
        if(__isset.lastFailedCharge)
        {
          hashcode = (hashcode * 397) + LastFailedCharge.GetHashCode();
        }
        if((LastFailedChargeReason != null) && __isset.lastFailedChargeReason)
        {
          hashcode = (hashcode * 397) + LastFailedChargeReason.GetHashCode();
        }
        if(__isset.nextPaymentDue)
        {
          hashcode = (hashcode * 397) + NextPaymentDue.GetHashCode();
        }
        if(__isset.premiumLockUntil)
        {
          hashcode = (hashcode * 397) + PremiumLockUntil.GetHashCode();
        }
        if(__isset.updated)
        {
          hashcode = (hashcode * 397) + Updated.GetHashCode();
        }
        if((PremiumSubscriptionNumber != null) && __isset.premiumSubscriptionNumber)
        {
          hashcode = (hashcode * 397) + PremiumSubscriptionNumber.GetHashCode();
        }
        if(__isset.lastRequestedCharge)
        {
          hashcode = (hashcode * 397) + LastRequestedCharge.GetHashCode();
        }
        if((Currency != null) && __isset.currency)
        {
          hashcode = (hashcode * 397) + Currency.GetHashCode();
        }
        if(__isset.unitPrice)
        {
          hashcode = (hashcode * 397) + UnitPrice.GetHashCode();
        }
        if(__isset.businessId)
        {
          hashcode = (hashcode * 397) + BusinessId.GetHashCode();
        }
        if((BusinessName != null) && __isset.businessName)
        {
          hashcode = (hashcode * 397) + BusinessName.GetHashCode();
        }
        if(__isset.businessRole)
        {
          hashcode = (hashcode * 397) + BusinessRole.GetHashCode();
        }
        if(__isset.unitDiscount)
        {
          hashcode = (hashcode * 397) + UnitDiscount.GetHashCode();
        }
        if(__isset.nextChargeDate)
        {
          hashcode = (hashcode * 397) + NextChargeDate.GetHashCode();
        }
        if(__isset.availablePoints)
        {
          hashcode = (hashcode * 397) + AvailablePoints.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp26 = new StringBuilder("Accounting(");
      int tmp27 = 0;
      if(__isset.uploadLimitEnd)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("UploadLimitEnd: ");
        UploadLimitEnd.ToString(tmp26);
      }
      if(__isset.uploadLimitNextMonth)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("UploadLimitNextMonth: ");
        UploadLimitNextMonth.ToString(tmp26);
      }
      if(__isset.premiumServiceStatus)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumServiceStatus: ");
        PremiumServiceStatus.ToString(tmp26);
      }
      if((PremiumOrderNumber != null) && __isset.premiumOrderNumber)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumOrderNumber: ");
        PremiumOrderNumber.ToString(tmp26);
      }
      if((PremiumCommerceService != null) && __isset.premiumCommerceService)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumCommerceService: ");
        PremiumCommerceService.ToString(tmp26);
      }
      if(__isset.premiumServiceStart)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumServiceStart: ");
        PremiumServiceStart.ToString(tmp26);
      }
      if((PremiumServiceSKU != null) && __isset.premiumServiceSKU)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumServiceSKU: ");
        PremiumServiceSKU.ToString(tmp26);
      }
      if(__isset.lastSuccessfulCharge)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("LastSuccessfulCharge: ");
        LastSuccessfulCharge.ToString(tmp26);
      }
      if(__isset.lastFailedCharge)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("LastFailedCharge: ");
        LastFailedCharge.ToString(tmp26);
      }
      if((LastFailedChargeReason != null) && __isset.lastFailedChargeReason)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("LastFailedChargeReason: ");
        LastFailedChargeReason.ToString(tmp26);
      }
      if(__isset.nextPaymentDue)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("NextPaymentDue: ");
        NextPaymentDue.ToString(tmp26);
      }
      if(__isset.premiumLockUntil)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumLockUntil: ");
        PremiumLockUntil.ToString(tmp26);
      }
      if(__isset.updated)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("Updated: ");
        Updated.ToString(tmp26);
      }
      if((PremiumSubscriptionNumber != null) && __isset.premiumSubscriptionNumber)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("PremiumSubscriptionNumber: ");
        PremiumSubscriptionNumber.ToString(tmp26);
      }
      if(__isset.lastRequestedCharge)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("LastRequestedCharge: ");
        LastRequestedCharge.ToString(tmp26);
      }
      if((Currency != null) && __isset.currency)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("Currency: ");
        Currency.ToString(tmp26);
      }
      if(__isset.unitPrice)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("UnitPrice: ");
        UnitPrice.ToString(tmp26);
      }
      if(__isset.businessId)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("BusinessId: ");
        BusinessId.ToString(tmp26);
      }
      if((BusinessName != null) && __isset.businessName)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("BusinessName: ");
        BusinessName.ToString(tmp26);
      }
      if(__isset.businessRole)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("BusinessRole: ");
        BusinessRole.ToString(tmp26);
      }
      if(__isset.unitDiscount)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("UnitDiscount: ");
        UnitDiscount.ToString(tmp26);
      }
      if(__isset.nextChargeDate)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("NextChargeDate: ");
        NextChargeDate.ToString(tmp26);
      }
      if(__isset.availablePoints)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("AvailablePoints: ");
        AvailablePoints.ToString(tmp26);
      }
      tmp26.Append(')');
      return tmp26.ToString();
    }
  }

}

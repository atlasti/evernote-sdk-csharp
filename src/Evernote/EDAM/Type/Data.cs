/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  In several places, EDAM exchanges blocks of bytes of data for a component
  ///  which may be relatively large.  For example:  the contents of a clipped
  ///  HTML note, the bytes of an embedded image, or the recognition XML for
  ///  a large image.  This structure is used in the protocol to represent
  ///  any of those large blocks of data when they are transmitted or when
  ///  they are only referenced their metadata.
  /// 
  /// <dl>
  ///  <dt>bodyHash</dt>
  ///    <dd>This field carries a one-way hash of the contents of the
  ///    data body, in binary form.  The hash function is MD5<br/>
  ///    Length:  EDAM_HASH_LEN (exactly)
  ///    </dd>
  /// 
  ///  <dt>size</dt>
  ///    <dd>The length, in bytes, of the data body.
  ///    </dd>
  /// 
  ///  <dt>body</dt>
  ///    <dd>This field is set to contain the binary contents of the data
  ///    whenever the resource is being transferred.  If only metadata is
  ///    being exchanged, this field will be empty.  For example, a client could
  ///    notify the service about the change to an attribute for a resource
  ///    without transmitting the binary resource contents.
  ///    </dd>
  ///  </dl>
  /// </summary>
  public partial class Data : TBase
  {
    private byte[] _bodyHash;
    private int _size;
    private byte[] _body;

    public byte[] BodyHash
    {
      get
      {
        return _bodyHash;
      }
      set
      {
        __isset.bodyHash = true;
        this._bodyHash = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public byte[] Body
    {
      get
      {
        return _body;
      }
      set
      {
        __isset.body = true;
        this._body = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool bodyHash;
      public bool size;
      public bool body;
    }

    public Data()
    {
    }

    public Data DeepCopy()
    {
      var tmp0 = new Data();
      if((BodyHash != null) && __isset.bodyHash)
      {
        tmp0.BodyHash = this.BodyHash.ToArray();
      }
      tmp0.__isset.bodyHash = this.__isset.bodyHash;
      if(__isset.size)
      {
        tmp0.Size = this.Size;
      }
      tmp0.__isset.size = this.__isset.size;
      if((Body != null) && __isset.body)
      {
        tmp0.Body = this.Body.ToArray();
      }
      tmp0.__isset.body = this.__isset.body;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                BodyHash = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Size = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Body = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("Data");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if((BodyHash != null) && __isset.bodyHash)
        {
          tmp2.Name = "bodyHash";
          tmp2.Type = TType.String;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteBinaryAsync(BodyHash, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.size)
        {
          tmp2.Name = "size";
          tmp2.Type = TType.I32;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Size, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Body != null) && __isset.body)
        {
          tmp2.Name = "body";
          tmp2.Type = TType.String;
          tmp2.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteBinaryAsync(Body, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Data other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.bodyHash == other.__isset.bodyHash) && ((!__isset.bodyHash) || (TCollections.Equals(BodyHash, other.BodyHash))))
        && ((__isset.size == other.__isset.size) && ((!__isset.size) || (global::System.Object.Equals(Size, other.Size))))
        && ((__isset.body == other.__isset.body) && ((!__isset.body) || (TCollections.Equals(Body, other.Body))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((BodyHash != null) && __isset.bodyHash)
        {
          hashcode = (hashcode * 397) + BodyHash.GetHashCode();
        }
        if(__isset.size)
        {
          hashcode = (hashcode * 397) + Size.GetHashCode();
        }
        if((Body != null) && __isset.body)
        {
          hashcode = (hashcode * 397) + Body.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("Data(");
      int tmp4 = 0;
      if((BodyHash != null) && __isset.bodyHash)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("BodyHash: ");
        BodyHash.ToString(tmp3);
      }
      if(__isset.size)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Size: ");
        Size.ToString(tmp3);
      }
      if((Body != null) && __isset.body)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Body: ");
        Body.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}

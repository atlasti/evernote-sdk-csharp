/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure that describes a notebook or a user's relationship with
  /// a notebook. NotebookDescriptor is expected to remain a lighter-weight
  /// structure when compared to Notebook.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of the notebook.
  ///   </dd>
  /// 
  /// <dt>notebookDisplayName</dt>
  ///   <dd>A sequence of characters representing the name of the
  ///   notebook.
  ///   </dd>
  /// 
  /// <dt>contactName</dt>
  ///   <dd>The User.name value of the notebook's "contact".
  ///   </dd>
  /// 
  /// <dt>hasSharedNotebook</dt>
  ///   <dd>Whether a SharedNotebook record exists between the calling user and this
  ///   notebook.
  ///   </dd>
  /// 
  /// <dt>joinedUserCount</dt>
  ///   <dd>The number of users who have joined this notebook.
  ///   </dd>
  /// 
  /// </dl>
  /// </summary>
  public partial class NotebookDescriptor : TBase
  {
    private string _guid;
    private string _notebookDisplayName;
    private string _contactName;
    private bool _hasSharedNotebook;
    private int _joinedUserCount;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string NotebookDisplayName
    {
      get
      {
        return _notebookDisplayName;
      }
      set
      {
        __isset.notebookDisplayName = true;
        this._notebookDisplayName = value;
      }
    }

    public string ContactName
    {
      get
      {
        return _contactName;
      }
      set
      {
        __isset.contactName = true;
        this._contactName = value;
      }
    }

    public bool HasSharedNotebook
    {
      get
      {
        return _hasSharedNotebook;
      }
      set
      {
        __isset.hasSharedNotebook = true;
        this._hasSharedNotebook = value;
      }
    }

    public int JoinedUserCount
    {
      get
      {
        return _joinedUserCount;
      }
      set
      {
        __isset.joinedUserCount = true;
        this._joinedUserCount = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool notebookDisplayName;
      public bool contactName;
      public bool hasSharedNotebook;
      public bool joinedUserCount;
    }

    public NotebookDescriptor()
    {
    }

    public NotebookDescriptor DeepCopy()
    {
      var tmp191 = new NotebookDescriptor();
      if((Guid != null) && __isset.guid)
      {
        tmp191.Guid = this.Guid;
      }
      tmp191.__isset.guid = this.__isset.guid;
      if((NotebookDisplayName != null) && __isset.notebookDisplayName)
      {
        tmp191.NotebookDisplayName = this.NotebookDisplayName;
      }
      tmp191.__isset.notebookDisplayName = this.__isset.notebookDisplayName;
      if((ContactName != null) && __isset.contactName)
      {
        tmp191.ContactName = this.ContactName;
      }
      tmp191.__isset.contactName = this.__isset.contactName;
      if(__isset.hasSharedNotebook)
      {
        tmp191.HasSharedNotebook = this.HasSharedNotebook;
      }
      tmp191.__isset.hasSharedNotebook = this.__isset.hasSharedNotebook;
      if(__isset.joinedUserCount)
      {
        tmp191.JoinedUserCount = this.JoinedUserCount;
      }
      tmp191.__isset.joinedUserCount = this.__isset.joinedUserCount;
      return tmp191;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NotebookDisplayName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ContactName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                HasSharedNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                JoinedUserCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp192 = new TStruct("NotebookDescriptor");
        await oprot.WriteStructBeginAsync(tmp192, cancellationToken);
        var tmp193 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp193.Name = "guid";
          tmp193.Type = TType.String;
          tmp193.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NotebookDisplayName != null) && __isset.notebookDisplayName)
        {
          tmp193.Name = "notebookDisplayName";
          tmp193.Type = TType.String;
          tmp193.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
          await oprot.WriteStringAsync(NotebookDisplayName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ContactName != null) && __isset.contactName)
        {
          tmp193.Name = "contactName";
          tmp193.Type = TType.String;
          tmp193.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
          await oprot.WriteStringAsync(ContactName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hasSharedNotebook)
        {
          tmp193.Name = "hasSharedNotebook";
          tmp193.Type = TType.Bool;
          tmp193.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
          await oprot.WriteBoolAsync(HasSharedNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.joinedUserCount)
        {
          tmp193.Name = "joinedUserCount";
          tmp193.Type = TType.I32;
          tmp193.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
          await oprot.WriteI32Async(JoinedUserCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NotebookDescriptor other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.notebookDisplayName == other.__isset.notebookDisplayName) && ((!__isset.notebookDisplayName) || (global::System.Object.Equals(NotebookDisplayName, other.NotebookDisplayName))))
        && ((__isset.contactName == other.__isset.contactName) && ((!__isset.contactName) || (global::System.Object.Equals(ContactName, other.ContactName))))
        && ((__isset.hasSharedNotebook == other.__isset.hasSharedNotebook) && ((!__isset.hasSharedNotebook) || (global::System.Object.Equals(HasSharedNotebook, other.HasSharedNotebook))))
        && ((__isset.joinedUserCount == other.__isset.joinedUserCount) && ((!__isset.joinedUserCount) || (global::System.Object.Equals(JoinedUserCount, other.JoinedUserCount))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((NotebookDisplayName != null) && __isset.notebookDisplayName)
        {
          hashcode = (hashcode * 397) + NotebookDisplayName.GetHashCode();
        }
        if((ContactName != null) && __isset.contactName)
        {
          hashcode = (hashcode * 397) + ContactName.GetHashCode();
        }
        if(__isset.hasSharedNotebook)
        {
          hashcode = (hashcode * 397) + HasSharedNotebook.GetHashCode();
        }
        if(__isset.joinedUserCount)
        {
          hashcode = (hashcode * 397) + JoinedUserCount.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp194 = new StringBuilder("NotebookDescriptor(");
      int tmp195 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp195++) { tmp194.Append(", "); }
        tmp194.Append("Guid: ");
        Guid.ToString(tmp194);
      }
      if((NotebookDisplayName != null) && __isset.notebookDisplayName)
      {
        if(0 < tmp195++) { tmp194.Append(", "); }
        tmp194.Append("NotebookDisplayName: ");
        NotebookDisplayName.ToString(tmp194);
      }
      if((ContactName != null) && __isset.contactName)
      {
        if(0 < tmp195++) { tmp194.Append(", "); }
        tmp194.Append("ContactName: ");
        ContactName.ToString(tmp194);
      }
      if(__isset.hasSharedNotebook)
      {
        if(0 < tmp195++) { tmp194.Append(", "); }
        tmp194.Append("HasSharedNotebook: ");
        HasSharedNotebook.ToString(tmp194);
      }
      if(__isset.joinedUserCount)
      {
        if(0 < tmp195++) { tmp194.Append(", "); }
        tmp194.Append("JoinedUserCount: ");
        JoinedUserCount.ToString(tmp194);
      }
      tmp194.Append(')');
      return tmp194.ToString();
    }
  }

}

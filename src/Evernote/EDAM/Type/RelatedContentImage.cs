/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// An external image that can be shown with a related content snippet,
  /// usually either a JPEG or PNG image. It is up to the client which image(s) are shown,
  /// depending on available screen real estate, resolution and aspect ratio.
  /// 
  /// <dl>
  ///  <dt>url</dt>
  ///    <dd>The external URL of the image</dd>
  ///  <dt>width</dt>
  ///    <dd>The width of the image, in pixels.</dd>
  ///  <dt>height</dt>
  ///    <dd>The height of the image, in pixels.</dd>
  ///  <dt>pixelRatio</dt>
  ///    <dd>the pixel ratio (usually either 1.0, 1.5 or 2.0)</dd>
  ///  <dt>fileSize</dt>
  ///    <dd>the size of the image file, in bytes</dd>
  /// </dl>
  /// </summary>
  public partial class RelatedContentImage : TBase
  {
    private string _url;
    private int _width;
    private int _height;
    private double _pixelRatio;
    private int _fileSize;

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public int Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public double PixelRatio
    {
      get
      {
        return _pixelRatio;
      }
      set
      {
        __isset.pixelRatio = true;
        this._pixelRatio = value;
      }
    }

    public int FileSize
    {
      get
      {
        return _fileSize;
      }
      set
      {
        __isset.fileSize = true;
        this._fileSize = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool url;
      public bool width;
      public bool height;
      public bool pixelRatio;
      public bool fileSize;
    }

    public RelatedContentImage()
    {
    }

    public RelatedContentImage DeepCopy()
    {
      var tmp201 = new RelatedContentImage();
      if((Url != null) && __isset.url)
      {
        tmp201.Url = this.Url;
      }
      tmp201.__isset.url = this.__isset.url;
      if(__isset.width)
      {
        tmp201.Width = this.Width;
      }
      tmp201.__isset.width = this.__isset.width;
      if(__isset.height)
      {
        tmp201.Height = this.Height;
      }
      tmp201.__isset.height = this.__isset.height;
      if(__isset.pixelRatio)
      {
        tmp201.PixelRatio = this.PixelRatio;
      }
      tmp201.__isset.pixelRatio = this.__isset.pixelRatio;
      if(__isset.fileSize)
      {
        tmp201.FileSize = this.FileSize;
      }
      tmp201.__isset.fileSize = this.__isset.fileSize;
      return tmp201;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Url = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Width = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Height = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                PixelRatio = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                FileSize = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp202 = new TStruct("RelatedContentImage");
        await oprot.WriteStructBeginAsync(tmp202, cancellationToken);
        var tmp203 = new TField();
        if((Url != null) && __isset.url)
        {
          tmp203.Name = "url";
          tmp203.Type = TType.String;
          tmp203.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteStringAsync(Url, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.width)
        {
          tmp203.Name = "width";
          tmp203.Type = TType.I32;
          tmp203.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteI32Async(Width, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.height)
        {
          tmp203.Name = "height";
          tmp203.Type = TType.I32;
          tmp203.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteI32Async(Height, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.pixelRatio)
        {
          tmp203.Name = "pixelRatio";
          tmp203.Type = TType.Double;
          tmp203.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteDoubleAsync(PixelRatio, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.fileSize)
        {
          tmp203.Name = "fileSize";
          tmp203.Type = TType.I32;
          tmp203.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp203, cancellationToken);
          await oprot.WriteI32Async(FileSize, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RelatedContentImage other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.url == other.__isset.url) && ((!__isset.url) || (global::System.Object.Equals(Url, other.Url))))
        && ((__isset.width == other.__isset.width) && ((!__isset.width) || (global::System.Object.Equals(Width, other.Width))))
        && ((__isset.height == other.__isset.height) && ((!__isset.height) || (global::System.Object.Equals(Height, other.Height))))
        && ((__isset.pixelRatio == other.__isset.pixelRatio) && ((!__isset.pixelRatio) || (global::System.Object.Equals(PixelRatio, other.PixelRatio))))
        && ((__isset.fileSize == other.__isset.fileSize) && ((!__isset.fileSize) || (global::System.Object.Equals(FileSize, other.FileSize))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Url != null) && __isset.url)
        {
          hashcode = (hashcode * 397) + Url.GetHashCode();
        }
        if(__isset.width)
        {
          hashcode = (hashcode * 397) + Width.GetHashCode();
        }
        if(__isset.height)
        {
          hashcode = (hashcode * 397) + Height.GetHashCode();
        }
        if(__isset.pixelRatio)
        {
          hashcode = (hashcode * 397) + PixelRatio.GetHashCode();
        }
        if(__isset.fileSize)
        {
          hashcode = (hashcode * 397) + FileSize.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp204 = new StringBuilder("RelatedContentImage(");
      int tmp205 = 0;
      if((Url != null) && __isset.url)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("Url: ");
        Url.ToString(tmp204);
      }
      if(__isset.width)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("Width: ");
        Width.ToString(tmp204);
      }
      if(__isset.height)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("Height: ");
        Height.ToString(tmp204);
      }
      if(__isset.pixelRatio)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("PixelRatio: ");
        PixelRatio.ToString(tmp204);
      }
      if(__isset.fileSize)
      {
        if(0 < tmp205++) { tmp204.Append(", "); }
        tmp204.Append("FileSize: ");
        FileSize.ToString(tmp204);
      }
      tmp204.Append(')');
      return tmp204.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// If a Notebook contained in an Evernote Business account has been published
  /// the to business library, the Notebook will have a reference to one of these
  /// structures, which specifies how the Notebook will be represented in the
  /// library.
  /// 
  /// <dl>
  /// <dt>notebookDescription</dt>
  ///   <dd>A short description of the notebook's content that will be displayed
  ///       in the business library user interface. The description may not begin
  ///       or end with whitespace.
  ///   <br/>
  ///   Length: EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN -
  ///           EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX
  ///   </dd>
  /// 
  /// <dt>privilege</dt>
  ///   <dd>The privileges that will be granted to users who join the notebook through
  ///       the business library.
  ///   </dd>
  /// 
  /// <dt>recommended</dt>
  ///   <dd>Whether the notebook should be "recommended" when displayed in the business
  ///       library user interface.
  ///   </dd>
  /// </dl>
  /// </summary>
  public partial class BusinessNotebook : TBase
  {
    private string _notebookDescription;
    private global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel _privilege;
    private bool _recommended;

    public string NotebookDescription
    {
      get
      {
        return _notebookDescription;
      }
      set
      {
        __isset.notebookDescription = true;
        this._notebookDescription = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public bool Recommended
    {
      get
      {
        return _recommended;
      }
      set
      {
        __isset.recommended = true;
        this._recommended = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool notebookDescription;
      public bool privilege;
      public bool recommended;
    }

    public BusinessNotebook()
    {
    }

    public BusinessNotebook DeepCopy()
    {
      var tmp133 = new BusinessNotebook();
      if((NotebookDescription != null) && __isset.notebookDescription)
      {
        tmp133.NotebookDescription = this.NotebookDescription;
      }
      tmp133.__isset.notebookDescription = this.__isset.notebookDescription;
      if(__isset.privilege)
      {
        tmp133.Privilege = this.Privilege;
      }
      tmp133.__isset.privilege = this.__isset.privilege;
      if(__isset.recommended)
      {
        tmp133.Recommended = this.Recommended;
      }
      tmp133.__isset.recommended = this.__isset.recommended;
      return tmp133;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                NotebookDescription = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Privilege = (global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Recommended = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp134 = new TStruct("BusinessNotebook");
        await oprot.WriteStructBeginAsync(tmp134, cancellationToken);
        var tmp135 = new TField();
        if((NotebookDescription != null) && __isset.notebookDescription)
        {
          tmp135.Name = "notebookDescription";
          tmp135.Type = TType.String;
          tmp135.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteStringAsync(NotebookDescription, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.privilege)
        {
          tmp135.Name = "privilege";
          tmp135.Type = TType.I32;
          tmp135.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteI32Async((int)Privilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recommended)
        {
          tmp135.Name = "recommended";
          tmp135.Type = TType.Bool;
          tmp135.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteBoolAsync(Recommended, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BusinessNotebook other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.notebookDescription == other.__isset.notebookDescription) && ((!__isset.notebookDescription) || (global::System.Object.Equals(NotebookDescription, other.NotebookDescription))))
        && ((__isset.privilege == other.__isset.privilege) && ((!__isset.privilege) || (global::System.Object.Equals(Privilege, other.Privilege))))
        && ((__isset.recommended == other.__isset.recommended) && ((!__isset.recommended) || (global::System.Object.Equals(Recommended, other.Recommended))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NotebookDescription != null) && __isset.notebookDescription)
        {
          hashcode = (hashcode * 397) + NotebookDescription.GetHashCode();
        }
        if(__isset.privilege)
        {
          hashcode = (hashcode * 397) + Privilege.GetHashCode();
        }
        if(__isset.recommended)
        {
          hashcode = (hashcode * 397) + Recommended.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp136 = new StringBuilder("BusinessNotebook(");
      int tmp137 = 0;
      if((NotebookDescription != null) && __isset.notebookDescription)
      {
        if(0 < tmp137++) { tmp136.Append(", "); }
        tmp136.Append("NotebookDescription: ");
        NotebookDescription.ToString(tmp136);
      }
      if(__isset.privilege)
      {
        if(0 < tmp137++) { tmp136.Append(", "); }
        tmp136.Append("Privilege: ");
        Privilege.ToString(tmp136);
      }
      if(__isset.recommended)
      {
        if(0 < tmp137++) { tmp136.Append(", "); }
        tmp136.Append("Recommended: ");
        Recommended.ToString(tmp136);
      }
      tmp136.Append(')');
      return tmp136.ToString();
    }
  }

}

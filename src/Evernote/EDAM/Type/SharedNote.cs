/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Represents a relationship between a note and a single share invitation recipient. The recipient
  /// is identified via an Identity, and has a given privilege that specifies what actions they may
  /// take on the note.
  /// 
  /// <dl>
  ///   <dt>sharerUserID</dt>
  ///   <dd>The user ID of the user who shared the note with the recipient.</dd>
  /// 
  ///   <dt>recipientIdentity</dt>
  ///   <dd>The identity of the recipient of the share. For a given note, there may be only one
  ///     SharedNote per recipient identity. Only recipientIdentity.id is guaranteed to be set.
  ///     Other fields on the Identity may or my not be set based on the requesting user's
  ///     relationship with the recipient.</dd>
  /// 
  ///   <dt>privilege</dt>
  ///   <dd>The privilege level that the share grants to the recipient.</dd>
  /// 
  ///   <dt>serviceCreated</dt>
  ///   <dd>The time at which the share was created.</dd>
  /// 
  ///   <dt>serviceUpdated</dt>
  ///   <dd>The time at which the share was last updated.</dd>
  /// 
  ///   <dt>serviceAssigned</dt>
  ///   <dd>The time at which the share was assigned to a specific recipient user ID.</dd>
  /// </dl>
  /// </summary>
  public partial class SharedNote : TBase
  {
    private int _sharerUserID;
    private global::Evernote.EDAM.Type.Identity _recipientIdentity;
    private global::Evernote.EDAM.Type.SharedNotePrivilegeLevel _privilege;
    private long _serviceCreated;
    private long _serviceUpdated;
    private long _serviceAssigned;

    public int SharerUserID
    {
      get
      {
        return _sharerUserID;
      }
      set
      {
        __isset.sharerUserID = true;
        this._sharerUserID = value;
      }
    }

    public global::Evernote.EDAM.Type.Identity RecipientIdentity
    {
      get
      {
        return _recipientIdentity;
      }
      set
      {
        __isset.recipientIdentity = true;
        this._recipientIdentity = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotePrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotePrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return _serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this._serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return _serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this._serviceUpdated = value;
      }
    }

    public long ServiceAssigned
    {
      get
      {
        return _serviceAssigned;
      }
      set
      {
        __isset.serviceAssigned = true;
        this._serviceAssigned = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sharerUserID;
      public bool recipientIdentity;
      public bool privilege;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool serviceAssigned;
    }

    public SharedNote()
    {
    }

    public SharedNote DeepCopy()
    {
      var tmp92 = new SharedNote();
      if(__isset.sharerUserID)
      {
        tmp92.SharerUserID = this.SharerUserID;
      }
      tmp92.__isset.sharerUserID = this.__isset.sharerUserID;
      if((RecipientIdentity != null) && __isset.recipientIdentity)
      {
        tmp92.RecipientIdentity = (global::Evernote.EDAM.Type.Identity)this.RecipientIdentity.DeepCopy();
      }
      tmp92.__isset.recipientIdentity = this.__isset.recipientIdentity;
      if(__isset.privilege)
      {
        tmp92.Privilege = this.Privilege;
      }
      tmp92.__isset.privilege = this.__isset.privilege;
      if(__isset.serviceCreated)
      {
        tmp92.ServiceCreated = this.ServiceCreated;
      }
      tmp92.__isset.serviceCreated = this.__isset.serviceCreated;
      if(__isset.serviceUpdated)
      {
        tmp92.ServiceUpdated = this.ServiceUpdated;
      }
      tmp92.__isset.serviceUpdated = this.__isset.serviceUpdated;
      if(__isset.serviceAssigned)
      {
        tmp92.ServiceAssigned = this.ServiceAssigned;
      }
      tmp92.__isset.serviceAssigned = this.__isset.serviceAssigned;
      return tmp92;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                SharerUserID = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                RecipientIdentity = new global::Evernote.EDAM.Type.Identity();
                await RecipientIdentity.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Privilege = (global::Evernote.EDAM.Type.SharedNotePrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                ServiceCreated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                ServiceUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                ServiceAssigned = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp93 = new TStruct("SharedNote");
        await oprot.WriteStructBeginAsync(tmp93, cancellationToken);
        var tmp94 = new TField();
        if(__isset.sharerUserID)
        {
          tmp94.Name = "sharerUserID";
          tmp94.Type = TType.I32;
          tmp94.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await oprot.WriteI32Async(SharerUserID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecipientIdentity != null) && __isset.recipientIdentity)
        {
          tmp94.Name = "recipientIdentity";
          tmp94.Type = TType.Struct;
          tmp94.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await RecipientIdentity.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.privilege)
        {
          tmp94.Name = "privilege";
          tmp94.Type = TType.I32;
          tmp94.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await oprot.WriteI32Async((int)Privilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceCreated)
        {
          tmp94.Name = "serviceCreated";
          tmp94.Type = TType.I64;
          tmp94.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await oprot.WriteI64Async(ServiceCreated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceUpdated)
        {
          tmp94.Name = "serviceUpdated";
          tmp94.Type = TType.I64;
          tmp94.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await oprot.WriteI64Async(ServiceUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceAssigned)
        {
          tmp94.Name = "serviceAssigned";
          tmp94.Type = TType.I64;
          tmp94.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
          await oprot.WriteI64Async(ServiceAssigned, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SharedNote other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.sharerUserID == other.__isset.sharerUserID) && ((!__isset.sharerUserID) || (global::System.Object.Equals(SharerUserID, other.SharerUserID))))
        && ((__isset.recipientIdentity == other.__isset.recipientIdentity) && ((!__isset.recipientIdentity) || (global::System.Object.Equals(RecipientIdentity, other.RecipientIdentity))))
        && ((__isset.privilege == other.__isset.privilege) && ((!__isset.privilege) || (global::System.Object.Equals(Privilege, other.Privilege))))
        && ((__isset.serviceCreated == other.__isset.serviceCreated) && ((!__isset.serviceCreated) || (global::System.Object.Equals(ServiceCreated, other.ServiceCreated))))
        && ((__isset.serviceUpdated == other.__isset.serviceUpdated) && ((!__isset.serviceUpdated) || (global::System.Object.Equals(ServiceUpdated, other.ServiceUpdated))))
        && ((__isset.serviceAssigned == other.__isset.serviceAssigned) && ((!__isset.serviceAssigned) || (global::System.Object.Equals(ServiceAssigned, other.ServiceAssigned))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.sharerUserID)
        {
          hashcode = (hashcode * 397) + SharerUserID.GetHashCode();
        }
        if((RecipientIdentity != null) && __isset.recipientIdentity)
        {
          hashcode = (hashcode * 397) + RecipientIdentity.GetHashCode();
        }
        if(__isset.privilege)
        {
          hashcode = (hashcode * 397) + Privilege.GetHashCode();
        }
        if(__isset.serviceCreated)
        {
          hashcode = (hashcode * 397) + ServiceCreated.GetHashCode();
        }
        if(__isset.serviceUpdated)
        {
          hashcode = (hashcode * 397) + ServiceUpdated.GetHashCode();
        }
        if(__isset.serviceAssigned)
        {
          hashcode = (hashcode * 397) + ServiceAssigned.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp95 = new StringBuilder("SharedNote(");
      int tmp96 = 0;
      if(__isset.sharerUserID)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("SharerUserID: ");
        SharerUserID.ToString(tmp95);
      }
      if((RecipientIdentity != null) && __isset.recipientIdentity)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("RecipientIdentity: ");
        RecipientIdentity.ToString(tmp95);
      }
      if(__isset.privilege)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("Privilege: ");
        Privilege.ToString(tmp95);
      }
      if(__isset.serviceCreated)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("ServiceCreated: ");
        ServiceCreated.ToString(tmp95);
      }
      if(__isset.serviceUpdated)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("ServiceUpdated: ");
        ServiceUpdated.ToString(tmp95);
      }
      if(__isset.serviceAssigned)
      {
        if(0 < tmp96++) { tmp95.Append(", "); }
        tmp95.Append("ServiceAssigned: ");
        ServiceAssigned.ToString(tmp95);
      }
      tmp95.Append(')');
      return tmp95.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A unique container for a set of notes.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this notebook.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>name</dt>
  ///   <dd>A sequence of characters representing the name of the
  ///   notebook.  May be changed by clients, but the account may not contain two
  ///   notebooks with names that are equal via a case-insensitive comparison.
  ///   Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_NOTEBOOK_NAME_REGEX
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>defaultNotebook</dt>
  ///   <dd>If true, this notebook should be used for new notes
  ///   whenever the user has not (or cannot) specify a desired target notebook.
  ///   For example, if a note is submitted via SMTP email.
  ///   The service will maintain at most one defaultNotebook per account.
  ///   If a second notebook is created or updated with defaultNotebook set to
  ///   true, the service will automatically update the prior notebook's
  ///   defaultNotebook field to false.  If the default notebook is deleted
  ///   (i.e. "active" set to false), the "defaultNotebook" field will be
  ///   set to false by the service.  If the account has no default notebook
  ///   set, the service will use the most recent notebook as the default.
  ///   </dd>
  /// 
  /// <dt>serviceCreated</dt>
  ///   <dd>The time when this notebook was created on the
  ///   service. This will be set on the service during creation, and the service
  ///   will provide this value when it returns a Notebook to a client.
  ///   The service will ignore this value if it is sent by clients.
  ///   </dd>
  /// 
  /// <dt>serviceUpdated</dt>
  ///   <dd>The time when this notebook was last modified on the
  ///   service.  This will be set on the service during creation, and the service
  ///   will provide this value when it returns a Notebook to a client.
  ///   The service will ignore this value if it is sent by clients.
  ///   </dd>
  /// 
  /// <dt>publishing</dt>
  ///   <dd>If the Notebook has been opened for public access, then this will point to the set of
  ///   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
  ///   published without providing this information, but it will persist for later use if publishing
  ///   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
  ///   of a Notebook should not set this value when calling NoteStore.updateNotebook().
  ///   Note that this structure is never populated for business notebooks, see the businessNotebook
  ///   field.
  ///   </dd>
  /// 
  /// <dt>published</dt>
  ///   <dd>If this is set to true, then the Notebook will be
  ///   accessible either to the public, or for business users to their business,
  ///   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
  ///   set to false, the Notebook will not be available to the public (or business).
  ///   Clients that do not wish to change the publishing behavior of a Notebook
  ///   should not set this value when calling NoteStore.updateNotebook().
  ///   </dd>
  /// 
  /// <dt>stack</dt>
  ///   <dd>If this is set, then the notebook is visually contained within a stack
  ///   of notebooks with this name.  All notebooks in the same account with the
  ///   same 'stack' field are considered to be in the same stack.
  ///   Notebooks with no stack set are "top level" and not contained within a
  ///   stack.
  ///   </dd>
  /// 
  /// <dt>sharedNotebookIds</dt>
  ///   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
  /// 
  /// <dt>sharedNotebooks</dt>
  ///   <dd>The list of recipients to whom this notebook has been shared
  ///   (one SharedNotebook object per recipient email address). This field will
  ///   be unset if you do not have permission to access this data. If you are
  ///   accessing the notebook as the owner or via a shared notebook that is
  ///   modifiable, then you have access to this data and the value will be set.
  ///   This field is read-only. Clients may not make changes to shared notebooks
  ///   via this field.
  ///   </dd>
  /// 
  /// <dt>businessNotebook</dt>
  ///   <dd>If the notebook is part of a business account and has been shared with the entire
  ///   business, this will contain sharing information. The presence or absence of this field
  ///   is not a reliable test of whether a given notebook is in fact a business notebook - the
  ///   field is only used when a notebook is or has been shared with the entire business.
  ///   </dd>
  /// 
  /// <dt>contact</dt>
  ///   <dd>Intended for use with Business accounts, this field identifies the user who
  ///   has been designated as the "contact".  For notebooks created in business
  ///   accounts, the server will automatically set this value to the user who created
  ///   the notebook unless Notebook.contact.username has been set, in which that value
  ///   will be used.  When updating a notebook, it is common to leave Notebook.contact
  ///   field unset, indicating that no change to the value is being requested and that
  ///   the existing value, if any, should be preserved.
  ///   </dd>
  /// 
  /// <dt>recipientSettings</dt>
  ///   <dd>This represents the preferences/settings that a recipient has set for this
  ///   notebook. These are intended to be changed only by the recipient, and each
  ///   recipient has their own recipient settings.
  ///   </dd>
  /// </dl>
  /// </summary>
  public partial class Notebook : TBase
  {
    private string _guid;
    private string _name;
    private int _updateSequenceNum;
    private bool _defaultNotebook;
    private long _serviceCreated;
    private long _serviceUpdated;
    private global::Evernote.EDAM.Type.Publishing _publishing;
    private bool _published;
    private string _stack;
    private List<long> _sharedNotebookIds;
    private List<global::Evernote.EDAM.Type.SharedNotebook> _sharedNotebooks;
    private global::Evernote.EDAM.Type.BusinessNotebook _businessNotebook;
    private global::Evernote.EDAM.Type.User _contact;
    private global::Evernote.EDAM.Type.NotebookRestrictions _restrictions;
    private global::Evernote.EDAM.Type.NotebookRecipientSettings _recipientSettings;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public bool DefaultNotebook
    {
      get
      {
        return _defaultNotebook;
      }
      set
      {
        __isset.defaultNotebook = true;
        this._defaultNotebook = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return _serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this._serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return _serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this._serviceUpdated = value;
      }
    }

    public global::Evernote.EDAM.Type.Publishing Publishing
    {
      get
      {
        return _publishing;
      }
      set
      {
        __isset.publishing = true;
        this._publishing = value;
      }
    }

    public bool Published
    {
      get
      {
        return _published;
      }
      set
      {
        __isset.published = true;
        this._published = value;
      }
    }

    public string Stack
    {
      get
      {
        return _stack;
      }
      set
      {
        __isset.stack = true;
        this._stack = value;
      }
    }

    public List<long> SharedNotebookIds
    {
      get
      {
        return _sharedNotebookIds;
      }
      set
      {
        __isset.sharedNotebookIds = true;
        this._sharedNotebookIds = value;
      }
    }

    public List<global::Evernote.EDAM.Type.SharedNotebook> SharedNotebooks
    {
      get
      {
        return _sharedNotebooks;
      }
      set
      {
        __isset.sharedNotebooks = true;
        this._sharedNotebooks = value;
      }
    }

    public global::Evernote.EDAM.Type.BusinessNotebook BusinessNotebook
    {
      get
      {
        return _businessNotebook;
      }
      set
      {
        __isset.businessNotebook = true;
        this._businessNotebook = value;
      }
    }

    public global::Evernote.EDAM.Type.User Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public global::Evernote.EDAM.Type.NotebookRestrictions Restrictions
    {
      get
      {
        return _restrictions;
      }
      set
      {
        __isset.restrictions = true;
        this._restrictions = value;
      }
    }

    public global::Evernote.EDAM.Type.NotebookRecipientSettings RecipientSettings
    {
      get
      {
        return _recipientSettings;
      }
      set
      {
        __isset.recipientSettings = true;
        this._recipientSettings = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool name;
      public bool updateSequenceNum;
      public bool defaultNotebook;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool publishing;
      public bool published;
      public bool stack;
      public bool sharedNotebookIds;
      public bool sharedNotebooks;
      public bool businessNotebook;
      public bool contact;
      public bool restrictions;
      public bool recipientSettings;
    }

    public Notebook()
    {
    }

    public Notebook DeepCopy()
    {
      var tmp173 = new Notebook();
      if((Guid != null) && __isset.guid)
      {
        tmp173.Guid = this.Guid;
      }
      tmp173.__isset.guid = this.__isset.guid;
      if((Name != null) && __isset.name)
      {
        tmp173.Name = this.Name;
      }
      tmp173.__isset.name = this.__isset.name;
      if(__isset.updateSequenceNum)
      {
        tmp173.UpdateSequenceNum = this.UpdateSequenceNum;
      }
      tmp173.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
      if(__isset.defaultNotebook)
      {
        tmp173.DefaultNotebook = this.DefaultNotebook;
      }
      tmp173.__isset.defaultNotebook = this.__isset.defaultNotebook;
      if(__isset.serviceCreated)
      {
        tmp173.ServiceCreated = this.ServiceCreated;
      }
      tmp173.__isset.serviceCreated = this.__isset.serviceCreated;
      if(__isset.serviceUpdated)
      {
        tmp173.ServiceUpdated = this.ServiceUpdated;
      }
      tmp173.__isset.serviceUpdated = this.__isset.serviceUpdated;
      if((Publishing != null) && __isset.publishing)
      {
        tmp173.Publishing = (global::Evernote.EDAM.Type.Publishing)this.Publishing.DeepCopy();
      }
      tmp173.__isset.publishing = this.__isset.publishing;
      if(__isset.published)
      {
        tmp173.Published = this.Published;
      }
      tmp173.__isset.published = this.__isset.published;
      if((Stack != null) && __isset.stack)
      {
        tmp173.Stack = this.Stack;
      }
      tmp173.__isset.stack = this.__isset.stack;
      if((SharedNotebookIds != null) && __isset.sharedNotebookIds)
      {
        tmp173.SharedNotebookIds = this.SharedNotebookIds.DeepCopy();
      }
      tmp173.__isset.sharedNotebookIds = this.__isset.sharedNotebookIds;
      if((SharedNotebooks != null) && __isset.sharedNotebooks)
      {
        tmp173.SharedNotebooks = this.SharedNotebooks.DeepCopy();
      }
      tmp173.__isset.sharedNotebooks = this.__isset.sharedNotebooks;
      if((BusinessNotebook != null) && __isset.businessNotebook)
      {
        tmp173.BusinessNotebook = (global::Evernote.EDAM.Type.BusinessNotebook)this.BusinessNotebook.DeepCopy();
      }
      tmp173.__isset.businessNotebook = this.__isset.businessNotebook;
      if((Contact != null) && __isset.contact)
      {
        tmp173.Contact = (global::Evernote.EDAM.Type.User)this.Contact.DeepCopy();
      }
      tmp173.__isset.contact = this.__isset.contact;
      if((Restrictions != null) && __isset.restrictions)
      {
        tmp173.Restrictions = (global::Evernote.EDAM.Type.NotebookRestrictions)this.Restrictions.DeepCopy();
      }
      tmp173.__isset.restrictions = this.__isset.restrictions;
      if((RecipientSettings != null) && __isset.recipientSettings)
      {
        tmp173.RecipientSettings = (global::Evernote.EDAM.Type.NotebookRecipientSettings)this.RecipientSettings.DeepCopy();
      }
      tmp173.__isset.recipientSettings = this.__isset.recipientSettings;
      return tmp173;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                DefaultNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                ServiceCreated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                ServiceUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                Publishing = new global::Evernote.EDAM.Type.Publishing();
                await Publishing.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Bool)
              {
                Published = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Stack = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.List)
              {
                {
                  TList _list174 = await iprot.ReadListBeginAsync(cancellationToken);
                  SharedNotebookIds = new List<long>(_list174.Count);
                  for(int _i175 = 0; _i175 < _list174.Count; ++_i175)
                  {
                    long _elem176;
                    _elem176 = await iprot.ReadI64Async(cancellationToken);
                    SharedNotebookIds.Add(_elem176);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.List)
              {
                {
                  TList _list177 = await iprot.ReadListBeginAsync(cancellationToken);
                  SharedNotebooks = new List<global::Evernote.EDAM.Type.SharedNotebook>(_list177.Count);
                  for(int _i178 = 0; _i178 < _list177.Count; ++_i178)
                  {
                    global::Evernote.EDAM.Type.SharedNotebook _elem179;
                    _elem179 = new global::Evernote.EDAM.Type.SharedNotebook();
                    await _elem179.ReadAsync(iprot, cancellationToken);
                    SharedNotebooks.Add(_elem179);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Struct)
              {
                BusinessNotebook = new global::Evernote.EDAM.Type.BusinessNotebook();
                await BusinessNotebook.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Struct)
              {
                Contact = new global::Evernote.EDAM.Type.User();
                await Contact.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Struct)
              {
                Restrictions = new global::Evernote.EDAM.Type.NotebookRestrictions();
                await Restrictions.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.Struct)
              {
                RecipientSettings = new global::Evernote.EDAM.Type.NotebookRecipientSettings();
                await RecipientSettings.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp180 = new TStruct("Notebook");
        await oprot.WriteStructBeginAsync(tmp180, cancellationToken);
        var tmp181 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp181.Name = "guid";
          tmp181.Type = TType.String;
          tmp181.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp181.Name = "name";
          tmp181.Type = TType.String;
          tmp181.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateSequenceNum)
        {
          tmp181.Name = "updateSequenceNum";
          tmp181.Type = TType.I32;
          tmp181.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.defaultNotebook)
        {
          tmp181.Name = "defaultNotebook";
          tmp181.Type = TType.Bool;
          tmp181.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteBoolAsync(DefaultNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceCreated)
        {
          tmp181.Name = "serviceCreated";
          tmp181.Type = TType.I64;
          tmp181.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteI64Async(ServiceCreated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceUpdated)
        {
          tmp181.Name = "serviceUpdated";
          tmp181.Type = TType.I64;
          tmp181.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteI64Async(ServiceUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Publishing != null) && __isset.publishing)
        {
          tmp181.Name = "publishing";
          tmp181.Type = TType.Struct;
          tmp181.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await Publishing.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.published)
        {
          tmp181.Name = "published";
          tmp181.Type = TType.Bool;
          tmp181.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteBoolAsync(Published, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Stack != null) && __isset.stack)
        {
          tmp181.Name = "stack";
          tmp181.Type = TType.String;
          tmp181.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await oprot.WriteStringAsync(Stack, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SharedNotebookIds != null) && __isset.sharedNotebookIds)
        {
          tmp181.Name = "sharedNotebookIds";
          tmp181.Type = TType.List;
          tmp181.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, SharedNotebookIds.Count), cancellationToken);
            foreach (long _iter182 in SharedNotebookIds)
            {
              await oprot.WriteI64Async(_iter182, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SharedNotebooks != null) && __isset.sharedNotebooks)
        {
          tmp181.Name = "sharedNotebooks";
          tmp181.Type = TType.List;
          tmp181.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, SharedNotebooks.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.SharedNotebook _iter183 in SharedNotebooks)
            {
              await _iter183.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BusinessNotebook != null) && __isset.businessNotebook)
        {
          tmp181.Name = "businessNotebook";
          tmp181.Type = TType.Struct;
          tmp181.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await BusinessNotebook.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Contact != null) && __isset.contact)
        {
          tmp181.Name = "contact";
          tmp181.Type = TType.Struct;
          tmp181.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await Contact.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Restrictions != null) && __isset.restrictions)
        {
          tmp181.Name = "restrictions";
          tmp181.Type = TType.Struct;
          tmp181.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await Restrictions.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecipientSettings != null) && __isset.recipientSettings)
        {
          tmp181.Name = "recipientSettings";
          tmp181.Type = TType.Struct;
          tmp181.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp181, cancellationToken);
          await RecipientSettings.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Notebook other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))))
        && ((__isset.defaultNotebook == other.__isset.defaultNotebook) && ((!__isset.defaultNotebook) || (global::System.Object.Equals(DefaultNotebook, other.DefaultNotebook))))
        && ((__isset.serviceCreated == other.__isset.serviceCreated) && ((!__isset.serviceCreated) || (global::System.Object.Equals(ServiceCreated, other.ServiceCreated))))
        && ((__isset.serviceUpdated == other.__isset.serviceUpdated) && ((!__isset.serviceUpdated) || (global::System.Object.Equals(ServiceUpdated, other.ServiceUpdated))))
        && ((__isset.publishing == other.__isset.publishing) && ((!__isset.publishing) || (global::System.Object.Equals(Publishing, other.Publishing))))
        && ((__isset.published == other.__isset.published) && ((!__isset.published) || (global::System.Object.Equals(Published, other.Published))))
        && ((__isset.stack == other.__isset.stack) && ((!__isset.stack) || (global::System.Object.Equals(Stack, other.Stack))))
        && ((__isset.sharedNotebookIds == other.__isset.sharedNotebookIds) && ((!__isset.sharedNotebookIds) || (TCollections.Equals(SharedNotebookIds, other.SharedNotebookIds))))
        && ((__isset.sharedNotebooks == other.__isset.sharedNotebooks) && ((!__isset.sharedNotebooks) || (TCollections.Equals(SharedNotebooks, other.SharedNotebooks))))
        && ((__isset.businessNotebook == other.__isset.businessNotebook) && ((!__isset.businessNotebook) || (global::System.Object.Equals(BusinessNotebook, other.BusinessNotebook))))
        && ((__isset.contact == other.__isset.contact) && ((!__isset.contact) || (global::System.Object.Equals(Contact, other.Contact))))
        && ((__isset.restrictions == other.__isset.restrictions) && ((!__isset.restrictions) || (global::System.Object.Equals(Restrictions, other.Restrictions))))
        && ((__isset.recipientSettings == other.__isset.recipientSettings) && ((!__isset.recipientSettings) || (global::System.Object.Equals(RecipientSettings, other.RecipientSettings))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.updateSequenceNum)
        {
          hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        }
        if(__isset.defaultNotebook)
        {
          hashcode = (hashcode * 397) + DefaultNotebook.GetHashCode();
        }
        if(__isset.serviceCreated)
        {
          hashcode = (hashcode * 397) + ServiceCreated.GetHashCode();
        }
        if(__isset.serviceUpdated)
        {
          hashcode = (hashcode * 397) + ServiceUpdated.GetHashCode();
        }
        if((Publishing != null) && __isset.publishing)
        {
          hashcode = (hashcode * 397) + Publishing.GetHashCode();
        }
        if(__isset.published)
        {
          hashcode = (hashcode * 397) + Published.GetHashCode();
        }
        if((Stack != null) && __isset.stack)
        {
          hashcode = (hashcode * 397) + Stack.GetHashCode();
        }
        if((SharedNotebookIds != null) && __isset.sharedNotebookIds)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(SharedNotebookIds);
        }
        if((SharedNotebooks != null) && __isset.sharedNotebooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(SharedNotebooks);
        }
        if((BusinessNotebook != null) && __isset.businessNotebook)
        {
          hashcode = (hashcode * 397) + BusinessNotebook.GetHashCode();
        }
        if((Contact != null) && __isset.contact)
        {
          hashcode = (hashcode * 397) + Contact.GetHashCode();
        }
        if((Restrictions != null) && __isset.restrictions)
        {
          hashcode = (hashcode * 397) + Restrictions.GetHashCode();
        }
        if((RecipientSettings != null) && __isset.recipientSettings)
        {
          hashcode = (hashcode * 397) + RecipientSettings.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp184 = new StringBuilder("Notebook(");
      int tmp185 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Guid: ");
        Guid.ToString(tmp184);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Name: ");
        Name.ToString(tmp184);
      }
      if(__isset.updateSequenceNum)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("UpdateSequenceNum: ");
        UpdateSequenceNum.ToString(tmp184);
      }
      if(__isset.defaultNotebook)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("DefaultNotebook: ");
        DefaultNotebook.ToString(tmp184);
      }
      if(__isset.serviceCreated)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("ServiceCreated: ");
        ServiceCreated.ToString(tmp184);
      }
      if(__isset.serviceUpdated)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("ServiceUpdated: ");
        ServiceUpdated.ToString(tmp184);
      }
      if((Publishing != null) && __isset.publishing)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Publishing: ");
        Publishing.ToString(tmp184);
      }
      if(__isset.published)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Published: ");
        Published.ToString(tmp184);
      }
      if((Stack != null) && __isset.stack)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Stack: ");
        Stack.ToString(tmp184);
      }
      if((SharedNotebookIds != null) && __isset.sharedNotebookIds)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("SharedNotebookIds: ");
        SharedNotebookIds.ToString(tmp184);
      }
      if((SharedNotebooks != null) && __isset.sharedNotebooks)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("SharedNotebooks: ");
        SharedNotebooks.ToString(tmp184);
      }
      if((BusinessNotebook != null) && __isset.businessNotebook)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("BusinessNotebook: ");
        BusinessNotebook.ToString(tmp184);
      }
      if((Contact != null) && __isset.contact)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Contact: ");
        Contact.ToString(tmp184);
      }
      if((Restrictions != null) && __isset.restrictions)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("Restrictions: ");
        Restrictions.ToString(tmp184);
      }
      if((RecipientSettings != null) && __isset.recipientSettings)
      {
        if(0 < tmp185++) { tmp184.Append(", "); }
        tmp184.Append("RecipientSettings: ");
        RecipientSettings.ToString(tmp184);
      }
      tmp184.Append(')');
      return tmp184.ToString();
    }
  }

}

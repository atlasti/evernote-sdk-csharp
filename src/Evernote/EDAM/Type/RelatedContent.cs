/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure identifying one snippet of related content (some information that is not
  /// part of an Evernote account but might still be relevant to the user).
  /// 
  /// <dl>
  /// 
  /// <dt>contentId</dt>
  /// <dd>An identifier that uniquely identifies the content.</dd>
  /// 
  /// <dt>title</dt>
  /// <dd>The main title to show.</dd>
  /// 
  /// <dt>url</dt>
  /// <dd>The URL the client can use to retrieve the content.</dd>
  /// 
  /// <dt>sourceId</dt>
  /// <dd>An identifier that uniquely identifies the source.</dd>
  /// 
  /// <dt>sourceUrl</dt>
  /// <dd>A URL the client can access to know more about the source.</dd>
  /// 
  /// <dt>sourceFaviconUrl</dt>
  /// <dd>The favicon URL of the source which the content belongs to.</dd>
  /// </dl>
  /// 
  /// <dt>sourceName</dt>
  /// <dd>A human-readable name of the source that provided this content.</dd>
  /// 
  /// <dt>date</dt>
  /// <dd>A timestamp telling the user about the recency of the content.</dd>
  /// 
  /// <dt>teaser</dt>
  /// <dd>A teaser text to show to the user; usually the first few sentences of the content,
  ///     excluding the title.</dd>
  /// 
  /// <dt>thumbnails</dt>
  /// <dd>A list of thumbnails the client can show in the snippet.</dd>
  /// 
  /// <dt>contentType</dt>
  /// <dd>The type of this related content.</dd>
  /// 
  /// <dt>accessType</dt>
  /// <dd>An indication of how this content can be accessed. This type influences the
  ///     semantics of the <code>url</code> parameter.</dd>
  /// 
  /// <dt>visibleUrl</dt>
  /// <dd>If set, the client should show this URL to the user, instead of the URL that was
  ///     used to retrieve the content. This URL should be used when opening the content
  ///     in an external browser window, or when sharing with another person.</dd>
  /// 
  /// <dt>clipUrl</dt>
  /// <dd>If set, the client should use this URL for clipping purposes, instead of the URL
  ///     that was used to retrieve the content. The clipUrl may directly point to an .enex
  ///     file, for example.</dd>
  /// 
  /// <dt>contact</dt>
  /// <dd>If set, the client may use this Contact for messaging purposes. This will typically
  ///     only be set for user profiles.</dd>
  /// 
  /// <dt>authors</dt>
  /// <dd>For News articles only. A list of names of the article authors, if available.</dd>
  /// 
  /// </dl>
  /// </summary>
  public partial class RelatedContent : TBase
  {
    private string _contentId;
    private string _title;
    private string _url;
    private string _sourceId;
    private string _sourceUrl;
    private string _sourceFaviconUrl;
    private string _sourceName;
    private long _date;
    private string _teaser;
    private List<global::Evernote.EDAM.Type.RelatedContentImage> _thumbnails;
    private global::Evernote.EDAM.Type.RelatedContentType _contentType;
    private global::Evernote.EDAM.Type.RelatedContentAccess _accessType;
    private string _visibleUrl;
    private string _clipUrl;
    private global::Evernote.EDAM.Type.Contact _contact;
    private List<string> _authors;

    public string ContentId
    {
      get
      {
        return _contentId;
      }
      set
      {
        __isset.contentId = true;
        this._contentId = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string SourceId
    {
      get
      {
        return _sourceId;
      }
      set
      {
        __isset.sourceId = true;
        this._sourceId = value;
      }
    }

    public string SourceUrl
    {
      get
      {
        return _sourceUrl;
      }
      set
      {
        __isset.sourceUrl = true;
        this._sourceUrl = value;
      }
    }

    public string SourceFaviconUrl
    {
      get
      {
        return _sourceFaviconUrl;
      }
      set
      {
        __isset.sourceFaviconUrl = true;
        this._sourceFaviconUrl = value;
      }
    }

    public string SourceName
    {
      get
      {
        return _sourceName;
      }
      set
      {
        __isset.sourceName = true;
        this._sourceName = value;
      }
    }

    public long Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    public string Teaser
    {
      get
      {
        return _teaser;
      }
      set
      {
        __isset.teaser = true;
        this._teaser = value;
      }
    }

    public List<global::Evernote.EDAM.Type.RelatedContentImage> Thumbnails
    {
      get
      {
        return _thumbnails;
      }
      set
      {
        __isset.thumbnails = true;
        this._thumbnails = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.RelatedContentType"/>
    /// </summary>
    public global::Evernote.EDAM.Type.RelatedContentType ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.RelatedContentAccess"/>
    /// </summary>
    public global::Evernote.EDAM.Type.RelatedContentAccess AccessType
    {
      get
      {
        return _accessType;
      }
      set
      {
        __isset.accessType = true;
        this._accessType = value;
      }
    }

    public string VisibleUrl
    {
      get
      {
        return _visibleUrl;
      }
      set
      {
        __isset.visibleUrl = true;
        this._visibleUrl = value;
      }
    }

    public string ClipUrl
    {
      get
      {
        return _clipUrl;
      }
      set
      {
        __isset.clipUrl = true;
        this._clipUrl = value;
      }
    }

    public global::Evernote.EDAM.Type.Contact Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public List<string> Authors
    {
      get
      {
        return _authors;
      }
      set
      {
        __isset.authors = true;
        this._authors = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool contentId;
      public bool title;
      public bool url;
      public bool sourceId;
      public bool sourceUrl;
      public bool sourceFaviconUrl;
      public bool sourceName;
      public bool date;
      public bool teaser;
      public bool thumbnails;
      public bool contentType;
      public bool accessType;
      public bool visibleUrl;
      public bool clipUrl;
      public bool contact;
      public bool authors;
    }

    public RelatedContent()
    {
    }

    public RelatedContent DeepCopy()
    {
      var tmp206 = new RelatedContent();
      if((ContentId != null) && __isset.contentId)
      {
        tmp206.ContentId = this.ContentId;
      }
      tmp206.__isset.contentId = this.__isset.contentId;
      if((Title != null) && __isset.title)
      {
        tmp206.Title = this.Title;
      }
      tmp206.__isset.title = this.__isset.title;
      if((Url != null) && __isset.url)
      {
        tmp206.Url = this.Url;
      }
      tmp206.__isset.url = this.__isset.url;
      if((SourceId != null) && __isset.sourceId)
      {
        tmp206.SourceId = this.SourceId;
      }
      tmp206.__isset.sourceId = this.__isset.sourceId;
      if((SourceUrl != null) && __isset.sourceUrl)
      {
        tmp206.SourceUrl = this.SourceUrl;
      }
      tmp206.__isset.sourceUrl = this.__isset.sourceUrl;
      if((SourceFaviconUrl != null) && __isset.sourceFaviconUrl)
      {
        tmp206.SourceFaviconUrl = this.SourceFaviconUrl;
      }
      tmp206.__isset.sourceFaviconUrl = this.__isset.sourceFaviconUrl;
      if((SourceName != null) && __isset.sourceName)
      {
        tmp206.SourceName = this.SourceName;
      }
      tmp206.__isset.sourceName = this.__isset.sourceName;
      if(__isset.date)
      {
        tmp206.Date = this.Date;
      }
      tmp206.__isset.date = this.__isset.date;
      if((Teaser != null) && __isset.teaser)
      {
        tmp206.Teaser = this.Teaser;
      }
      tmp206.__isset.teaser = this.__isset.teaser;
      if((Thumbnails != null) && __isset.thumbnails)
      {
        tmp206.Thumbnails = this.Thumbnails.DeepCopy();
      }
      tmp206.__isset.thumbnails = this.__isset.thumbnails;
      if(__isset.contentType)
      {
        tmp206.ContentType = this.ContentType;
      }
      tmp206.__isset.contentType = this.__isset.contentType;
      if(__isset.accessType)
      {
        tmp206.AccessType = this.AccessType;
      }
      tmp206.__isset.accessType = this.__isset.accessType;
      if((VisibleUrl != null) && __isset.visibleUrl)
      {
        tmp206.VisibleUrl = this.VisibleUrl;
      }
      tmp206.__isset.visibleUrl = this.__isset.visibleUrl;
      if((ClipUrl != null) && __isset.clipUrl)
      {
        tmp206.ClipUrl = this.ClipUrl;
      }
      tmp206.__isset.clipUrl = this.__isset.clipUrl;
      if((Contact != null) && __isset.contact)
      {
        tmp206.Contact = (global::Evernote.EDAM.Type.Contact)this.Contact.DeepCopy();
      }
      tmp206.__isset.contact = this.__isset.contact;
      if((Authors != null) && __isset.authors)
      {
        tmp206.Authors = this.Authors.DeepCopy();
      }
      tmp206.__isset.authors = this.__isset.authors;
      return tmp206;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ContentId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Url = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                SourceId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                SourceUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                SourceFaviconUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                SourceName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                Date = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Teaser = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.List)
              {
                {
                  TList _list207 = await iprot.ReadListBeginAsync(cancellationToken);
                  Thumbnails = new List<global::Evernote.EDAM.Type.RelatedContentImage>(_list207.Count);
                  for(int _i208 = 0; _i208 < _list207.Count; ++_i208)
                  {
                    global::Evernote.EDAM.Type.RelatedContentImage _elem209;
                    _elem209 = new global::Evernote.EDAM.Type.RelatedContentImage();
                    await _elem209.ReadAsync(iprot, cancellationToken);
                    Thumbnails.Add(_elem209);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I32)
              {
                ContentType = (global::Evernote.EDAM.Type.RelatedContentType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I32)
              {
                AccessType = (global::Evernote.EDAM.Type.RelatedContentAccess)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                VisibleUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                ClipUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Struct)
              {
                Contact = new global::Evernote.EDAM.Type.Contact();
                await Contact.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.List)
              {
                {
                  TList _list210 = await iprot.ReadListBeginAsync(cancellationToken);
                  Authors = new List<string>(_list210.Count);
                  for(int _i211 = 0; _i211 < _list210.Count; ++_i211)
                  {
                    string _elem212;
                    _elem212 = await iprot.ReadStringAsync(cancellationToken);
                    Authors.Add(_elem212);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp213 = new TStruct("RelatedContent");
        await oprot.WriteStructBeginAsync(tmp213, cancellationToken);
        var tmp214 = new TField();
        if((ContentId != null) && __isset.contentId)
        {
          tmp214.Name = "contentId";
          tmp214.Type = TType.String;
          tmp214.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(ContentId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Title != null) && __isset.title)
        {
          tmp214.Name = "title";
          tmp214.Type = TType.String;
          tmp214.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Url != null) && __isset.url)
        {
          tmp214.Name = "url";
          tmp214.Type = TType.String;
          tmp214.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(Url, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceId != null) && __isset.sourceId)
        {
          tmp214.Name = "sourceId";
          tmp214.Type = TType.String;
          tmp214.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(SourceId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceUrl != null) && __isset.sourceUrl)
        {
          tmp214.Name = "sourceUrl";
          tmp214.Type = TType.String;
          tmp214.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(SourceUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceFaviconUrl != null) && __isset.sourceFaviconUrl)
        {
          tmp214.Name = "sourceFaviconUrl";
          tmp214.Type = TType.String;
          tmp214.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(SourceFaviconUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceName != null) && __isset.sourceName)
        {
          tmp214.Name = "sourceName";
          tmp214.Type = TType.String;
          tmp214.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(SourceName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.date)
        {
          tmp214.Name = "date";
          tmp214.Type = TType.I64;
          tmp214.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteI64Async(Date, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Teaser != null) && __isset.teaser)
        {
          tmp214.Name = "teaser";
          tmp214.Type = TType.String;
          tmp214.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(Teaser, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Thumbnails != null) && __isset.thumbnails)
        {
          tmp214.Name = "thumbnails";
          tmp214.Type = TType.List;
          tmp214.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Thumbnails.Count), cancellationToken);
            foreach (global::Evernote.EDAM.Type.RelatedContentImage _iter215 in Thumbnails)
            {
              await _iter215.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.contentType)
        {
          tmp214.Name = "contentType";
          tmp214.Type = TType.I32;
          tmp214.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteI32Async((int)ContentType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.accessType)
        {
          tmp214.Name = "accessType";
          tmp214.Type = TType.I32;
          tmp214.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteI32Async((int)AccessType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((VisibleUrl != null) && __isset.visibleUrl)
        {
          tmp214.Name = "visibleUrl";
          tmp214.Type = TType.String;
          tmp214.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(VisibleUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ClipUrl != null) && __isset.clipUrl)
        {
          tmp214.Name = "clipUrl";
          tmp214.Type = TType.String;
          tmp214.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await oprot.WriteStringAsync(ClipUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Contact != null) && __isset.contact)
        {
          tmp214.Name = "contact";
          tmp214.Type = TType.Struct;
          tmp214.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          await Contact.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Authors != null) && __isset.authors)
        {
          tmp214.Name = "authors";
          tmp214.Type = TType.List;
          tmp214.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp214, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Authors.Count), cancellationToken);
            foreach (string _iter216 in Authors)
            {
              await oprot.WriteStringAsync(_iter216, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RelatedContent other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.contentId == other.__isset.contentId) && ((!__isset.contentId) || (global::System.Object.Equals(ContentId, other.ContentId))))
        && ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
        && ((__isset.url == other.__isset.url) && ((!__isset.url) || (global::System.Object.Equals(Url, other.Url))))
        && ((__isset.sourceId == other.__isset.sourceId) && ((!__isset.sourceId) || (global::System.Object.Equals(SourceId, other.SourceId))))
        && ((__isset.sourceUrl == other.__isset.sourceUrl) && ((!__isset.sourceUrl) || (global::System.Object.Equals(SourceUrl, other.SourceUrl))))
        && ((__isset.sourceFaviconUrl == other.__isset.sourceFaviconUrl) && ((!__isset.sourceFaviconUrl) || (global::System.Object.Equals(SourceFaviconUrl, other.SourceFaviconUrl))))
        && ((__isset.sourceName == other.__isset.sourceName) && ((!__isset.sourceName) || (global::System.Object.Equals(SourceName, other.SourceName))))
        && ((__isset.date == other.__isset.date) && ((!__isset.date) || (global::System.Object.Equals(Date, other.Date))))
        && ((__isset.teaser == other.__isset.teaser) && ((!__isset.teaser) || (global::System.Object.Equals(Teaser, other.Teaser))))
        && ((__isset.thumbnails == other.__isset.thumbnails) && ((!__isset.thumbnails) || (TCollections.Equals(Thumbnails, other.Thumbnails))))
        && ((__isset.contentType == other.__isset.contentType) && ((!__isset.contentType) || (global::System.Object.Equals(ContentType, other.ContentType))))
        && ((__isset.accessType == other.__isset.accessType) && ((!__isset.accessType) || (global::System.Object.Equals(AccessType, other.AccessType))))
        && ((__isset.visibleUrl == other.__isset.visibleUrl) && ((!__isset.visibleUrl) || (global::System.Object.Equals(VisibleUrl, other.VisibleUrl))))
        && ((__isset.clipUrl == other.__isset.clipUrl) && ((!__isset.clipUrl) || (global::System.Object.Equals(ClipUrl, other.ClipUrl))))
        && ((__isset.contact == other.__isset.contact) && ((!__isset.contact) || (global::System.Object.Equals(Contact, other.Contact))))
        && ((__isset.authors == other.__isset.authors) && ((!__isset.authors) || (TCollections.Equals(Authors, other.Authors))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ContentId != null) && __isset.contentId)
        {
          hashcode = (hashcode * 397) + ContentId.GetHashCode();
        }
        if((Title != null) && __isset.title)
        {
          hashcode = (hashcode * 397) + Title.GetHashCode();
        }
        if((Url != null) && __isset.url)
        {
          hashcode = (hashcode * 397) + Url.GetHashCode();
        }
        if((SourceId != null) && __isset.sourceId)
        {
          hashcode = (hashcode * 397) + SourceId.GetHashCode();
        }
        if((SourceUrl != null) && __isset.sourceUrl)
        {
          hashcode = (hashcode * 397) + SourceUrl.GetHashCode();
        }
        if((SourceFaviconUrl != null) && __isset.sourceFaviconUrl)
        {
          hashcode = (hashcode * 397) + SourceFaviconUrl.GetHashCode();
        }
        if((SourceName != null) && __isset.sourceName)
        {
          hashcode = (hashcode * 397) + SourceName.GetHashCode();
        }
        if(__isset.date)
        {
          hashcode = (hashcode * 397) + Date.GetHashCode();
        }
        if((Teaser != null) && __isset.teaser)
        {
          hashcode = (hashcode * 397) + Teaser.GetHashCode();
        }
        if((Thumbnails != null) && __isset.thumbnails)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Thumbnails);
        }
        if(__isset.contentType)
        {
          hashcode = (hashcode * 397) + ContentType.GetHashCode();
        }
        if(__isset.accessType)
        {
          hashcode = (hashcode * 397) + AccessType.GetHashCode();
        }
        if((VisibleUrl != null) && __isset.visibleUrl)
        {
          hashcode = (hashcode * 397) + VisibleUrl.GetHashCode();
        }
        if((ClipUrl != null) && __isset.clipUrl)
        {
          hashcode = (hashcode * 397) + ClipUrl.GetHashCode();
        }
        if((Contact != null) && __isset.contact)
        {
          hashcode = (hashcode * 397) + Contact.GetHashCode();
        }
        if((Authors != null) && __isset.authors)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Authors);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp217 = new StringBuilder("RelatedContent(");
      int tmp218 = 0;
      if((ContentId != null) && __isset.contentId)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("ContentId: ");
        ContentId.ToString(tmp217);
      }
      if((Title != null) && __isset.title)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Title: ");
        Title.ToString(tmp217);
      }
      if((Url != null) && __isset.url)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Url: ");
        Url.ToString(tmp217);
      }
      if((SourceId != null) && __isset.sourceId)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("SourceId: ");
        SourceId.ToString(tmp217);
      }
      if((SourceUrl != null) && __isset.sourceUrl)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("SourceUrl: ");
        SourceUrl.ToString(tmp217);
      }
      if((SourceFaviconUrl != null) && __isset.sourceFaviconUrl)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("SourceFaviconUrl: ");
        SourceFaviconUrl.ToString(tmp217);
      }
      if((SourceName != null) && __isset.sourceName)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("SourceName: ");
        SourceName.ToString(tmp217);
      }
      if(__isset.date)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Date: ");
        Date.ToString(tmp217);
      }
      if((Teaser != null) && __isset.teaser)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Teaser: ");
        Teaser.ToString(tmp217);
      }
      if((Thumbnails != null) && __isset.thumbnails)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Thumbnails: ");
        Thumbnails.ToString(tmp217);
      }
      if(__isset.contentType)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("ContentType: ");
        ContentType.ToString(tmp217);
      }
      if(__isset.accessType)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("AccessType: ");
        AccessType.ToString(tmp217);
      }
      if((VisibleUrl != null) && __isset.visibleUrl)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("VisibleUrl: ");
        VisibleUrl.ToString(tmp217);
      }
      if((ClipUrl != null) && __isset.clipUrl)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("ClipUrl: ");
        ClipUrl.ToString(tmp217);
      }
      if((Contact != null) && __isset.contact)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Contact: ");
        Contact.ToString(tmp217);
      }
      if((Authors != null) && __isset.authors)
      {
        if(0 < tmp218++) { tmp217.Append(", "); }
        tmp217.Append("Authors: ");
        Authors.ToString(tmp217);
      }
      tmp217.Append(')');
      return tmp217.ToString();
    }
  }

}

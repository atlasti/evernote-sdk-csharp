/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Represents the owner's account related limits on a Note.
  /// The field uploaded represents the total number of bytes that have been uploaded
  /// to this account and is taken from the SyncState struct. All other fields
  /// represent account related limits and are taken from the AccountLimits struct.
  /// <p />
  /// See SyncState and AccountLimits struct field definitions for more details.
  /// </summary>
  public partial class NoteLimits : TBase
  {
    private int _noteResourceCountMax;
    private long _uploadLimit;
    private long _resourceSizeMax;
    private long _noteSizeMax;
    private long _uploaded;

    public int NoteResourceCountMax
    {
      get
      {
        return _noteResourceCountMax;
      }
      set
      {
        __isset.noteResourceCountMax = true;
        this._noteResourceCountMax = value;
      }
    }

    public long UploadLimit
    {
      get
      {
        return _uploadLimit;
      }
      set
      {
        __isset.uploadLimit = true;
        this._uploadLimit = value;
      }
    }

    public long ResourceSizeMax
    {
      get
      {
        return _resourceSizeMax;
      }
      set
      {
        __isset.resourceSizeMax = true;
        this._resourceSizeMax = value;
      }
    }

    public long NoteSizeMax
    {
      get
      {
        return _noteSizeMax;
      }
      set
      {
        __isset.noteSizeMax = true;
        this._noteSizeMax = value;
      }
    }

    public long Uploaded
    {
      get
      {
        return _uploaded;
      }
      set
      {
        __isset.uploaded = true;
        this._uploaded = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool noteResourceCountMax;
      public bool uploadLimit;
      public bool resourceSizeMax;
      public bool noteSizeMax;
      public bool uploaded;
    }

    public NoteLimits()
    {
    }

    public NoteLimits DeepCopy()
    {
      var tmp102 = new NoteLimits();
      if(__isset.noteResourceCountMax)
      {
        tmp102.NoteResourceCountMax = this.NoteResourceCountMax;
      }
      tmp102.__isset.noteResourceCountMax = this.__isset.noteResourceCountMax;
      if(__isset.uploadLimit)
      {
        tmp102.UploadLimit = this.UploadLimit;
      }
      tmp102.__isset.uploadLimit = this.__isset.uploadLimit;
      if(__isset.resourceSizeMax)
      {
        tmp102.ResourceSizeMax = this.ResourceSizeMax;
      }
      tmp102.__isset.resourceSizeMax = this.__isset.resourceSizeMax;
      if(__isset.noteSizeMax)
      {
        tmp102.NoteSizeMax = this.NoteSizeMax;
      }
      tmp102.__isset.noteSizeMax = this.__isset.noteSizeMax;
      if(__isset.uploaded)
      {
        tmp102.Uploaded = this.Uploaded;
      }
      tmp102.__isset.uploaded = this.__isset.uploaded;
      return tmp102;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                NoteResourceCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                UploadLimit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                ResourceSizeMax = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                NoteSizeMax = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Uploaded = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp103 = new TStruct("NoteLimits");
        await oprot.WriteStructBeginAsync(tmp103, cancellationToken);
        var tmp104 = new TField();
        if(__isset.noteResourceCountMax)
        {
          tmp104.Name = "noteResourceCountMax";
          tmp104.Type = TType.I32;
          tmp104.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp104, cancellationToken);
          await oprot.WriteI32Async(NoteResourceCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uploadLimit)
        {
          tmp104.Name = "uploadLimit";
          tmp104.Type = TType.I64;
          tmp104.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp104, cancellationToken);
          await oprot.WriteI64Async(UploadLimit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.resourceSizeMax)
        {
          tmp104.Name = "resourceSizeMax";
          tmp104.Type = TType.I64;
          tmp104.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp104, cancellationToken);
          await oprot.WriteI64Async(ResourceSizeMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noteSizeMax)
        {
          tmp104.Name = "noteSizeMax";
          tmp104.Type = TType.I64;
          tmp104.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp104, cancellationToken);
          await oprot.WriteI64Async(NoteSizeMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uploaded)
        {
          tmp104.Name = "uploaded";
          tmp104.Type = TType.I64;
          tmp104.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp104, cancellationToken);
          await oprot.WriteI64Async(Uploaded, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteLimits other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.noteResourceCountMax == other.__isset.noteResourceCountMax) && ((!__isset.noteResourceCountMax) || (global::System.Object.Equals(NoteResourceCountMax, other.NoteResourceCountMax))))
        && ((__isset.uploadLimit == other.__isset.uploadLimit) && ((!__isset.uploadLimit) || (global::System.Object.Equals(UploadLimit, other.UploadLimit))))
        && ((__isset.resourceSizeMax == other.__isset.resourceSizeMax) && ((!__isset.resourceSizeMax) || (global::System.Object.Equals(ResourceSizeMax, other.ResourceSizeMax))))
        && ((__isset.noteSizeMax == other.__isset.noteSizeMax) && ((!__isset.noteSizeMax) || (global::System.Object.Equals(NoteSizeMax, other.NoteSizeMax))))
        && ((__isset.uploaded == other.__isset.uploaded) && ((!__isset.uploaded) || (global::System.Object.Equals(Uploaded, other.Uploaded))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.noteResourceCountMax)
        {
          hashcode = (hashcode * 397) + NoteResourceCountMax.GetHashCode();
        }
        if(__isset.uploadLimit)
        {
          hashcode = (hashcode * 397) + UploadLimit.GetHashCode();
        }
        if(__isset.resourceSizeMax)
        {
          hashcode = (hashcode * 397) + ResourceSizeMax.GetHashCode();
        }
        if(__isset.noteSizeMax)
        {
          hashcode = (hashcode * 397) + NoteSizeMax.GetHashCode();
        }
        if(__isset.uploaded)
        {
          hashcode = (hashcode * 397) + Uploaded.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp105 = new StringBuilder("NoteLimits(");
      int tmp106 = 0;
      if(__isset.noteResourceCountMax)
      {
        if(0 < tmp106++) { tmp105.Append(", "); }
        tmp105.Append("NoteResourceCountMax: ");
        NoteResourceCountMax.ToString(tmp105);
      }
      if(__isset.uploadLimit)
      {
        if(0 < tmp106++) { tmp105.Append(", "); }
        tmp105.Append("UploadLimit: ");
        UploadLimit.ToString(tmp105);
      }
      if(__isset.resourceSizeMax)
      {
        if(0 < tmp106++) { tmp105.Append(", "); }
        tmp105.Append("ResourceSizeMax: ");
        ResourceSizeMax.ToString(tmp105);
      }
      if(__isset.noteSizeMax)
      {
        if(0 < tmp106++) { tmp105.Append(", "); }
        tmp105.Append("NoteSizeMax: ");
        NoteSizeMax.ToString(tmp105);
      }
      if(__isset.uploaded)
      {
        if(0 < tmp106++) { tmp105.Append(", "); }
        tmp105.Append("Uploaded: ");
        Uploaded.ToString(tmp105);
      }
      tmp105.Append(')');
      return tmp105.ToString();
    }
  }

}

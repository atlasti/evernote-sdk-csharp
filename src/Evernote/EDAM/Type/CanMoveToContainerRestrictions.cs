/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Specifies if the client can move a Notebook to a Workspace.
  /// </summary>
  public partial class CanMoveToContainerRestrictions : TBase
  {
    private global::Evernote.EDAM.Type.CanMoveToContainerStatus _canMoveToContainer;

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.CanMoveToContainerStatus"/>
    /// </summary>
    public global::Evernote.EDAM.Type.CanMoveToContainerStatus CanMoveToContainer
    {
      get
      {
        return _canMoveToContainer;
      }
      set
      {
        __isset.canMoveToContainer = true;
        this._canMoveToContainer = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool canMoveToContainer;
    }

    public CanMoveToContainerRestrictions()
    {
    }

    public CanMoveToContainerRestrictions DeepCopy()
    {
      var tmp163 = new CanMoveToContainerRestrictions();
      if(__isset.canMoveToContainer)
      {
        tmp163.CanMoveToContainer = this.CanMoveToContainer;
      }
      tmp163.__isset.canMoveToContainer = this.__isset.canMoveToContainer;
      return tmp163;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                CanMoveToContainer = (global::Evernote.EDAM.Type.CanMoveToContainerStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp164 = new TStruct("CanMoveToContainerRestrictions");
        await oprot.WriteStructBeginAsync(tmp164, cancellationToken);
        var tmp165 = new TField();
        if(__isset.canMoveToContainer)
        {
          tmp165.Name = "canMoveToContainer";
          tmp165.Type = TType.I32;
          tmp165.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp165, cancellationToken);
          await oprot.WriteI32Async((int)CanMoveToContainer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CanMoveToContainerRestrictions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.canMoveToContainer == other.__isset.canMoveToContainer) && ((!__isset.canMoveToContainer) || (global::System.Object.Equals(CanMoveToContainer, other.CanMoveToContainer))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.canMoveToContainer)
        {
          hashcode = (hashcode * 397) + CanMoveToContainer.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp166 = new StringBuilder("CanMoveToContainerRestrictions(");
      int tmp167 = 0;
      if(__isset.canMoveToContainer)
      {
        if(0 < tmp167++) { tmp166.Append(", "); }
        tmp166.Append("CanMoveToContainer: ");
        CanMoveToContainer.ToString(tmp166);
      }
      tmp166.Append(')');
      return tmp166.ToString();
    }
  }

}

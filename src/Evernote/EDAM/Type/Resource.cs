/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Every media file that is embedded or attached to a note is represented
  /// through a Resource entry.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this resource.  Will be set whenever
  ///   a resource is retrieved from the service, but may be null when a client
  ///   is creating a resource.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>noteGuid</dt>
  ///   <dd>The unique identifier of the Note that holds this
  ///   Resource. Will be set whenever the resource is retrieved from the service,
  ///   but may be null when a client is creating a resource.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>data</dt>
  ///   <dd>The contents of the resource.
  ///   Maximum length:  The data.body is limited to EDAM_RESOURCE_SIZE_MAX_FREE
  ///   for free accounts and EDAM_RESOURCE_SIZE_MAX_PREMIUM for premium accounts.
  ///   </dd>
  /// 
  /// <dt>mime</dt>
  ///   <dd>The MIME type for the embedded resource.  E.g. "image/gif"
  ///   <br/>
  ///   Length:  EDAM_MIME_LEN_MIN - EDAM_MIME_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_MIME_REGEX
  ///   </dd>
  /// 
  /// <dt>width</dt>
  ///   <dd>If set, this contains the display width of this resource, in
  ///   pixels.
  ///   </dd>
  /// 
  /// <dt>height</dt>
  ///   <dd>If set, this contains the display height of this resource,
  ///   in pixels.
  ///   </dd>
  /// 
  /// <dt>duration</dt>
  ///   <dd>DEPRECATED: ignored.
  ///   </dd>
  /// 
  /// <dt>active</dt>
  ///   <dd>If the resource is active or not.
  ///   </dd>
  /// 
  /// <dt>recognition</dt>
  ///   <dd>If set, this will hold the encoded data that provides
  ///   information on search and recognition within this resource.
  ///   </dd>
  /// 
  /// <dt>attributes</dt>
  ///   <dd>A list of the attributes for this resource.
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object. The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>alternateData</dt>
  ///   <dd>Some Resources may be assigned an alternate data format by the service
  ///   which may be more appropriate for indexing or rendering than the original
  ///   data provided by the user.  In these cases, the alternate data form will
  ///   be available via this Data element.  If a Resource has no alternate form,
  ///   this field will be unset.</dd>
  /// </dl>
  /// </summary>
  public partial class Resource : TBase
  {
    private string _guid;
    private string _noteGuid;
    private global::Evernote.EDAM.Type.Data _data;
    private string _mime;
    private short _width;
    private short _height;
    private short _duration;
    private bool _active;
    private global::Evernote.EDAM.Type.Data _recognition;
    private global::Evernote.EDAM.Type.ResourceAttributes _attributes;
    private int _updateSequenceNum;
    private global::Evernote.EDAM.Type.Data _alternateData;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string NoteGuid
    {
      get
      {
        return _noteGuid;
      }
      set
      {
        __isset.noteGuid = true;
        this._noteGuid = value;
      }
    }

    public global::Evernote.EDAM.Type.Data Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public string Mime
    {
      get
      {
        return _mime;
      }
      set
      {
        __isset.mime = true;
        this._mime = value;
      }
    }

    public short Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public short Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public short Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }

    public global::Evernote.EDAM.Type.Data Recognition
    {
      get
      {
        return _recognition;
      }
      set
      {
        __isset.recognition = true;
        this._recognition = value;
      }
    }

    public global::Evernote.EDAM.Type.ResourceAttributes Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public global::Evernote.EDAM.Type.Data AlternateData
    {
      get
      {
        return _alternateData;
      }
      set
      {
        __isset.alternateData = true;
        this._alternateData = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool noteGuid;
      public bool data;
      public bool mime;
      public bool width;
      public bool height;
      public bool duration;
      public bool active;
      public bool recognition;
      public bool attributes;
      public bool updateSequenceNum;
      public bool alternateData;
    }

    public Resource()
    {
    }

    public Resource DeepCopy()
    {
      var tmp77 = new Resource();
      if((Guid != null) && __isset.guid)
      {
        tmp77.Guid = this.Guid;
      }
      tmp77.__isset.guid = this.__isset.guid;
      if((NoteGuid != null) && __isset.noteGuid)
      {
        tmp77.NoteGuid = this.NoteGuid;
      }
      tmp77.__isset.noteGuid = this.__isset.noteGuid;
      if((Data != null) && __isset.data)
      {
        tmp77.Data = (global::Evernote.EDAM.Type.Data)this.Data.DeepCopy();
      }
      tmp77.__isset.data = this.__isset.data;
      if((Mime != null) && __isset.mime)
      {
        tmp77.Mime = this.Mime;
      }
      tmp77.__isset.mime = this.__isset.mime;
      if(__isset.width)
      {
        tmp77.Width = this.Width;
      }
      tmp77.__isset.width = this.__isset.width;
      if(__isset.height)
      {
        tmp77.Height = this.Height;
      }
      tmp77.__isset.height = this.__isset.height;
      if(__isset.duration)
      {
        tmp77.Duration = this.Duration;
      }
      tmp77.__isset.duration = this.__isset.duration;
      if(__isset.active)
      {
        tmp77.Active = this.Active;
      }
      tmp77.__isset.active = this.__isset.active;
      if((Recognition != null) && __isset.recognition)
      {
        tmp77.Recognition = (global::Evernote.EDAM.Type.Data)this.Recognition.DeepCopy();
      }
      tmp77.__isset.recognition = this.__isset.recognition;
      if((Attributes != null) && __isset.attributes)
      {
        tmp77.Attributes = (global::Evernote.EDAM.Type.ResourceAttributes)this.Attributes.DeepCopy();
      }
      tmp77.__isset.attributes = this.__isset.attributes;
      if(__isset.updateSequenceNum)
      {
        tmp77.UpdateSequenceNum = this.UpdateSequenceNum;
      }
      tmp77.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
      if((AlternateData != null) && __isset.alternateData)
      {
        tmp77.AlternateData = (global::Evernote.EDAM.Type.Data)this.AlternateData.DeepCopy();
      }
      tmp77.__isset.alternateData = this.__isset.alternateData;
      return tmp77;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NoteGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Data = new global::Evernote.EDAM.Type.Data();
                await Data.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Mime = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I16)
              {
                Width = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I16)
              {
                Height = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I16)
              {
                Duration = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                Active = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Struct)
              {
                Recognition = new global::Evernote.EDAM.Type.Data();
                await Recognition.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Struct)
              {
                Attributes = new global::Evernote.EDAM.Type.ResourceAttributes();
                await Attributes.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Struct)
              {
                AlternateData = new global::Evernote.EDAM.Type.Data();
                await AlternateData.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp78 = new TStruct("Resource");
        await oprot.WriteStructBeginAsync(tmp78, cancellationToken);
        var tmp79 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp79.Name = "guid";
          tmp79.Type = TType.String;
          tmp79.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NoteGuid != null) && __isset.noteGuid)
        {
          tmp79.Name = "noteGuid";
          tmp79.Type = TType.String;
          tmp79.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteStringAsync(NoteGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Data != null) && __isset.data)
        {
          tmp79.Name = "data";
          tmp79.Type = TType.Struct;
          tmp79.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await Data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Mime != null) && __isset.mime)
        {
          tmp79.Name = "mime";
          tmp79.Type = TType.String;
          tmp79.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteStringAsync(Mime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.width)
        {
          tmp79.Name = "width";
          tmp79.Type = TType.I16;
          tmp79.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteI16Async(Width, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.height)
        {
          tmp79.Name = "height";
          tmp79.Type = TType.I16;
          tmp79.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteI16Async(Height, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.duration)
        {
          tmp79.Name = "duration";
          tmp79.Type = TType.I16;
          tmp79.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteI16Async(Duration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.active)
        {
          tmp79.Name = "active";
          tmp79.Type = TType.Bool;
          tmp79.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteBoolAsync(Active, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Recognition != null) && __isset.recognition)
        {
          tmp79.Name = "recognition";
          tmp79.Type = TType.Struct;
          tmp79.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await Recognition.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Attributes != null) && __isset.attributes)
        {
          tmp79.Name = "attributes";
          tmp79.Type = TType.Struct;
          tmp79.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await Attributes.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateSequenceNum)
        {
          tmp79.Name = "updateSequenceNum";
          tmp79.Type = TType.I32;
          tmp79.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((AlternateData != null) && __isset.alternateData)
        {
          tmp79.Name = "alternateData";
          tmp79.Type = TType.Struct;
          tmp79.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp79, cancellationToken);
          await AlternateData.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Resource other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.noteGuid == other.__isset.noteGuid) && ((!__isset.noteGuid) || (global::System.Object.Equals(NoteGuid, other.NoteGuid))))
        && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
        && ((__isset.mime == other.__isset.mime) && ((!__isset.mime) || (global::System.Object.Equals(Mime, other.Mime))))
        && ((__isset.width == other.__isset.width) && ((!__isset.width) || (global::System.Object.Equals(Width, other.Width))))
        && ((__isset.height == other.__isset.height) && ((!__isset.height) || (global::System.Object.Equals(Height, other.Height))))
        && ((__isset.duration == other.__isset.duration) && ((!__isset.duration) || (global::System.Object.Equals(Duration, other.Duration))))
        && ((__isset.active == other.__isset.active) && ((!__isset.active) || (global::System.Object.Equals(Active, other.Active))))
        && ((__isset.recognition == other.__isset.recognition) && ((!__isset.recognition) || (global::System.Object.Equals(Recognition, other.Recognition))))
        && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (global::System.Object.Equals(Attributes, other.Attributes))))
        && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))))
        && ((__isset.alternateData == other.__isset.alternateData) && ((!__isset.alternateData) || (global::System.Object.Equals(AlternateData, other.AlternateData))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((NoteGuid != null) && __isset.noteGuid)
        {
          hashcode = (hashcode * 397) + NoteGuid.GetHashCode();
        }
        if((Data != null) && __isset.data)
        {
          hashcode = (hashcode * 397) + Data.GetHashCode();
        }
        if((Mime != null) && __isset.mime)
        {
          hashcode = (hashcode * 397) + Mime.GetHashCode();
        }
        if(__isset.width)
        {
          hashcode = (hashcode * 397) + Width.GetHashCode();
        }
        if(__isset.height)
        {
          hashcode = (hashcode * 397) + Height.GetHashCode();
        }
        if(__isset.duration)
        {
          hashcode = (hashcode * 397) + Duration.GetHashCode();
        }
        if(__isset.active)
        {
          hashcode = (hashcode * 397) + Active.GetHashCode();
        }
        if((Recognition != null) && __isset.recognition)
        {
          hashcode = (hashcode * 397) + Recognition.GetHashCode();
        }
        if((Attributes != null) && __isset.attributes)
        {
          hashcode = (hashcode * 397) + Attributes.GetHashCode();
        }
        if(__isset.updateSequenceNum)
        {
          hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        }
        if((AlternateData != null) && __isset.alternateData)
        {
          hashcode = (hashcode * 397) + AlternateData.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp80 = new StringBuilder("Resource(");
      int tmp81 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Guid: ");
        Guid.ToString(tmp80);
      }
      if((NoteGuid != null) && __isset.noteGuid)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("NoteGuid: ");
        NoteGuid.ToString(tmp80);
      }
      if((Data != null) && __isset.data)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Data: ");
        Data.ToString(tmp80);
      }
      if((Mime != null) && __isset.mime)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Mime: ");
        Mime.ToString(tmp80);
      }
      if(__isset.width)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Width: ");
        Width.ToString(tmp80);
      }
      if(__isset.height)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Height: ");
        Height.ToString(tmp80);
      }
      if(__isset.duration)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Duration: ");
        Duration.ToString(tmp80);
      }
      if(__isset.active)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Active: ");
        Active.ToString(tmp80);
      }
      if((Recognition != null) && __isset.recognition)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Recognition: ");
        Recognition.ToString(tmp80);
      }
      if((Attributes != null) && __isset.attributes)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("Attributes: ");
        Attributes.ToString(tmp80);
      }
      if(__isset.updateSequenceNum)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("UpdateSequenceNum: ");
        UpdateSequenceNum.ToString(tmp80);
      }
      if((AlternateData != null) && __isset.alternateData)
      {
        if(0 < tmp81++) { tmp80.Append(", "); }
        tmp80.Append("AlternateData: ");
        AlternateData.ToString(tmp80);
      }
      tmp80.Append(')');
      return tmp80.ToString();
    }
  }

}

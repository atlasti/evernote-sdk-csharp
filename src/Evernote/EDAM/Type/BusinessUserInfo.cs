/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// This structure is used to provide information about an Evernote Business
  /// membership, for members who are part of a business.
  /// 
  /// <dl>
  /// <dt>businessId</dt>
  ///   <dd>The ID of the Evernote Business account that the user is a member of.
  /// <dt>businessName</dt>
  ///   <dd>The human-readable name of the Evernote Business account that the user
  ///       is a member of.</dd>
  /// <dt>role</dt>
  ///   <dd>The role of the user within the Evernote Business account that
  ///       they are a member of.</dd>
  /// <dt>email</dt>
  ///   <dd>An e-mail address that will be used by the service in the context of your
  ///       Evernote Business activities.  For example, this e-mail address will be used
  ///       when you e-mail a business note, when you update notes in the account of
  ///       your business, etc.  The business e-mail cannot be used for identification
  ///       purposes such as for logging into the service.
  ///   </dd>
  /// <dt>updated</dt>
  ///   <dd>Last time the business user or business user attributes were updated.</dd>
  /// </dl>
  /// </summary>
  public partial class BusinessUserInfo : TBase
  {
    private int _businessId;
    private string _businessName;
    private global::Evernote.EDAM.Type.BusinessUserRole _role;
    private string _email;
    private long _updated;

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }

    public string BusinessName
    {
      get
      {
        return _businessName;
      }
      set
      {
        __isset.businessName = true;
        this._businessName = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.BusinessUserRole"/>
    /// </summary>
    public global::Evernote.EDAM.Type.BusinessUserRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public long Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool businessId;
      public bool businessName;
      public bool role;
      public bool email;
      public bool updated;
    }

    public BusinessUserInfo()
    {
    }

    public BusinessUserInfo DeepCopy()
    {
      var tmp28 = new BusinessUserInfo();
      if(__isset.businessId)
      {
        tmp28.BusinessId = this.BusinessId;
      }
      tmp28.__isset.businessId = this.__isset.businessId;
      if((BusinessName != null) && __isset.businessName)
      {
        tmp28.BusinessName = this.BusinessName;
      }
      tmp28.__isset.businessName = this.__isset.businessName;
      if(__isset.role)
      {
        tmp28.Role = this.Role;
      }
      tmp28.__isset.role = this.__isset.role;
      if((Email != null) && __isset.email)
      {
        tmp28.Email = this.Email;
      }
      tmp28.__isset.email = this.__isset.email;
      if(__isset.updated)
      {
        tmp28.Updated = this.Updated;
      }
      tmp28.__isset.updated = this.__isset.updated;
      return tmp28;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                BusinessId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                BusinessName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Role = (global::Evernote.EDAM.Type.BusinessUserRole)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Updated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp29 = new TStruct("BusinessUserInfo");
        await oprot.WriteStructBeginAsync(tmp29, cancellationToken);
        var tmp30 = new TField();
        if(__isset.businessId)
        {
          tmp30.Name = "businessId";
          tmp30.Type = TType.I32;
          tmp30.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteI32Async(BusinessId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BusinessName != null) && __isset.businessName)
        {
          tmp30.Name = "businessName";
          tmp30.Type = TType.String;
          tmp30.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteStringAsync(BusinessName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.role)
        {
          tmp30.Name = "role";
          tmp30.Type = TType.I32;
          tmp30.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteI32Async((int)Role, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Email != null) && __isset.email)
        {
          tmp30.Name = "email";
          tmp30.Type = TType.String;
          tmp30.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updated)
        {
          tmp30.Name = "updated";
          tmp30.Type = TType.I64;
          tmp30.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteI64Async(Updated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BusinessUserInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.businessId == other.__isset.businessId) && ((!__isset.businessId) || (global::System.Object.Equals(BusinessId, other.BusinessId))))
        && ((__isset.businessName == other.__isset.businessName) && ((!__isset.businessName) || (global::System.Object.Equals(BusinessName, other.BusinessName))))
        && ((__isset.role == other.__isset.role) && ((!__isset.role) || (global::System.Object.Equals(Role, other.Role))))
        && ((__isset.email == other.__isset.email) && ((!__isset.email) || (global::System.Object.Equals(Email, other.Email))))
        && ((__isset.updated == other.__isset.updated) && ((!__isset.updated) || (global::System.Object.Equals(Updated, other.Updated))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.businessId)
        {
          hashcode = (hashcode * 397) + BusinessId.GetHashCode();
        }
        if((BusinessName != null) && __isset.businessName)
        {
          hashcode = (hashcode * 397) + BusinessName.GetHashCode();
        }
        if(__isset.role)
        {
          hashcode = (hashcode * 397) + Role.GetHashCode();
        }
        if((Email != null) && __isset.email)
        {
          hashcode = (hashcode * 397) + Email.GetHashCode();
        }
        if(__isset.updated)
        {
          hashcode = (hashcode * 397) + Updated.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp31 = new StringBuilder("BusinessUserInfo(");
      int tmp32 = 0;
      if(__isset.businessId)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("BusinessId: ");
        BusinessId.ToString(tmp31);
      }
      if((BusinessName != null) && __isset.businessName)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("BusinessName: ");
        BusinessName.ToString(tmp31);
      }
      if(__isset.role)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Role: ");
        Role.ToString(tmp31);
      }
      if((Email != null) && __isset.email)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Email: ");
        Email.ToString(tmp31);
      }
      if(__isset.updated)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Updated: ");
        Updated.ToString(tmp31);
      }
      tmp31.Append(')');
      return tmp31.ToString();
    }
  }

}

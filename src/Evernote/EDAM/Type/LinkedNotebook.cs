/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A link in a user's account that refers them to a public or
  /// individual shared notebook in another user's account.
  /// 
  /// <dl>
  /// <dt>shareName</dt>
  /// <dd>The display name of the shared notebook. The link owner can change this.</dd>
  /// 
  /// <dt>username</dt>
  /// <dd>The username of the user who owns the shared or public notebook.</dd>
  /// 
  /// <dt>shardId</dt>
  /// <dd>The shard ID of the notebook if the notebook is not public.</dt>
  /// 
  /// <dt>uri</dt>
  /// <dd>The identifier of the public notebook.</dd>
  /// 
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this linked notebook.  Will be set whenever
  ///   a linked notebook is retrieved from the service, but may be null when a client
  ///   is creating a linked notebook.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>noteStoreUrl</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make
  ///   NoteStore requests to the server shard that contains that notebook's data.
  ///   I.e. this is the URL that should be used to create the Thrift HTTP client
  ///   transport to send messages to the NoteStore service for the account.
  ///   </dd>
  /// 
  /// <dt>webApiUrlPrefix:</dt>
  ///   <dd>
  ///   This field will contain the initial part of the URLs that should be used
  ///   to make requests to Evernote's thin client "web API", which provide
  ///   optimized operations for clients that aren't capable of manipulating
  ///   the full contents of accounts via the full Thrift data model. Clients
  ///   should concatenate the relative path for the various servlets onto the
  ///   end of this string to construct the full URL, as documented on our
  ///   developer web site.
  ///   </dd>
  /// 
  /// <dt>stack</dt>
  ///   <dd>If this is set, then the notebook is visually contained within a stack
  ///   of notebooks with this name.  All notebooks in the same account with the
  ///   same 'stack' field are considered to be in the same stack.
  ///   Notebooks with no stack set are "top level" and not contained within a
  ///   stack.  The link owner can change this and this field is for the benefit
  ///   of the link owner.
  ///   </dd>
  /// 
  /// <dt>businessId</dt>
  ///   <dd>If set, this will be the unique identifier for the business that owns
  ///   the notebook to which the linked notebook refers.</dd>
  /// 
  /// <dt>sharedNotebookGlobalId</dt>
  ///   <dd>The globally unique identifier (globalId) of the shared notebook that
  ///   corresponds to the share key, or the GUID of the Notebook that the linked notebook
  ///   refers to. This field must be filled in with the SharedNotebook.globalId or
  ///   Notebook.GUID value when creating new LinkedNotebooks. This field replaces the
  ///   deprecated "shareKey" field.
  ///   </dd>
  /// </dl>
  /// </summary>
  public partial class LinkedNotebook : TBase
  {
    private string _shareName;
    private string _username;
    private string _shardId;
    private string _sharedNotebookGlobalId;
    private string _uri;
    private string _guid;
    private int _updateSequenceNum;
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;
    private string _stack;
    private int _businessId;

    public string ShareName
    {
      get
      {
        return _shareName;
      }
      set
      {
        __isset.shareName = true;
        this._shareName = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string ShardId
    {
      get
      {
        return _shardId;
      }
      set
      {
        __isset.shardId = true;
        this._shardId = value;
      }
    }

    public string SharedNotebookGlobalId
    {
      get
      {
        return _sharedNotebookGlobalId;
      }
      set
      {
        __isset.sharedNotebookGlobalId = true;
        this._sharedNotebookGlobalId = value;
      }
    }

    public string Uri
    {
      get
      {
        return _uri;
      }
      set
      {
        __isset.uri = true;
        this._uri = value;
      }
    }

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }

    public string Stack
    {
      get
      {
        return _stack;
      }
      set
      {
        __isset.stack = true;
        this._stack = value;
      }
    }

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool shareName;
      public bool username;
      public bool shardId;
      public bool sharedNotebookGlobalId;
      public bool uri;
      public bool guid;
      public bool updateSequenceNum;
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
      public bool stack;
      public bool businessId;
    }

    public LinkedNotebook()
    {
    }

    public LinkedNotebook DeepCopy()
    {
      var tmp186 = new LinkedNotebook();
      if((ShareName != null) && __isset.shareName)
      {
        tmp186.ShareName = this.ShareName;
      }
      tmp186.__isset.shareName = this.__isset.shareName;
      if((Username != null) && __isset.username)
      {
        tmp186.Username = this.Username;
      }
      tmp186.__isset.username = this.__isset.username;
      if((ShardId != null) && __isset.shardId)
      {
        tmp186.ShardId = this.ShardId;
      }
      tmp186.__isset.shardId = this.__isset.shardId;
      if((SharedNotebookGlobalId != null) && __isset.sharedNotebookGlobalId)
      {
        tmp186.SharedNotebookGlobalId = this.SharedNotebookGlobalId;
      }
      tmp186.__isset.sharedNotebookGlobalId = this.__isset.sharedNotebookGlobalId;
      if((Uri != null) && __isset.uri)
      {
        tmp186.Uri = this.Uri;
      }
      tmp186.__isset.uri = this.__isset.uri;
      if((Guid != null) && __isset.guid)
      {
        tmp186.Guid = this.Guid;
      }
      tmp186.__isset.guid = this.__isset.guid;
      if(__isset.updateSequenceNum)
      {
        tmp186.UpdateSequenceNum = this.UpdateSequenceNum;
      }
      tmp186.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
      if((NoteStoreUrl != null) && __isset.noteStoreUrl)
      {
        tmp186.NoteStoreUrl = this.NoteStoreUrl;
      }
      tmp186.__isset.noteStoreUrl = this.__isset.noteStoreUrl;
      if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
      {
        tmp186.WebApiUrlPrefix = this.WebApiUrlPrefix;
      }
      tmp186.__isset.webApiUrlPrefix = this.__isset.webApiUrlPrefix;
      if((Stack != null) && __isset.stack)
      {
        tmp186.Stack = this.Stack;
      }
      tmp186.__isset.stack = this.__isset.stack;
      if(__isset.businessId)
      {
        tmp186.BusinessId = this.BusinessId;
      }
      tmp186.__isset.businessId = this.__isset.businessId;
      return tmp186;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                ShareName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ShardId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                SharedNotebookGlobalId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Uri = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                NoteStoreUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                WebApiUrlPrefix = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                Stack = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I32)
              {
                BusinessId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp187 = new TStruct("LinkedNotebook");
        await oprot.WriteStructBeginAsync(tmp187, cancellationToken);
        var tmp188 = new TField();
        if((ShareName != null) && __isset.shareName)
        {
          tmp188.Name = "shareName";
          tmp188.Type = TType.String;
          tmp188.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(ShareName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.username)
        {
          tmp188.Name = "username";
          tmp188.Type = TType.String;
          tmp188.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ShardId != null) && __isset.shardId)
        {
          tmp188.Name = "shardId";
          tmp188.Type = TType.String;
          tmp188.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(ShardId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SharedNotebookGlobalId != null) && __isset.sharedNotebookGlobalId)
        {
          tmp188.Name = "sharedNotebookGlobalId";
          tmp188.Type = TType.String;
          tmp188.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(SharedNotebookGlobalId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Uri != null) && __isset.uri)
        {
          tmp188.Name = "uri";
          tmp188.Type = TType.String;
          tmp188.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(Uri, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Guid != null) && __isset.guid)
        {
          tmp188.Name = "guid";
          tmp188.Type = TType.String;
          tmp188.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateSequenceNum)
        {
          tmp188.Name = "updateSequenceNum";
          tmp188.Type = TType.I32;
          tmp188.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NoteStoreUrl != null) && __isset.noteStoreUrl)
        {
          tmp188.Name = "noteStoreUrl";
          tmp188.Type = TType.String;
          tmp188.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(NoteStoreUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
        {
          tmp188.Name = "webApiUrlPrefix";
          tmp188.Type = TType.String;
          tmp188.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(WebApiUrlPrefix, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Stack != null) && __isset.stack)
        {
          tmp188.Name = "stack";
          tmp188.Type = TType.String;
          tmp188.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteStringAsync(Stack, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.businessId)
        {
          tmp188.Name = "businessId";
          tmp188.Type = TType.I32;
          tmp188.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
          await oprot.WriteI32Async(BusinessId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LinkedNotebook other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.shareName == other.__isset.shareName) && ((!__isset.shareName) || (global::System.Object.Equals(ShareName, other.ShareName))))
        && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.shardId == other.__isset.shardId) && ((!__isset.shardId) || (global::System.Object.Equals(ShardId, other.ShardId))))
        && ((__isset.sharedNotebookGlobalId == other.__isset.sharedNotebookGlobalId) && ((!__isset.sharedNotebookGlobalId) || (global::System.Object.Equals(SharedNotebookGlobalId, other.SharedNotebookGlobalId))))
        && ((__isset.uri == other.__isset.uri) && ((!__isset.uri) || (global::System.Object.Equals(Uri, other.Uri))))
        && ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))))
        && ((__isset.noteStoreUrl == other.__isset.noteStoreUrl) && ((!__isset.noteStoreUrl) || (global::System.Object.Equals(NoteStoreUrl, other.NoteStoreUrl))))
        && ((__isset.webApiUrlPrefix == other.__isset.webApiUrlPrefix) && ((!__isset.webApiUrlPrefix) || (global::System.Object.Equals(WebApiUrlPrefix, other.WebApiUrlPrefix))))
        && ((__isset.stack == other.__isset.stack) && ((!__isset.stack) || (global::System.Object.Equals(Stack, other.Stack))))
        && ((__isset.businessId == other.__isset.businessId) && ((!__isset.businessId) || (global::System.Object.Equals(BusinessId, other.BusinessId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ShareName != null) && __isset.shareName)
        {
          hashcode = (hashcode * 397) + ShareName.GetHashCode();
        }
        if((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if((ShardId != null) && __isset.shardId)
        {
          hashcode = (hashcode * 397) + ShardId.GetHashCode();
        }
        if((SharedNotebookGlobalId != null) && __isset.sharedNotebookGlobalId)
        {
          hashcode = (hashcode * 397) + SharedNotebookGlobalId.GetHashCode();
        }
        if((Uri != null) && __isset.uri)
        {
          hashcode = (hashcode * 397) + Uri.GetHashCode();
        }
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if(__isset.updateSequenceNum)
        {
          hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        }
        if((NoteStoreUrl != null) && __isset.noteStoreUrl)
        {
          hashcode = (hashcode * 397) + NoteStoreUrl.GetHashCode();
        }
        if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
        {
          hashcode = (hashcode * 397) + WebApiUrlPrefix.GetHashCode();
        }
        if((Stack != null) && __isset.stack)
        {
          hashcode = (hashcode * 397) + Stack.GetHashCode();
        }
        if(__isset.businessId)
        {
          hashcode = (hashcode * 397) + BusinessId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp189 = new StringBuilder("LinkedNotebook(");
      int tmp190 = 0;
      if((ShareName != null) && __isset.shareName)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("ShareName: ");
        ShareName.ToString(tmp189);
      }
      if((Username != null) && __isset.username)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("Username: ");
        Username.ToString(tmp189);
      }
      if((ShardId != null) && __isset.shardId)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("ShardId: ");
        ShardId.ToString(tmp189);
      }
      if((SharedNotebookGlobalId != null) && __isset.sharedNotebookGlobalId)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("SharedNotebookGlobalId: ");
        SharedNotebookGlobalId.ToString(tmp189);
      }
      if((Uri != null) && __isset.uri)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("Uri: ");
        Uri.ToString(tmp189);
      }
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("Guid: ");
        Guid.ToString(tmp189);
      }
      if(__isset.updateSequenceNum)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("UpdateSequenceNum: ");
        UpdateSequenceNum.ToString(tmp189);
      }
      if((NoteStoreUrl != null) && __isset.noteStoreUrl)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("NoteStoreUrl: ");
        NoteStoreUrl.ToString(tmp189);
      }
      if((WebApiUrlPrefix != null) && __isset.webApiUrlPrefix)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("WebApiUrlPrefix: ");
        WebApiUrlPrefix.ToString(tmp189);
      }
      if((Stack != null) && __isset.stack)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("Stack: ");
        Stack.ToString(tmp189);
      }
      if(__isset.businessId)
      {
        if(0 < tmp190++) { tmp189.Append(", "); }
        tmp189.Append("BusinessId: ");
        BusinessId.ToString(tmp189);
      }
      tmp189.Append(')');
      return tmp189.ToString();
    }
  }

}

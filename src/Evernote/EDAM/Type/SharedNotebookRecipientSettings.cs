/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Settings meant for the recipient of a shared notebook, such as
  /// for indicating which types of notifications the recipient wishes
  /// for reminders, etc.
  /// 
  /// The reminderNotifyEmail and reminderNotifyInApp fields have a
  /// 3-state read value but a 2-state write value.  On read, it is
  /// possible to observe "unset", true, or false.  The initial state is
  /// "unset".  When you choose to set a value, you may set it to either
  /// true or false, but you cannot unset the value.  Once one of these
  /// members has a true/false value, it will always have a true/false
  /// value.
  /// 
  /// <dl>
  /// <dt>reminderNotifyEmail</dt>
  /// <dd>Indicates that the user wishes to receive daily e-mail notifications
  ///     for reminders associated with the notebook. This may be true only for
  ///     business notebooks that belong to the business of which the user is a
  ///     member. You may only set this value on a notebook in your business.</dd>
  /// <dt>reminderNotifyInApp</dt>
  /// <dd>Indicates that the user wishes to receive notifications for
  ///     reminders by applications that support providing such
  ///     notifications.  The exact nature of the notification is defined
  ///     by the individual applications.</dd>
  /// </dl>
  /// 
  /// </summary>
  public partial class SharedNotebookRecipientSettings : TBase
  {
    private bool _reminderNotifyEmail;
    private bool _reminderNotifyInApp;

    public bool ReminderNotifyEmail
    {
      get
      {
        return _reminderNotifyEmail;
      }
      set
      {
        __isset.reminderNotifyEmail = true;
        this._reminderNotifyEmail = value;
      }
    }

    public bool ReminderNotifyInApp
    {
      get
      {
        return _reminderNotifyInApp;
      }
      set
      {
        __isset.reminderNotifyInApp = true;
        this._reminderNotifyInApp = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool reminderNotifyEmail;
      public bool reminderNotifyInApp;
    }

    public SharedNotebookRecipientSettings()
    {
    }

    public SharedNotebookRecipientSettings DeepCopy()
    {
      var tmp148 = new SharedNotebookRecipientSettings();
      if(__isset.reminderNotifyEmail)
      {
        tmp148.ReminderNotifyEmail = this.ReminderNotifyEmail;
      }
      tmp148.__isset.reminderNotifyEmail = this.__isset.reminderNotifyEmail;
      if(__isset.reminderNotifyInApp)
      {
        tmp148.ReminderNotifyInApp = this.ReminderNotifyInApp;
      }
      tmp148.__isset.reminderNotifyInApp = this.__isset.reminderNotifyInApp;
      return tmp148;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                ReminderNotifyEmail = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                ReminderNotifyInApp = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp149 = new TStruct("SharedNotebookRecipientSettings");
        await oprot.WriteStructBeginAsync(tmp149, cancellationToken);
        var tmp150 = new TField();
        if(__isset.reminderNotifyEmail)
        {
          tmp150.Name = "reminderNotifyEmail";
          tmp150.Type = TType.Bool;
          tmp150.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp150, cancellationToken);
          await oprot.WriteBoolAsync(ReminderNotifyEmail, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reminderNotifyInApp)
        {
          tmp150.Name = "reminderNotifyInApp";
          tmp150.Type = TType.Bool;
          tmp150.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp150, cancellationToken);
          await oprot.WriteBoolAsync(ReminderNotifyInApp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SharedNotebookRecipientSettings other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.reminderNotifyEmail == other.__isset.reminderNotifyEmail) && ((!__isset.reminderNotifyEmail) || (global::System.Object.Equals(ReminderNotifyEmail, other.ReminderNotifyEmail))))
        && ((__isset.reminderNotifyInApp == other.__isset.reminderNotifyInApp) && ((!__isset.reminderNotifyInApp) || (global::System.Object.Equals(ReminderNotifyInApp, other.ReminderNotifyInApp))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.reminderNotifyEmail)
        {
          hashcode = (hashcode * 397) + ReminderNotifyEmail.GetHashCode();
        }
        if(__isset.reminderNotifyInApp)
        {
          hashcode = (hashcode * 397) + ReminderNotifyInApp.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp151 = new StringBuilder("SharedNotebookRecipientSettings(");
      int tmp152 = 0;
      if(__isset.reminderNotifyEmail)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("ReminderNotifyEmail: ");
        ReminderNotifyEmail.ToString(tmp151);
      }
      if(__isset.reminderNotifyInApp)
      {
        if(0 < tmp152++) { tmp151.Append(", "); }
        tmp151.Append("ReminderNotifyInApp: ");
        ReminderNotifyInApp.ToString(tmp151);
      }
      tmp151.Append(')');
      return tmp151.ToString();
    }
  }

}

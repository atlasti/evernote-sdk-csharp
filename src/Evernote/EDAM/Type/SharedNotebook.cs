/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Shared notebooks represent a relationship between a notebook and a single
  /// share invitation recipient.
  /// <dl>
  /// <dt>id</dt>
  /// <dd>The primary identifier of the share, which is not globally unique.</dd>
  /// 
  /// <dt>userId</dt>
  /// <dd>The user id of the owner of the notebook.</dd>
  /// 
  /// <dt>notebookGuid</dt>
  /// <dd>The GUID of the notebook that has been shared.</dd>
  /// 
  /// <dt>email</dt>
  /// <dd>A string containing a display name for the recipient of the share. This may
  ///     be an email address, a phone number, a full name, or some other descriptive
  ///     string This field is read-only to clients. It will be filled in by the service
  ///     when returning shared notebooks.
  /// </dd>
  /// 
  /// <dt>recipientIdentityId</dt>
  /// <dd>The IdentityID of the share recipient. If present, only the user who has
  ///     claimed that identity may access this share.
  /// </dd>
  /// 
  /// <dt>notebookModifiable</dt>
  /// <dd>DEPRECATED</dd>
  /// 
  /// <dt>serviceCreated</dt>
  /// <dd>The date that the owner first created the share with the specific email
  ///   address.</dd>
  /// 
  /// <dt>serviceUpdated</dt>
  /// <dd>The date the shared notebook was last updated on the service.  This
  ///     will be updated when authenticateToSharedNotebook is called the first
  ///     time with a shared notebook (i.e. when the username is bound to that
  ///     shared notebook), and also when the SharedNotebook privilege is updated
  ///     as part of a shareNotebook(...) call, as well as on any calls to
  ///     updateSharedNotebook(...).
  /// </dd>
  /// 
  /// <dt>username</dt>
  /// <dd>DEPRECATED. The username of the user who can access this share. This
  ///     value is read-only to clients. It will be filled in by the service when
  ///     returning shared notebooks.
  /// </dd>
  /// 
  /// <dt>privilege</dt>
  /// <dd>The privilege level granted to the notebook, activity stream, and
  ///     invitations.  See the corresponding enumeration for details.
  /// </dd>
  /// 
  /// <dt>recipientSettings</dt>
  /// <dd>Settings intended for use only by the recipient of this shared
  ///     notebook.  You should skip setting this value unless you want
  ///     to change the value contained inside the structure, and only if
  ///     you are the recipient.</dd>
  /// 
  /// <dt>globalId</dt>
  /// <dd>An immutable, opaque string that acts as a globally unique
  ///     identifier for this shared notebook record.  You can use this field to
  ///     match linked notebook and shared notebook records as well as to
  ///     create new LinkedNotebook records.  This field replaces the deprecated
  ///     shareKey field.
  /// </dd>
  /// 
  /// <dt>sharerUserId</dt>
  /// <dd>The user id of the user who shared a notebook via this shared notebook
  ///     instance. This may not be the same as userId, since a user with full
  ///     access to a notebook may have created a new share for that notebook. For
  ///     Business, this represents the user who shared the business notebook. This
  ///     field is currently unset for a SharedNotebook created by joining a
  ///     notebook that has been published to the business.
  /// </dd>
  /// 
  /// <dt>recipientUsername</dt>
  /// <dd>The username of the user who can access this share. This is the username
  ///     for the user with the id in recipientUserId. This value can be set
  ///     by clients when calling shareNotebook(...), and that will result in the
  ///     created SharedNotebook being assigned to a user. This value is always set
  ///     if serviceAssigned is set.
  /// </dd>
  /// 
  /// <dt>recipientUserId</dt>
  /// <dd>The id of the user who can access this share. This is the id for the user
  ///     with the username in recipientUsername. This value is read-only and set
  ///     by the service. Value set by clients will be ignored. This field may be unset
  ///     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
  ///     prefer this field over recipientUsername unless they need to use usernames
  ///     directly.
  /// </dd>
  /// 
  /// <dt>serviceAssigned</dt>
  /// <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
  ///     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
  ///     is not assigned. This field is a read-only value that is set by the service.
  /// </dd>
  /// </dl>
  /// </summary>
  public partial class SharedNotebook : TBase
  {
    private long _id;
    private int _userId;
    private string _notebookGuid;
    private string _email;
    private long _recipientIdentityId;
    private bool _notebookModifiable;
    private long _serviceCreated;
    private long _serviceUpdated;
    private string _globalId;
    private string _username;
    private global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel _privilege;
    private global::Evernote.EDAM.Type.SharedNotebookRecipientSettings _recipientSettings;
    private int _sharerUserId;
    private string _recipientUsername;
    private int _recipientUserId;
    private long _serviceAssigned;

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public long RecipientIdentityId
    {
      get
      {
        return _recipientIdentityId;
      }
      set
      {
        __isset.recipientIdentityId = true;
        this._recipientIdentityId = value;
      }
    }

    public bool NotebookModifiable
    {
      get
      {
        return _notebookModifiable;
      }
      set
      {
        __isset.notebookModifiable = true;
        this._notebookModifiable = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return _serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this._serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return _serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this._serviceUpdated = value;
      }
    }

    public string GlobalId
    {
      get
      {
        return _globalId;
      }
      set
      {
        __isset.globalId = true;
        this._globalId = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public global::Evernote.EDAM.Type.SharedNotebookRecipientSettings RecipientSettings
    {
      get
      {
        return _recipientSettings;
      }
      set
      {
        __isset.recipientSettings = true;
        this._recipientSettings = value;
      }
    }

    public int SharerUserId
    {
      get
      {
        return _sharerUserId;
      }
      set
      {
        __isset.sharerUserId = true;
        this._sharerUserId = value;
      }
    }

    public string RecipientUsername
    {
      get
      {
        return _recipientUsername;
      }
      set
      {
        __isset.recipientUsername = true;
        this._recipientUsername = value;
      }
    }

    public int RecipientUserId
    {
      get
      {
        return _recipientUserId;
      }
      set
      {
        __isset.recipientUserId = true;
        this._recipientUserId = value;
      }
    }

    public long ServiceAssigned
    {
      get
      {
        return _serviceAssigned;
      }
      set
      {
        __isset.serviceAssigned = true;
        this._serviceAssigned = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
      public bool userId;
      public bool notebookGuid;
      public bool email;
      public bool recipientIdentityId;
      public bool notebookModifiable;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool globalId;
      public bool username;
      public bool privilege;
      public bool recipientSettings;
      public bool sharerUserId;
      public bool recipientUsername;
      public bool recipientUserId;
      public bool serviceAssigned;
    }

    public SharedNotebook()
    {
    }

    public SharedNotebook DeepCopy()
    {
      var tmp158 = new SharedNotebook();
      if(__isset.id)
      {
        tmp158.Id = this.Id;
      }
      tmp158.__isset.id = this.__isset.id;
      if(__isset.userId)
      {
        tmp158.UserId = this.UserId;
      }
      tmp158.__isset.userId = this.__isset.userId;
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        tmp158.NotebookGuid = this.NotebookGuid;
      }
      tmp158.__isset.notebookGuid = this.__isset.notebookGuid;
      if((Email != null) && __isset.email)
      {
        tmp158.Email = this.Email;
      }
      tmp158.__isset.email = this.__isset.email;
      if(__isset.recipientIdentityId)
      {
        tmp158.RecipientIdentityId = this.RecipientIdentityId;
      }
      tmp158.__isset.recipientIdentityId = this.__isset.recipientIdentityId;
      if(__isset.notebookModifiable)
      {
        tmp158.NotebookModifiable = this.NotebookModifiable;
      }
      tmp158.__isset.notebookModifiable = this.__isset.notebookModifiable;
      if(__isset.serviceCreated)
      {
        tmp158.ServiceCreated = this.ServiceCreated;
      }
      tmp158.__isset.serviceCreated = this.__isset.serviceCreated;
      if(__isset.serviceUpdated)
      {
        tmp158.ServiceUpdated = this.ServiceUpdated;
      }
      tmp158.__isset.serviceUpdated = this.__isset.serviceUpdated;
      if((GlobalId != null) && __isset.globalId)
      {
        tmp158.GlobalId = this.GlobalId;
      }
      tmp158.__isset.globalId = this.__isset.globalId;
      if((Username != null) && __isset.username)
      {
        tmp158.Username = this.Username;
      }
      tmp158.__isset.username = this.__isset.username;
      if(__isset.privilege)
      {
        tmp158.Privilege = this.Privilege;
      }
      tmp158.__isset.privilege = this.__isset.privilege;
      if((RecipientSettings != null) && __isset.recipientSettings)
      {
        tmp158.RecipientSettings = (global::Evernote.EDAM.Type.SharedNotebookRecipientSettings)this.RecipientSettings.DeepCopy();
      }
      tmp158.__isset.recipientSettings = this.__isset.recipientSettings;
      if(__isset.sharerUserId)
      {
        tmp158.SharerUserId = this.SharerUserId;
      }
      tmp158.__isset.sharerUserId = this.__isset.sharerUserId;
      if((RecipientUsername != null) && __isset.recipientUsername)
      {
        tmp158.RecipientUsername = this.RecipientUsername;
      }
      tmp158.__isset.recipientUsername = this.__isset.recipientUsername;
      if(__isset.recipientUserId)
      {
        tmp158.RecipientUserId = this.RecipientUserId;
      }
      tmp158.__isset.recipientUserId = this.__isset.recipientUserId;
      if(__isset.serviceAssigned)
      {
        tmp158.ServiceAssigned = this.ServiceAssigned;
      }
      tmp158.__isset.serviceAssigned = this.__isset.serviceAssigned;
      return tmp158;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                UserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NotebookGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.I64)
              {
                RecipientIdentityId = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                NotebookModifiable = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                ServiceCreated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I64)
              {
                ServiceUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                GlobalId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I32)
              {
                Privilege = (global::Evernote.EDAM.Type.SharedNotebookPrivilegeLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Struct)
              {
                RecipientSettings = new global::Evernote.EDAM.Type.SharedNotebookRecipientSettings();
                await RecipientSettings.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.I32)
              {
                SharerUserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                RecipientUsername = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.I32)
              {
                RecipientUserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.I64)
              {
                ServiceAssigned = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp159 = new TStruct("SharedNotebook");
        await oprot.WriteStructBeginAsync(tmp159, cancellationToken);
        var tmp160 = new TField();
        if(__isset.id)
        {
          tmp160.Name = "id";
          tmp160.Type = TType.I64;
          tmp160.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI64Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userId)
        {
          tmp160.Name = "userId";
          tmp160.Type = TType.I32;
          tmp160.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI32Async(UserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          tmp160.Name = "notebookGuid";
          tmp160.Type = TType.String;
          tmp160.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteStringAsync(NotebookGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Email != null) && __isset.email)
        {
          tmp160.Name = "email";
          tmp160.Type = TType.String;
          tmp160.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.notebookModifiable)
        {
          tmp160.Name = "notebookModifiable";
          tmp160.Type = TType.Bool;
          tmp160.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteBoolAsync(NotebookModifiable, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceCreated)
        {
          tmp160.Name = "serviceCreated";
          tmp160.Type = TType.I64;
          tmp160.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI64Async(ServiceCreated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GlobalId != null) && __isset.globalId)
        {
          tmp160.Name = "globalId";
          tmp160.Type = TType.String;
          tmp160.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteStringAsync(GlobalId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.username)
        {
          tmp160.Name = "username";
          tmp160.Type = TType.String;
          tmp160.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceUpdated)
        {
          tmp160.Name = "serviceUpdated";
          tmp160.Type = TType.I64;
          tmp160.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI64Async(ServiceUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.privilege)
        {
          tmp160.Name = "privilege";
          tmp160.Type = TType.I32;
          tmp160.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI32Async((int)Privilege, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecipientSettings != null) && __isset.recipientSettings)
        {
          tmp160.Name = "recipientSettings";
          tmp160.Type = TType.Struct;
          tmp160.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await RecipientSettings.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sharerUserId)
        {
          tmp160.Name = "sharerUserId";
          tmp160.Type = TType.I32;
          tmp160.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI32Async(SharerUserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecipientUsername != null) && __isset.recipientUsername)
        {
          tmp160.Name = "recipientUsername";
          tmp160.Type = TType.String;
          tmp160.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteStringAsync(RecipientUsername, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.serviceAssigned)
        {
          tmp160.Name = "serviceAssigned";
          tmp160.Type = TType.I64;
          tmp160.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI64Async(ServiceAssigned, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recipientUserId)
        {
          tmp160.Name = "recipientUserId";
          tmp160.Type = TType.I32;
          tmp160.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI32Async(RecipientUserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recipientIdentityId)
        {
          tmp160.Name = "recipientIdentityId";
          tmp160.Type = TType.I64;
          tmp160.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
          await oprot.WriteI64Async(RecipientIdentityId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SharedNotebook other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
        && ((__isset.userId == other.__isset.userId) && ((!__isset.userId) || (global::System.Object.Equals(UserId, other.UserId))))
        && ((__isset.notebookGuid == other.__isset.notebookGuid) && ((!__isset.notebookGuid) || (global::System.Object.Equals(NotebookGuid, other.NotebookGuid))))
        && ((__isset.email == other.__isset.email) && ((!__isset.email) || (global::System.Object.Equals(Email, other.Email))))
        && ((__isset.recipientIdentityId == other.__isset.recipientIdentityId) && ((!__isset.recipientIdentityId) || (global::System.Object.Equals(RecipientIdentityId, other.RecipientIdentityId))))
        && ((__isset.notebookModifiable == other.__isset.notebookModifiable) && ((!__isset.notebookModifiable) || (global::System.Object.Equals(NotebookModifiable, other.NotebookModifiable))))
        && ((__isset.serviceCreated == other.__isset.serviceCreated) && ((!__isset.serviceCreated) || (global::System.Object.Equals(ServiceCreated, other.ServiceCreated))))
        && ((__isset.serviceUpdated == other.__isset.serviceUpdated) && ((!__isset.serviceUpdated) || (global::System.Object.Equals(ServiceUpdated, other.ServiceUpdated))))
        && ((__isset.globalId == other.__isset.globalId) && ((!__isset.globalId) || (global::System.Object.Equals(GlobalId, other.GlobalId))))
        && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.privilege == other.__isset.privilege) && ((!__isset.privilege) || (global::System.Object.Equals(Privilege, other.Privilege))))
        && ((__isset.recipientSettings == other.__isset.recipientSettings) && ((!__isset.recipientSettings) || (global::System.Object.Equals(RecipientSettings, other.RecipientSettings))))
        && ((__isset.sharerUserId == other.__isset.sharerUserId) && ((!__isset.sharerUserId) || (global::System.Object.Equals(SharerUserId, other.SharerUserId))))
        && ((__isset.recipientUsername == other.__isset.recipientUsername) && ((!__isset.recipientUsername) || (global::System.Object.Equals(RecipientUsername, other.RecipientUsername))))
        && ((__isset.recipientUserId == other.__isset.recipientUserId) && ((!__isset.recipientUserId) || (global::System.Object.Equals(RecipientUserId, other.RecipientUserId))))
        && ((__isset.serviceAssigned == other.__isset.serviceAssigned) && ((!__isset.serviceAssigned) || (global::System.Object.Equals(ServiceAssigned, other.ServiceAssigned))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.id)
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if(__isset.userId)
        {
          hashcode = (hashcode * 397) + UserId.GetHashCode();
        }
        if((NotebookGuid != null) && __isset.notebookGuid)
        {
          hashcode = (hashcode * 397) + NotebookGuid.GetHashCode();
        }
        if((Email != null) && __isset.email)
        {
          hashcode = (hashcode * 397) + Email.GetHashCode();
        }
        if(__isset.recipientIdentityId)
        {
          hashcode = (hashcode * 397) + RecipientIdentityId.GetHashCode();
        }
        if(__isset.notebookModifiable)
        {
          hashcode = (hashcode * 397) + NotebookModifiable.GetHashCode();
        }
        if(__isset.serviceCreated)
        {
          hashcode = (hashcode * 397) + ServiceCreated.GetHashCode();
        }
        if(__isset.serviceUpdated)
        {
          hashcode = (hashcode * 397) + ServiceUpdated.GetHashCode();
        }
        if((GlobalId != null) && __isset.globalId)
        {
          hashcode = (hashcode * 397) + GlobalId.GetHashCode();
        }
        if((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if(__isset.privilege)
        {
          hashcode = (hashcode * 397) + Privilege.GetHashCode();
        }
        if((RecipientSettings != null) && __isset.recipientSettings)
        {
          hashcode = (hashcode * 397) + RecipientSettings.GetHashCode();
        }
        if(__isset.sharerUserId)
        {
          hashcode = (hashcode * 397) + SharerUserId.GetHashCode();
        }
        if((RecipientUsername != null) && __isset.recipientUsername)
        {
          hashcode = (hashcode * 397) + RecipientUsername.GetHashCode();
        }
        if(__isset.recipientUserId)
        {
          hashcode = (hashcode * 397) + RecipientUserId.GetHashCode();
        }
        if(__isset.serviceAssigned)
        {
          hashcode = (hashcode * 397) + ServiceAssigned.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp161 = new StringBuilder("SharedNotebook(");
      int tmp162 = 0;
      if(__isset.id)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("Id: ");
        Id.ToString(tmp161);
      }
      if(__isset.userId)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("UserId: ");
        UserId.ToString(tmp161);
      }
      if((NotebookGuid != null) && __isset.notebookGuid)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("NotebookGuid: ");
        NotebookGuid.ToString(tmp161);
      }
      if((Email != null) && __isset.email)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("Email: ");
        Email.ToString(tmp161);
      }
      if(__isset.recipientIdentityId)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("RecipientIdentityId: ");
        RecipientIdentityId.ToString(tmp161);
      }
      if(__isset.notebookModifiable)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("NotebookModifiable: ");
        NotebookModifiable.ToString(tmp161);
      }
      if(__isset.serviceCreated)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("ServiceCreated: ");
        ServiceCreated.ToString(tmp161);
      }
      if(__isset.serviceUpdated)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("ServiceUpdated: ");
        ServiceUpdated.ToString(tmp161);
      }
      if((GlobalId != null) && __isset.globalId)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("GlobalId: ");
        GlobalId.ToString(tmp161);
      }
      if((Username != null) && __isset.username)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("Username: ");
        Username.ToString(tmp161);
      }
      if(__isset.privilege)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("Privilege: ");
        Privilege.ToString(tmp161);
      }
      if((RecipientSettings != null) && __isset.recipientSettings)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("RecipientSettings: ");
        RecipientSettings.ToString(tmp161);
      }
      if(__isset.sharerUserId)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("SharerUserId: ");
        SharerUserId.ToString(tmp161);
      }
      if((RecipientUsername != null) && __isset.recipientUsername)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("RecipientUsername: ");
        RecipientUsername.ToString(tmp161);
      }
      if(__isset.recipientUserId)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("RecipientUserId: ");
        RecipientUserId.ToString(tmp161);
      }
      if(__isset.serviceAssigned)
      {
        if(0 < tmp162++) { tmp161.Append(", "); }
        tmp161.Append("ServiceAssigned: ");
        ServiceAssigned.ToString(tmp161);
      }
      tmp161.Append(')');
      return tmp161.ToString();
    }
  }

}

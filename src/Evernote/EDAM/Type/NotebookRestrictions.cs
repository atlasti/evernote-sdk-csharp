/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// This structure captures information about the types of operations
  /// that cannot be performed on a given notebook with a type of
  /// authenticated access and credentials.  The values filled into this
  /// structure are based on then-current values in the server database
  /// for shared notebooks and notebook publishing records, as well as
  /// information related to the authentication token.  Information from
  /// the authentication token includes the application that is accessing
  /// the server, as defined by the permissions granted by consumer (api)
  /// key, and the method used to obtain the token, for example via
  /// authenticateToSharedNotebook, authenticateToBusiness, etc.  Note
  /// that changes to values in this structure that are the result of
  /// shared notebook or publishing record changes are communicated to
  /// the client via a change in the notebook USN during sync.  It is
  /// important to use the same access method, parameters, and consumer
  /// key in order obtain correct results from the sync engine.
  /// 
  /// The server has the final say on what is allowed as values may
  /// change between calls to obtain NotebookRestrictions instances
  /// and to operate on data on the service.
  /// 
  /// If the following are set and true, then the given restriction is
  /// in effect, as accessed by the same authentication token from which
  /// the values were obtained.
  /// 
  /// <dl>
  /// <dt>noReadNotes</dt>
  ///   <dd>The client is not able to read notes from the service and
  ///   the notebook is write-only.
  ///   </dd>
  /// <dt>noCreateNotes</dt>
  ///   <dd>The client may not create new notes in the notebook.
  ///   </dd>
  /// <dt>noUpdateNotes</dt>
  ///   <dd>The client may not update notes currently in the notebook.
  ///   </dd>
  /// <dt>noExpungeNotes</dt>
  ///   <dd>The client may not expunge notes currently in the notebook.
  ///   </dd>
  /// <dt>noShareNotes</dt>
  ///   <dd>The client may not share notes in the notebook via the
  ///   shareNote or createOrUpdateSharedNotes methods.
  ///   </dd>
  /// <dt>noEmailNotes</dt>
  ///   <dd>The client may not e-mail notes by guid via the Evernote
  ///   service by using the emailNote method.  Email notes by value
  ///   by populating the note parameter instead.
  ///   </dd>
  /// <dt>noSendMessageToRecipients</dt>
  ///   <dd>The client may not send messages to the share recipients of
  ///   the notebook.
  ///   </dd>
  /// <dt>noUpdateNotebook</dt>
  ///   <dd>The client may not update the Notebook object itself, for
  ///   example, via the updateNotebook method.
  ///   </dd>
  /// <dt>noExpungeNotebook</dt>
  ///   <dd>The client may not expunge the Notebook object itself, for
  ///   example, via the expungeNotebook method.
  ///   </dd>
  /// <dt>noSetDefaultNotebook</dt>
  ///   <dd>The client may not set this notebook to be the default notebook.
  ///   The caller should leave Notebook.defaultNotebook unset.
  ///   </dd>
  /// <dt>noSetNotebookStack</dt>
  ///   <dd>If the client is able to update the Notebook, the Notebook.stack
  ///   value may not be set.
  ///   </dd>
  /// <dt>noPublishToPublic</dt>
  ///   <dd>The client may not publish the notebook to the public.
  ///   For example, business notebooks may not be shared publicly.
  ///   </dd>
  /// <dt>noPublishToBusinessLibrary</dt>
  ///   <dd>The client may not publish the notebook to the business library.
  ///   </dd>
  /// <dt>noCreateTags</dt>
  ///   <dd>The client may not complete an operation that results in a new tag
  ///   being created in the owner's account.
  ///   </dd>
  /// <dt>noUpdateTags</dt>
  ///   <dd>The client may not update tags in the owner's account.
  ///   </dd>
  /// <dt>noExpungeTags</dt>
  ///   <dd>The client may not expunge tags in the owner's account.
  ///   </dd>
  /// <dt>noSetParentTag</dt>
  ///   <dd>If the client is able to create or update tags in the owner's account,
  ///   then they will not be able to set the parent tag.  Leave the value unset.
  ///   </dd>
  /// <dt>noCreateSharedNotebooks</dt>
  ///   <dd>The client is unable to create shared notebooks for the notebook.
  ///   </dd>
  /// <dt>updateWhichSharedNotebookRestrictions</dt>
  ///   <dd>Restrictions on which shared notebook instances can be updated.  If the
  ///   value is not set or null, then the client can update any of the shared notebooks
  ///   associated with the notebook on which the NotebookRestrictions are defined.
  ///   See the enumeration for further details.
  ///   </dd>
  /// <dt>expungeWhichSharedNotebookRestrictions</dt>
  ///   <dd>Restrictions on which shared notebook instances can be expunged.  If the
  ///   value is not set or null, then the client can expunge any of the shared notebooks
  ///   associated with the notebook on which the NotebookRestrictions are defined.
  ///   See the enumeration for further details.
  ///   </dd>
  /// <dt>noShareNotesWithBusiness</dt>
  ///   <dd>The client may not share notes in the notebook via the shareNoteWithBusiness
  ///   method.
  ///   </dd>
  /// <dt>noRenameNotebook</dt>
  ///   <dd>The client may not rename this notebook.</dd>
  /// <dt>noSetInMyList</dt>
  ///   <dd>clients may not change the NotebookRecipientSettings.inMyList settings for
  ///   this notebook.</dd>
  /// <dt>noSetContact</dt>
  ///   <dd>The contact for this notebook may not be changed.</dd>
  /// </dl>
  /// <dt>canMoveToContainerRestrictions</dt>
  ///   <dd>Specifies if the client can move this notebook to a container and if not,
  ///   the reason why.</dd>
  /// <dt>noCanMoveNote</dt>
  ///   <dd>If set, the client cannot move a Note into or out of the Notebook.</dd>
  /// </dl>
  /// </summary>
  public partial class NotebookRestrictions : TBase
  {
    private bool _noReadNotes;
    private bool _noCreateNotes;
    private bool _noUpdateNotes;
    private bool _noExpungeNotes;
    private bool _noShareNotes;
    private bool _noEmailNotes;
    private bool _noSendMessageToRecipients;
    private bool _noUpdateNotebook;
    private bool _noExpungeNotebook;
    private bool _noSetDefaultNotebook;
    private bool _noSetNotebookStack;
    private bool _noPublishToPublic;
    private bool _noPublishToBusinessLibrary;
    private bool _noCreateTags;
    private bool _noUpdateTags;
    private bool _noExpungeTags;
    private bool _noSetParentTag;
    private bool _noCreateSharedNotebooks;
    private global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions _updateWhichSharedNotebookRestrictions;
    private global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions _expungeWhichSharedNotebookRestrictions;
    private bool _noShareNotesWithBusiness;
    private bool _noRenameNotebook;
    private bool _noSetInMyList;
    private bool _noChangeContact;
    private global::Evernote.EDAM.Type.CanMoveToContainerRestrictions _canMoveToContainerRestrictions;
    private bool _noSetReminderNotifyEmail;
    private bool _noSetReminderNotifyInApp;
    private bool _noSetRecipientSettingsStack;
    private bool _noCanMoveNote;

    public bool NoReadNotes
    {
      get
      {
        return _noReadNotes;
      }
      set
      {
        __isset.noReadNotes = true;
        this._noReadNotes = value;
      }
    }

    public bool NoCreateNotes
    {
      get
      {
        return _noCreateNotes;
      }
      set
      {
        __isset.noCreateNotes = true;
        this._noCreateNotes = value;
      }
    }

    public bool NoUpdateNotes
    {
      get
      {
        return _noUpdateNotes;
      }
      set
      {
        __isset.noUpdateNotes = true;
        this._noUpdateNotes = value;
      }
    }

    public bool NoExpungeNotes
    {
      get
      {
        return _noExpungeNotes;
      }
      set
      {
        __isset.noExpungeNotes = true;
        this._noExpungeNotes = value;
      }
    }

    public bool NoShareNotes
    {
      get
      {
        return _noShareNotes;
      }
      set
      {
        __isset.noShareNotes = true;
        this._noShareNotes = value;
      }
    }

    public bool NoEmailNotes
    {
      get
      {
        return _noEmailNotes;
      }
      set
      {
        __isset.noEmailNotes = true;
        this._noEmailNotes = value;
      }
    }

    public bool NoSendMessageToRecipients
    {
      get
      {
        return _noSendMessageToRecipients;
      }
      set
      {
        __isset.noSendMessageToRecipients = true;
        this._noSendMessageToRecipients = value;
      }
    }

    public bool NoUpdateNotebook
    {
      get
      {
        return _noUpdateNotebook;
      }
      set
      {
        __isset.noUpdateNotebook = true;
        this._noUpdateNotebook = value;
      }
    }

    public bool NoExpungeNotebook
    {
      get
      {
        return _noExpungeNotebook;
      }
      set
      {
        __isset.noExpungeNotebook = true;
        this._noExpungeNotebook = value;
      }
    }

    public bool NoSetDefaultNotebook
    {
      get
      {
        return _noSetDefaultNotebook;
      }
      set
      {
        __isset.noSetDefaultNotebook = true;
        this._noSetDefaultNotebook = value;
      }
    }

    public bool NoSetNotebookStack
    {
      get
      {
        return _noSetNotebookStack;
      }
      set
      {
        __isset.noSetNotebookStack = true;
        this._noSetNotebookStack = value;
      }
    }

    public bool NoPublishToPublic
    {
      get
      {
        return _noPublishToPublic;
      }
      set
      {
        __isset.noPublishToPublic = true;
        this._noPublishToPublic = value;
      }
    }

    public bool NoPublishToBusinessLibrary
    {
      get
      {
        return _noPublishToBusinessLibrary;
      }
      set
      {
        __isset.noPublishToBusinessLibrary = true;
        this._noPublishToBusinessLibrary = value;
      }
    }

    public bool NoCreateTags
    {
      get
      {
        return _noCreateTags;
      }
      set
      {
        __isset.noCreateTags = true;
        this._noCreateTags = value;
      }
    }

    public bool NoUpdateTags
    {
      get
      {
        return _noUpdateTags;
      }
      set
      {
        __isset.noUpdateTags = true;
        this._noUpdateTags = value;
      }
    }

    public bool NoExpungeTags
    {
      get
      {
        return _noExpungeTags;
      }
      set
      {
        __isset.noExpungeTags = true;
        this._noExpungeTags = value;
      }
    }

    public bool NoSetParentTag
    {
      get
      {
        return _noSetParentTag;
      }
      set
      {
        __isset.noSetParentTag = true;
        this._noSetParentTag = value;
      }
    }

    public bool NoCreateSharedNotebooks
    {
      get
      {
        return _noCreateSharedNotebooks;
      }
      set
      {
        __isset.noCreateSharedNotebooks = true;
        this._noCreateSharedNotebooks = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions UpdateWhichSharedNotebookRestrictions
    {
      get
      {
        return _updateWhichSharedNotebookRestrictions;
      }
      set
      {
        __isset.updateWhichSharedNotebookRestrictions = true;
        this._updateWhichSharedNotebookRestrictions = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions"/>
    /// </summary>
    public global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions ExpungeWhichSharedNotebookRestrictions
    {
      get
      {
        return _expungeWhichSharedNotebookRestrictions;
      }
      set
      {
        __isset.expungeWhichSharedNotebookRestrictions = true;
        this._expungeWhichSharedNotebookRestrictions = value;
      }
    }

    public bool NoShareNotesWithBusiness
    {
      get
      {
        return _noShareNotesWithBusiness;
      }
      set
      {
        __isset.noShareNotesWithBusiness = true;
        this._noShareNotesWithBusiness = value;
      }
    }

    public bool NoRenameNotebook
    {
      get
      {
        return _noRenameNotebook;
      }
      set
      {
        __isset.noRenameNotebook = true;
        this._noRenameNotebook = value;
      }
    }

    public bool NoSetInMyList
    {
      get
      {
        return _noSetInMyList;
      }
      set
      {
        __isset.noSetInMyList = true;
        this._noSetInMyList = value;
      }
    }

    public bool NoChangeContact
    {
      get
      {
        return _noChangeContact;
      }
      set
      {
        __isset.noChangeContact = true;
        this._noChangeContact = value;
      }
    }

    public global::Evernote.EDAM.Type.CanMoveToContainerRestrictions CanMoveToContainerRestrictions
    {
      get
      {
        return _canMoveToContainerRestrictions;
      }
      set
      {
        __isset.canMoveToContainerRestrictions = true;
        this._canMoveToContainerRestrictions = value;
      }
    }

    public bool NoSetReminderNotifyEmail
    {
      get
      {
        return _noSetReminderNotifyEmail;
      }
      set
      {
        __isset.noSetReminderNotifyEmail = true;
        this._noSetReminderNotifyEmail = value;
      }
    }

    public bool NoSetReminderNotifyInApp
    {
      get
      {
        return _noSetReminderNotifyInApp;
      }
      set
      {
        __isset.noSetReminderNotifyInApp = true;
        this._noSetReminderNotifyInApp = value;
      }
    }

    public bool NoSetRecipientSettingsStack
    {
      get
      {
        return _noSetRecipientSettingsStack;
      }
      set
      {
        __isset.noSetRecipientSettingsStack = true;
        this._noSetRecipientSettingsStack = value;
      }
    }

    public bool NoCanMoveNote
    {
      get
      {
        return _noCanMoveNote;
      }
      set
      {
        __isset.noCanMoveNote = true;
        this._noCanMoveNote = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool noReadNotes;
      public bool noCreateNotes;
      public bool noUpdateNotes;
      public bool noExpungeNotes;
      public bool noShareNotes;
      public bool noEmailNotes;
      public bool noSendMessageToRecipients;
      public bool noUpdateNotebook;
      public bool noExpungeNotebook;
      public bool noSetDefaultNotebook;
      public bool noSetNotebookStack;
      public bool noPublishToPublic;
      public bool noPublishToBusinessLibrary;
      public bool noCreateTags;
      public bool noUpdateTags;
      public bool noExpungeTags;
      public bool noSetParentTag;
      public bool noCreateSharedNotebooks;
      public bool updateWhichSharedNotebookRestrictions;
      public bool expungeWhichSharedNotebookRestrictions;
      public bool noShareNotesWithBusiness;
      public bool noRenameNotebook;
      public bool noSetInMyList;
      public bool noChangeContact;
      public bool canMoveToContainerRestrictions;
      public bool noSetReminderNotifyEmail;
      public bool noSetReminderNotifyInApp;
      public bool noSetRecipientSettingsStack;
      public bool noCanMoveNote;
    }

    public NotebookRestrictions()
    {
    }

    public NotebookRestrictions DeepCopy()
    {
      var tmp168 = new NotebookRestrictions();
      if(__isset.noReadNotes)
      {
        tmp168.NoReadNotes = this.NoReadNotes;
      }
      tmp168.__isset.noReadNotes = this.__isset.noReadNotes;
      if(__isset.noCreateNotes)
      {
        tmp168.NoCreateNotes = this.NoCreateNotes;
      }
      tmp168.__isset.noCreateNotes = this.__isset.noCreateNotes;
      if(__isset.noUpdateNotes)
      {
        tmp168.NoUpdateNotes = this.NoUpdateNotes;
      }
      tmp168.__isset.noUpdateNotes = this.__isset.noUpdateNotes;
      if(__isset.noExpungeNotes)
      {
        tmp168.NoExpungeNotes = this.NoExpungeNotes;
      }
      tmp168.__isset.noExpungeNotes = this.__isset.noExpungeNotes;
      if(__isset.noShareNotes)
      {
        tmp168.NoShareNotes = this.NoShareNotes;
      }
      tmp168.__isset.noShareNotes = this.__isset.noShareNotes;
      if(__isset.noEmailNotes)
      {
        tmp168.NoEmailNotes = this.NoEmailNotes;
      }
      tmp168.__isset.noEmailNotes = this.__isset.noEmailNotes;
      if(__isset.noSendMessageToRecipients)
      {
        tmp168.NoSendMessageToRecipients = this.NoSendMessageToRecipients;
      }
      tmp168.__isset.noSendMessageToRecipients = this.__isset.noSendMessageToRecipients;
      if(__isset.noUpdateNotebook)
      {
        tmp168.NoUpdateNotebook = this.NoUpdateNotebook;
      }
      tmp168.__isset.noUpdateNotebook = this.__isset.noUpdateNotebook;
      if(__isset.noExpungeNotebook)
      {
        tmp168.NoExpungeNotebook = this.NoExpungeNotebook;
      }
      tmp168.__isset.noExpungeNotebook = this.__isset.noExpungeNotebook;
      if(__isset.noSetDefaultNotebook)
      {
        tmp168.NoSetDefaultNotebook = this.NoSetDefaultNotebook;
      }
      tmp168.__isset.noSetDefaultNotebook = this.__isset.noSetDefaultNotebook;
      if(__isset.noSetNotebookStack)
      {
        tmp168.NoSetNotebookStack = this.NoSetNotebookStack;
      }
      tmp168.__isset.noSetNotebookStack = this.__isset.noSetNotebookStack;
      if(__isset.noPublishToPublic)
      {
        tmp168.NoPublishToPublic = this.NoPublishToPublic;
      }
      tmp168.__isset.noPublishToPublic = this.__isset.noPublishToPublic;
      if(__isset.noPublishToBusinessLibrary)
      {
        tmp168.NoPublishToBusinessLibrary = this.NoPublishToBusinessLibrary;
      }
      tmp168.__isset.noPublishToBusinessLibrary = this.__isset.noPublishToBusinessLibrary;
      if(__isset.noCreateTags)
      {
        tmp168.NoCreateTags = this.NoCreateTags;
      }
      tmp168.__isset.noCreateTags = this.__isset.noCreateTags;
      if(__isset.noUpdateTags)
      {
        tmp168.NoUpdateTags = this.NoUpdateTags;
      }
      tmp168.__isset.noUpdateTags = this.__isset.noUpdateTags;
      if(__isset.noExpungeTags)
      {
        tmp168.NoExpungeTags = this.NoExpungeTags;
      }
      tmp168.__isset.noExpungeTags = this.__isset.noExpungeTags;
      if(__isset.noSetParentTag)
      {
        tmp168.NoSetParentTag = this.NoSetParentTag;
      }
      tmp168.__isset.noSetParentTag = this.__isset.noSetParentTag;
      if(__isset.noCreateSharedNotebooks)
      {
        tmp168.NoCreateSharedNotebooks = this.NoCreateSharedNotebooks;
      }
      tmp168.__isset.noCreateSharedNotebooks = this.__isset.noCreateSharedNotebooks;
      if(__isset.updateWhichSharedNotebookRestrictions)
      {
        tmp168.UpdateWhichSharedNotebookRestrictions = this.UpdateWhichSharedNotebookRestrictions;
      }
      tmp168.__isset.updateWhichSharedNotebookRestrictions = this.__isset.updateWhichSharedNotebookRestrictions;
      if(__isset.expungeWhichSharedNotebookRestrictions)
      {
        tmp168.ExpungeWhichSharedNotebookRestrictions = this.ExpungeWhichSharedNotebookRestrictions;
      }
      tmp168.__isset.expungeWhichSharedNotebookRestrictions = this.__isset.expungeWhichSharedNotebookRestrictions;
      if(__isset.noShareNotesWithBusiness)
      {
        tmp168.NoShareNotesWithBusiness = this.NoShareNotesWithBusiness;
      }
      tmp168.__isset.noShareNotesWithBusiness = this.__isset.noShareNotesWithBusiness;
      if(__isset.noRenameNotebook)
      {
        tmp168.NoRenameNotebook = this.NoRenameNotebook;
      }
      tmp168.__isset.noRenameNotebook = this.__isset.noRenameNotebook;
      if(__isset.noSetInMyList)
      {
        tmp168.NoSetInMyList = this.NoSetInMyList;
      }
      tmp168.__isset.noSetInMyList = this.__isset.noSetInMyList;
      if(__isset.noChangeContact)
      {
        tmp168.NoChangeContact = this.NoChangeContact;
      }
      tmp168.__isset.noChangeContact = this.__isset.noChangeContact;
      if((CanMoveToContainerRestrictions != null) && __isset.canMoveToContainerRestrictions)
      {
        tmp168.CanMoveToContainerRestrictions = (global::Evernote.EDAM.Type.CanMoveToContainerRestrictions)this.CanMoveToContainerRestrictions.DeepCopy();
      }
      tmp168.__isset.canMoveToContainerRestrictions = this.__isset.canMoveToContainerRestrictions;
      if(__isset.noSetReminderNotifyEmail)
      {
        tmp168.NoSetReminderNotifyEmail = this.NoSetReminderNotifyEmail;
      }
      tmp168.__isset.noSetReminderNotifyEmail = this.__isset.noSetReminderNotifyEmail;
      if(__isset.noSetReminderNotifyInApp)
      {
        tmp168.NoSetReminderNotifyInApp = this.NoSetReminderNotifyInApp;
      }
      tmp168.__isset.noSetReminderNotifyInApp = this.__isset.noSetReminderNotifyInApp;
      if(__isset.noSetRecipientSettingsStack)
      {
        tmp168.NoSetRecipientSettingsStack = this.NoSetRecipientSettingsStack;
      }
      tmp168.__isset.noSetRecipientSettingsStack = this.__isset.noSetRecipientSettingsStack;
      if(__isset.noCanMoveNote)
      {
        tmp168.NoCanMoveNote = this.NoCanMoveNote;
      }
      tmp168.__isset.noCanMoveNote = this.__isset.noCanMoveNote;
      return tmp168;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                NoReadNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                NoCreateNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                NoUpdateNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                NoExpungeNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                NoShareNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                NoEmailNotes = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                NoSendMessageToRecipients = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Bool)
              {
                NoUpdateNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                NoExpungeNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Bool)
              {
                NoSetDefaultNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Bool)
              {
                NoSetNotebookStack = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Bool)
              {
                NoPublishToPublic = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Bool)
              {
                NoPublishToBusinessLibrary = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Bool)
              {
                NoCreateTags = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Bool)
              {
                NoUpdateTags = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Bool)
              {
                NoExpungeTags = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Bool)
              {
                NoSetParentTag = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.Bool)
              {
                NoCreateSharedNotebooks = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.I32)
              {
                UpdateWhichSharedNotebookRestrictions = (global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.I32)
              {
                ExpungeWhichSharedNotebookRestrictions = (global::Evernote.EDAM.Type.SharedNotebookInstanceRestrictions)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.Bool)
              {
                NoShareNotesWithBusiness = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.Bool)
              {
                NoRenameNotebook = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.Bool)
              {
                NoSetInMyList = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.Bool)
              {
                NoChangeContact = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.Struct)
              {
                CanMoveToContainerRestrictions = new global::Evernote.EDAM.Type.CanMoveToContainerRestrictions();
                await CanMoveToContainerRestrictions.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 27:
              if (field.Type == TType.Bool)
              {
                NoSetReminderNotifyEmail = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.Bool)
              {
                NoSetReminderNotifyInApp = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.Bool)
              {
                NoSetRecipientSettingsStack = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.Bool)
              {
                NoCanMoveNote = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp169 = new TStruct("NotebookRestrictions");
        await oprot.WriteStructBeginAsync(tmp169, cancellationToken);
        var tmp170 = new TField();
        if(__isset.noReadNotes)
        {
          tmp170.Name = "noReadNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoReadNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noCreateNotes)
        {
          tmp170.Name = "noCreateNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoCreateNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noUpdateNotes)
        {
          tmp170.Name = "noUpdateNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoUpdateNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noExpungeNotes)
        {
          tmp170.Name = "noExpungeNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoExpungeNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noShareNotes)
        {
          tmp170.Name = "noShareNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoShareNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noEmailNotes)
        {
          tmp170.Name = "noEmailNotes";
          tmp170.Type = TType.Bool;
          tmp170.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoEmailNotes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSendMessageToRecipients)
        {
          tmp170.Name = "noSendMessageToRecipients";
          tmp170.Type = TType.Bool;
          tmp170.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSendMessageToRecipients, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noUpdateNotebook)
        {
          tmp170.Name = "noUpdateNotebook";
          tmp170.Type = TType.Bool;
          tmp170.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoUpdateNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noExpungeNotebook)
        {
          tmp170.Name = "noExpungeNotebook";
          tmp170.Type = TType.Bool;
          tmp170.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoExpungeNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetDefaultNotebook)
        {
          tmp170.Name = "noSetDefaultNotebook";
          tmp170.Type = TType.Bool;
          tmp170.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetDefaultNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetNotebookStack)
        {
          tmp170.Name = "noSetNotebookStack";
          tmp170.Type = TType.Bool;
          tmp170.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetNotebookStack, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noPublishToPublic)
        {
          tmp170.Name = "noPublishToPublic";
          tmp170.Type = TType.Bool;
          tmp170.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoPublishToPublic, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noPublishToBusinessLibrary)
        {
          tmp170.Name = "noPublishToBusinessLibrary";
          tmp170.Type = TType.Bool;
          tmp170.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoPublishToBusinessLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noCreateTags)
        {
          tmp170.Name = "noCreateTags";
          tmp170.Type = TType.Bool;
          tmp170.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoCreateTags, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noUpdateTags)
        {
          tmp170.Name = "noUpdateTags";
          tmp170.Type = TType.Bool;
          tmp170.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoUpdateTags, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noExpungeTags)
        {
          tmp170.Name = "noExpungeTags";
          tmp170.Type = TType.Bool;
          tmp170.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoExpungeTags, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetParentTag)
        {
          tmp170.Name = "noSetParentTag";
          tmp170.Type = TType.Bool;
          tmp170.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetParentTag, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noCreateSharedNotebooks)
        {
          tmp170.Name = "noCreateSharedNotebooks";
          tmp170.Type = TType.Bool;
          tmp170.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoCreateSharedNotebooks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateWhichSharedNotebookRestrictions)
        {
          tmp170.Name = "updateWhichSharedNotebookRestrictions";
          tmp170.Type = TType.I32;
          tmp170.ID = 19;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteI32Async((int)UpdateWhichSharedNotebookRestrictions, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.expungeWhichSharedNotebookRestrictions)
        {
          tmp170.Name = "expungeWhichSharedNotebookRestrictions";
          tmp170.Type = TType.I32;
          tmp170.ID = 20;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteI32Async((int)ExpungeWhichSharedNotebookRestrictions, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noShareNotesWithBusiness)
        {
          tmp170.Name = "noShareNotesWithBusiness";
          tmp170.Type = TType.Bool;
          tmp170.ID = 21;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoShareNotesWithBusiness, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noRenameNotebook)
        {
          tmp170.Name = "noRenameNotebook";
          tmp170.Type = TType.Bool;
          tmp170.ID = 22;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoRenameNotebook, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetInMyList)
        {
          tmp170.Name = "noSetInMyList";
          tmp170.Type = TType.Bool;
          tmp170.ID = 23;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetInMyList, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noChangeContact)
        {
          tmp170.Name = "noChangeContact";
          tmp170.Type = TType.Bool;
          tmp170.ID = 24;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoChangeContact, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CanMoveToContainerRestrictions != null) && __isset.canMoveToContainerRestrictions)
        {
          tmp170.Name = "canMoveToContainerRestrictions";
          tmp170.Type = TType.Struct;
          tmp170.ID = 26;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await CanMoveToContainerRestrictions.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetReminderNotifyEmail)
        {
          tmp170.Name = "noSetReminderNotifyEmail";
          tmp170.Type = TType.Bool;
          tmp170.ID = 27;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetReminderNotifyEmail, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetReminderNotifyInApp)
        {
          tmp170.Name = "noSetReminderNotifyInApp";
          tmp170.Type = TType.Bool;
          tmp170.ID = 28;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetReminderNotifyInApp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noSetRecipientSettingsStack)
        {
          tmp170.Name = "noSetRecipientSettingsStack";
          tmp170.Type = TType.Bool;
          tmp170.ID = 29;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoSetRecipientSettingsStack, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noCanMoveNote)
        {
          tmp170.Name = "noCanMoveNote";
          tmp170.Type = TType.Bool;
          tmp170.ID = 30;
          await oprot.WriteFieldBeginAsync(tmp170, cancellationToken);
          await oprot.WriteBoolAsync(NoCanMoveNote, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NotebookRestrictions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.noReadNotes == other.__isset.noReadNotes) && ((!__isset.noReadNotes) || (global::System.Object.Equals(NoReadNotes, other.NoReadNotes))))
        && ((__isset.noCreateNotes == other.__isset.noCreateNotes) && ((!__isset.noCreateNotes) || (global::System.Object.Equals(NoCreateNotes, other.NoCreateNotes))))
        && ((__isset.noUpdateNotes == other.__isset.noUpdateNotes) && ((!__isset.noUpdateNotes) || (global::System.Object.Equals(NoUpdateNotes, other.NoUpdateNotes))))
        && ((__isset.noExpungeNotes == other.__isset.noExpungeNotes) && ((!__isset.noExpungeNotes) || (global::System.Object.Equals(NoExpungeNotes, other.NoExpungeNotes))))
        && ((__isset.noShareNotes == other.__isset.noShareNotes) && ((!__isset.noShareNotes) || (global::System.Object.Equals(NoShareNotes, other.NoShareNotes))))
        && ((__isset.noEmailNotes == other.__isset.noEmailNotes) && ((!__isset.noEmailNotes) || (global::System.Object.Equals(NoEmailNotes, other.NoEmailNotes))))
        && ((__isset.noSendMessageToRecipients == other.__isset.noSendMessageToRecipients) && ((!__isset.noSendMessageToRecipients) || (global::System.Object.Equals(NoSendMessageToRecipients, other.NoSendMessageToRecipients))))
        && ((__isset.noUpdateNotebook == other.__isset.noUpdateNotebook) && ((!__isset.noUpdateNotebook) || (global::System.Object.Equals(NoUpdateNotebook, other.NoUpdateNotebook))))
        && ((__isset.noExpungeNotebook == other.__isset.noExpungeNotebook) && ((!__isset.noExpungeNotebook) || (global::System.Object.Equals(NoExpungeNotebook, other.NoExpungeNotebook))))
        && ((__isset.noSetDefaultNotebook == other.__isset.noSetDefaultNotebook) && ((!__isset.noSetDefaultNotebook) || (global::System.Object.Equals(NoSetDefaultNotebook, other.NoSetDefaultNotebook))))
        && ((__isset.noSetNotebookStack == other.__isset.noSetNotebookStack) && ((!__isset.noSetNotebookStack) || (global::System.Object.Equals(NoSetNotebookStack, other.NoSetNotebookStack))))
        && ((__isset.noPublishToPublic == other.__isset.noPublishToPublic) && ((!__isset.noPublishToPublic) || (global::System.Object.Equals(NoPublishToPublic, other.NoPublishToPublic))))
        && ((__isset.noPublishToBusinessLibrary == other.__isset.noPublishToBusinessLibrary) && ((!__isset.noPublishToBusinessLibrary) || (global::System.Object.Equals(NoPublishToBusinessLibrary, other.NoPublishToBusinessLibrary))))
        && ((__isset.noCreateTags == other.__isset.noCreateTags) && ((!__isset.noCreateTags) || (global::System.Object.Equals(NoCreateTags, other.NoCreateTags))))
        && ((__isset.noUpdateTags == other.__isset.noUpdateTags) && ((!__isset.noUpdateTags) || (global::System.Object.Equals(NoUpdateTags, other.NoUpdateTags))))
        && ((__isset.noExpungeTags == other.__isset.noExpungeTags) && ((!__isset.noExpungeTags) || (global::System.Object.Equals(NoExpungeTags, other.NoExpungeTags))))
        && ((__isset.noSetParentTag == other.__isset.noSetParentTag) && ((!__isset.noSetParentTag) || (global::System.Object.Equals(NoSetParentTag, other.NoSetParentTag))))
        && ((__isset.noCreateSharedNotebooks == other.__isset.noCreateSharedNotebooks) && ((!__isset.noCreateSharedNotebooks) || (global::System.Object.Equals(NoCreateSharedNotebooks, other.NoCreateSharedNotebooks))))
        && ((__isset.updateWhichSharedNotebookRestrictions == other.__isset.updateWhichSharedNotebookRestrictions) && ((!__isset.updateWhichSharedNotebookRestrictions) || (global::System.Object.Equals(UpdateWhichSharedNotebookRestrictions, other.UpdateWhichSharedNotebookRestrictions))))
        && ((__isset.expungeWhichSharedNotebookRestrictions == other.__isset.expungeWhichSharedNotebookRestrictions) && ((!__isset.expungeWhichSharedNotebookRestrictions) || (global::System.Object.Equals(ExpungeWhichSharedNotebookRestrictions, other.ExpungeWhichSharedNotebookRestrictions))))
        && ((__isset.noShareNotesWithBusiness == other.__isset.noShareNotesWithBusiness) && ((!__isset.noShareNotesWithBusiness) || (global::System.Object.Equals(NoShareNotesWithBusiness, other.NoShareNotesWithBusiness))))
        && ((__isset.noRenameNotebook == other.__isset.noRenameNotebook) && ((!__isset.noRenameNotebook) || (global::System.Object.Equals(NoRenameNotebook, other.NoRenameNotebook))))
        && ((__isset.noSetInMyList == other.__isset.noSetInMyList) && ((!__isset.noSetInMyList) || (global::System.Object.Equals(NoSetInMyList, other.NoSetInMyList))))
        && ((__isset.noChangeContact == other.__isset.noChangeContact) && ((!__isset.noChangeContact) || (global::System.Object.Equals(NoChangeContact, other.NoChangeContact))))
        && ((__isset.canMoveToContainerRestrictions == other.__isset.canMoveToContainerRestrictions) && ((!__isset.canMoveToContainerRestrictions) || (global::System.Object.Equals(CanMoveToContainerRestrictions, other.CanMoveToContainerRestrictions))))
        && ((__isset.noSetReminderNotifyEmail == other.__isset.noSetReminderNotifyEmail) && ((!__isset.noSetReminderNotifyEmail) || (global::System.Object.Equals(NoSetReminderNotifyEmail, other.NoSetReminderNotifyEmail))))
        && ((__isset.noSetReminderNotifyInApp == other.__isset.noSetReminderNotifyInApp) && ((!__isset.noSetReminderNotifyInApp) || (global::System.Object.Equals(NoSetReminderNotifyInApp, other.NoSetReminderNotifyInApp))))
        && ((__isset.noSetRecipientSettingsStack == other.__isset.noSetRecipientSettingsStack) && ((!__isset.noSetRecipientSettingsStack) || (global::System.Object.Equals(NoSetRecipientSettingsStack, other.NoSetRecipientSettingsStack))))
        && ((__isset.noCanMoveNote == other.__isset.noCanMoveNote) && ((!__isset.noCanMoveNote) || (global::System.Object.Equals(NoCanMoveNote, other.NoCanMoveNote))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.noReadNotes)
        {
          hashcode = (hashcode * 397) + NoReadNotes.GetHashCode();
        }
        if(__isset.noCreateNotes)
        {
          hashcode = (hashcode * 397) + NoCreateNotes.GetHashCode();
        }
        if(__isset.noUpdateNotes)
        {
          hashcode = (hashcode * 397) + NoUpdateNotes.GetHashCode();
        }
        if(__isset.noExpungeNotes)
        {
          hashcode = (hashcode * 397) + NoExpungeNotes.GetHashCode();
        }
        if(__isset.noShareNotes)
        {
          hashcode = (hashcode * 397) + NoShareNotes.GetHashCode();
        }
        if(__isset.noEmailNotes)
        {
          hashcode = (hashcode * 397) + NoEmailNotes.GetHashCode();
        }
        if(__isset.noSendMessageToRecipients)
        {
          hashcode = (hashcode * 397) + NoSendMessageToRecipients.GetHashCode();
        }
        if(__isset.noUpdateNotebook)
        {
          hashcode = (hashcode * 397) + NoUpdateNotebook.GetHashCode();
        }
        if(__isset.noExpungeNotebook)
        {
          hashcode = (hashcode * 397) + NoExpungeNotebook.GetHashCode();
        }
        if(__isset.noSetDefaultNotebook)
        {
          hashcode = (hashcode * 397) + NoSetDefaultNotebook.GetHashCode();
        }
        if(__isset.noSetNotebookStack)
        {
          hashcode = (hashcode * 397) + NoSetNotebookStack.GetHashCode();
        }
        if(__isset.noPublishToPublic)
        {
          hashcode = (hashcode * 397) + NoPublishToPublic.GetHashCode();
        }
        if(__isset.noPublishToBusinessLibrary)
        {
          hashcode = (hashcode * 397) + NoPublishToBusinessLibrary.GetHashCode();
        }
        if(__isset.noCreateTags)
        {
          hashcode = (hashcode * 397) + NoCreateTags.GetHashCode();
        }
        if(__isset.noUpdateTags)
        {
          hashcode = (hashcode * 397) + NoUpdateTags.GetHashCode();
        }
        if(__isset.noExpungeTags)
        {
          hashcode = (hashcode * 397) + NoExpungeTags.GetHashCode();
        }
        if(__isset.noSetParentTag)
        {
          hashcode = (hashcode * 397) + NoSetParentTag.GetHashCode();
        }
        if(__isset.noCreateSharedNotebooks)
        {
          hashcode = (hashcode * 397) + NoCreateSharedNotebooks.GetHashCode();
        }
        if(__isset.updateWhichSharedNotebookRestrictions)
        {
          hashcode = (hashcode * 397) + UpdateWhichSharedNotebookRestrictions.GetHashCode();
        }
        if(__isset.expungeWhichSharedNotebookRestrictions)
        {
          hashcode = (hashcode * 397) + ExpungeWhichSharedNotebookRestrictions.GetHashCode();
        }
        if(__isset.noShareNotesWithBusiness)
        {
          hashcode = (hashcode * 397) + NoShareNotesWithBusiness.GetHashCode();
        }
        if(__isset.noRenameNotebook)
        {
          hashcode = (hashcode * 397) + NoRenameNotebook.GetHashCode();
        }
        if(__isset.noSetInMyList)
        {
          hashcode = (hashcode * 397) + NoSetInMyList.GetHashCode();
        }
        if(__isset.noChangeContact)
        {
          hashcode = (hashcode * 397) + NoChangeContact.GetHashCode();
        }
        if((CanMoveToContainerRestrictions != null) && __isset.canMoveToContainerRestrictions)
        {
          hashcode = (hashcode * 397) + CanMoveToContainerRestrictions.GetHashCode();
        }
        if(__isset.noSetReminderNotifyEmail)
        {
          hashcode = (hashcode * 397) + NoSetReminderNotifyEmail.GetHashCode();
        }
        if(__isset.noSetReminderNotifyInApp)
        {
          hashcode = (hashcode * 397) + NoSetReminderNotifyInApp.GetHashCode();
        }
        if(__isset.noSetRecipientSettingsStack)
        {
          hashcode = (hashcode * 397) + NoSetRecipientSettingsStack.GetHashCode();
        }
        if(__isset.noCanMoveNote)
        {
          hashcode = (hashcode * 397) + NoCanMoveNote.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp171 = new StringBuilder("NotebookRestrictions(");
      int tmp172 = 0;
      if(__isset.noReadNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoReadNotes: ");
        NoReadNotes.ToString(tmp171);
      }
      if(__isset.noCreateNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoCreateNotes: ");
        NoCreateNotes.ToString(tmp171);
      }
      if(__isset.noUpdateNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoUpdateNotes: ");
        NoUpdateNotes.ToString(tmp171);
      }
      if(__isset.noExpungeNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoExpungeNotes: ");
        NoExpungeNotes.ToString(tmp171);
      }
      if(__isset.noShareNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoShareNotes: ");
        NoShareNotes.ToString(tmp171);
      }
      if(__isset.noEmailNotes)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoEmailNotes: ");
        NoEmailNotes.ToString(tmp171);
      }
      if(__isset.noSendMessageToRecipients)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSendMessageToRecipients: ");
        NoSendMessageToRecipients.ToString(tmp171);
      }
      if(__isset.noUpdateNotebook)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoUpdateNotebook: ");
        NoUpdateNotebook.ToString(tmp171);
      }
      if(__isset.noExpungeNotebook)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoExpungeNotebook: ");
        NoExpungeNotebook.ToString(tmp171);
      }
      if(__isset.noSetDefaultNotebook)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetDefaultNotebook: ");
        NoSetDefaultNotebook.ToString(tmp171);
      }
      if(__isset.noSetNotebookStack)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetNotebookStack: ");
        NoSetNotebookStack.ToString(tmp171);
      }
      if(__isset.noPublishToPublic)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoPublishToPublic: ");
        NoPublishToPublic.ToString(tmp171);
      }
      if(__isset.noPublishToBusinessLibrary)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoPublishToBusinessLibrary: ");
        NoPublishToBusinessLibrary.ToString(tmp171);
      }
      if(__isset.noCreateTags)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoCreateTags: ");
        NoCreateTags.ToString(tmp171);
      }
      if(__isset.noUpdateTags)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoUpdateTags: ");
        NoUpdateTags.ToString(tmp171);
      }
      if(__isset.noExpungeTags)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoExpungeTags: ");
        NoExpungeTags.ToString(tmp171);
      }
      if(__isset.noSetParentTag)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetParentTag: ");
        NoSetParentTag.ToString(tmp171);
      }
      if(__isset.noCreateSharedNotebooks)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoCreateSharedNotebooks: ");
        NoCreateSharedNotebooks.ToString(tmp171);
      }
      if(__isset.updateWhichSharedNotebookRestrictions)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("UpdateWhichSharedNotebookRestrictions: ");
        UpdateWhichSharedNotebookRestrictions.ToString(tmp171);
      }
      if(__isset.expungeWhichSharedNotebookRestrictions)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("ExpungeWhichSharedNotebookRestrictions: ");
        ExpungeWhichSharedNotebookRestrictions.ToString(tmp171);
      }
      if(__isset.noShareNotesWithBusiness)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoShareNotesWithBusiness: ");
        NoShareNotesWithBusiness.ToString(tmp171);
      }
      if(__isset.noRenameNotebook)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoRenameNotebook: ");
        NoRenameNotebook.ToString(tmp171);
      }
      if(__isset.noSetInMyList)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetInMyList: ");
        NoSetInMyList.ToString(tmp171);
      }
      if(__isset.noChangeContact)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoChangeContact: ");
        NoChangeContact.ToString(tmp171);
      }
      if((CanMoveToContainerRestrictions != null) && __isset.canMoveToContainerRestrictions)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("CanMoveToContainerRestrictions: ");
        CanMoveToContainerRestrictions.ToString(tmp171);
      }
      if(__isset.noSetReminderNotifyEmail)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetReminderNotifyEmail: ");
        NoSetReminderNotifyEmail.ToString(tmp171);
      }
      if(__isset.noSetReminderNotifyInApp)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetReminderNotifyInApp: ");
        NoSetReminderNotifyInApp.ToString(tmp171);
      }
      if(__isset.noSetRecipientSettingsStack)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoSetRecipientSettingsStack: ");
        NoSetRecipientSettingsStack.ToString(tmp171);
      }
      if(__isset.noCanMoveNote)
      {
        if(0 < tmp172++) { tmp171.Append(", "); }
        tmp171.Append("NoCanMoveNote: ");
        NoCanMoveNote.ToString(tmp171);
      }
      tmp171.Append(')');
      return tmp171.ToString();
    }
  }

}

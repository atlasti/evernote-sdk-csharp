/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  This structure is used to provide account limits that are in effect for this user.
  /// <dl>
  ///  <dt>userMailLimitDaily</dt>
  ///    <dd>The number of emails of any type that can be sent by a user from the
  ///        service per day.  If an email is sent to two different recipients, this
  ///        counts as two emails.
  ///    </dd>
  ///  <dt>noteSizeMax</dt>
  ///    <dd>Maximum total size of a Note that can be added.  The size of a note is
  ///        calculated as:
  ///        ENML content length (in Unicode characters) plus the sum of all resource
  ///        sizes (in bytes).
  ///    </dd>
  ///  <dt>resourceSizeMax</dt>
  ///    <dd>Maximum size of a resource, in bytes
  ///    </dd>
  ///  <dt>userLinkedNotebookMax</dt>
  ///    <dd>Maximum number of linked notebooks per account.
  ///    </dd>
  ///  <dt>uploadLimit</dt>
  ///    <dd>The number of bytes that can be uploaded to the account
  ///    in the current month.  For new notes that are created, this is the length
  ///    of the note content (in Unicode characters) plus the size of each resource
  ///    (in bytes).  For edited notes, this is the the difference between the old
  ///    length and the new length (if this is greater than 0) plus the size of
  ///    each new resource.
  ///    </dd>
  ///  <dt>userNoteCountMax</dt>
  ///    <dd>Maximum number of Notes per user</dd>
  ///  <dt>userNotebookCountMax</dt>
  ///    <dd>Maximum number of Notebooks per user</dd>
  ///  <dt>userTagCountMax</dt>
  ///    <dd>Maximum number of Tags per account</dd>
  ///  <dt>noteTagCountMax</dt>
  ///    <dd>Maximum number of Tags per Note</dd>
  ///  <dt>userSavedSearchesMax</dt>
  ///    <dd>Maximum number of SavedSearches per account</dd>
  ///  <dt>noteResourceCountMax</dt>
  ///    <dd>The maximum number of Resources per Note</dd>
  ///  </dl>
  /// </summary>
  public partial class AccountLimits : TBase
  {
    private int _userMailLimitDaily;
    private long _noteSizeMax;
    private long _resourceSizeMax;
    private int _userLinkedNotebookMax;
    private long _uploadLimit;
    private int _userNoteCountMax;
    private int _userNotebookCountMax;
    private int _userTagCountMax;
    private int _noteTagCountMax;
    private int _userSavedSearchesMax;
    private int _noteResourceCountMax;

    public int UserMailLimitDaily
    {
      get
      {
        return _userMailLimitDaily;
      }
      set
      {
        __isset.userMailLimitDaily = true;
        this._userMailLimitDaily = value;
      }
    }

    public long NoteSizeMax
    {
      get
      {
        return _noteSizeMax;
      }
      set
      {
        __isset.noteSizeMax = true;
        this._noteSizeMax = value;
      }
    }

    public long ResourceSizeMax
    {
      get
      {
        return _resourceSizeMax;
      }
      set
      {
        __isset.resourceSizeMax = true;
        this._resourceSizeMax = value;
      }
    }

    public int UserLinkedNotebookMax
    {
      get
      {
        return _userLinkedNotebookMax;
      }
      set
      {
        __isset.userLinkedNotebookMax = true;
        this._userLinkedNotebookMax = value;
      }
    }

    public long UploadLimit
    {
      get
      {
        return _uploadLimit;
      }
      set
      {
        __isset.uploadLimit = true;
        this._uploadLimit = value;
      }
    }

    public int UserNoteCountMax
    {
      get
      {
        return _userNoteCountMax;
      }
      set
      {
        __isset.userNoteCountMax = true;
        this._userNoteCountMax = value;
      }
    }

    public int UserNotebookCountMax
    {
      get
      {
        return _userNotebookCountMax;
      }
      set
      {
        __isset.userNotebookCountMax = true;
        this._userNotebookCountMax = value;
      }
    }

    public int UserTagCountMax
    {
      get
      {
        return _userTagCountMax;
      }
      set
      {
        __isset.userTagCountMax = true;
        this._userTagCountMax = value;
      }
    }

    public int NoteTagCountMax
    {
      get
      {
        return _noteTagCountMax;
      }
      set
      {
        __isset.noteTagCountMax = true;
        this._noteTagCountMax = value;
      }
    }

    public int UserSavedSearchesMax
    {
      get
      {
        return _userSavedSearchesMax;
      }
      set
      {
        __isset.userSavedSearchesMax = true;
        this._userSavedSearchesMax = value;
      }
    }

    public int NoteResourceCountMax
    {
      get
      {
        return _noteResourceCountMax;
      }
      set
      {
        __isset.noteResourceCountMax = true;
        this._noteResourceCountMax = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userMailLimitDaily;
      public bool noteSizeMax;
      public bool resourceSizeMax;
      public bool userLinkedNotebookMax;
      public bool uploadLimit;
      public bool userNoteCountMax;
      public bool userNotebookCountMax;
      public bool userTagCountMax;
      public bool noteTagCountMax;
      public bool userSavedSearchesMax;
      public bool noteResourceCountMax;
    }

    public AccountLimits()
    {
    }

    public AccountLimits DeepCopy()
    {
      var tmp33 = new AccountLimits();
      if(__isset.userMailLimitDaily)
      {
        tmp33.UserMailLimitDaily = this.UserMailLimitDaily;
      }
      tmp33.__isset.userMailLimitDaily = this.__isset.userMailLimitDaily;
      if(__isset.noteSizeMax)
      {
        tmp33.NoteSizeMax = this.NoteSizeMax;
      }
      tmp33.__isset.noteSizeMax = this.__isset.noteSizeMax;
      if(__isset.resourceSizeMax)
      {
        tmp33.ResourceSizeMax = this.ResourceSizeMax;
      }
      tmp33.__isset.resourceSizeMax = this.__isset.resourceSizeMax;
      if(__isset.userLinkedNotebookMax)
      {
        tmp33.UserLinkedNotebookMax = this.UserLinkedNotebookMax;
      }
      tmp33.__isset.userLinkedNotebookMax = this.__isset.userLinkedNotebookMax;
      if(__isset.uploadLimit)
      {
        tmp33.UploadLimit = this.UploadLimit;
      }
      tmp33.__isset.uploadLimit = this.__isset.uploadLimit;
      if(__isset.userNoteCountMax)
      {
        tmp33.UserNoteCountMax = this.UserNoteCountMax;
      }
      tmp33.__isset.userNoteCountMax = this.__isset.userNoteCountMax;
      if(__isset.userNotebookCountMax)
      {
        tmp33.UserNotebookCountMax = this.UserNotebookCountMax;
      }
      tmp33.__isset.userNotebookCountMax = this.__isset.userNotebookCountMax;
      if(__isset.userTagCountMax)
      {
        tmp33.UserTagCountMax = this.UserTagCountMax;
      }
      tmp33.__isset.userTagCountMax = this.__isset.userTagCountMax;
      if(__isset.noteTagCountMax)
      {
        tmp33.NoteTagCountMax = this.NoteTagCountMax;
      }
      tmp33.__isset.noteTagCountMax = this.__isset.noteTagCountMax;
      if(__isset.userSavedSearchesMax)
      {
        tmp33.UserSavedSearchesMax = this.UserSavedSearchesMax;
      }
      tmp33.__isset.userSavedSearchesMax = this.__isset.userSavedSearchesMax;
      if(__isset.noteResourceCountMax)
      {
        tmp33.NoteResourceCountMax = this.NoteResourceCountMax;
      }
      tmp33.__isset.noteResourceCountMax = this.__isset.noteResourceCountMax;
      return tmp33;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                UserMailLimitDaily = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                NoteSizeMax = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                ResourceSizeMax = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                UserLinkedNotebookMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                UploadLimit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                UserNoteCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                UserNotebookCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                UserTagCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                NoteTagCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I32)
              {
                UserSavedSearchesMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I32)
              {
                NoteResourceCountMax = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp34 = new TStruct("AccountLimits");
        await oprot.WriteStructBeginAsync(tmp34, cancellationToken);
        var tmp35 = new TField();
        if(__isset.userMailLimitDaily)
        {
          tmp35.Name = "userMailLimitDaily";
          tmp35.Type = TType.I32;
          tmp35.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserMailLimitDaily, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noteSizeMax)
        {
          tmp35.Name = "noteSizeMax";
          tmp35.Type = TType.I64;
          tmp35.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI64Async(NoteSizeMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.resourceSizeMax)
        {
          tmp35.Name = "resourceSizeMax";
          tmp35.Type = TType.I64;
          tmp35.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI64Async(ResourceSizeMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userLinkedNotebookMax)
        {
          tmp35.Name = "userLinkedNotebookMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserLinkedNotebookMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uploadLimit)
        {
          tmp35.Name = "uploadLimit";
          tmp35.Type = TType.I64;
          tmp35.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI64Async(UploadLimit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userNoteCountMax)
        {
          tmp35.Name = "userNoteCountMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserNoteCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userNotebookCountMax)
        {
          tmp35.Name = "userNotebookCountMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserNotebookCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userTagCountMax)
        {
          tmp35.Name = "userTagCountMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserTagCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noteTagCountMax)
        {
          tmp35.Name = "noteTagCountMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(NoteTagCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.userSavedSearchesMax)
        {
          tmp35.Name = "userSavedSearchesMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(UserSavedSearchesMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noteResourceCountMax)
        {
          tmp35.Name = "noteResourceCountMax";
          tmp35.Type = TType.I32;
          tmp35.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteI32Async(NoteResourceCountMax, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AccountLimits other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userMailLimitDaily == other.__isset.userMailLimitDaily) && ((!__isset.userMailLimitDaily) || (global::System.Object.Equals(UserMailLimitDaily, other.UserMailLimitDaily))))
        && ((__isset.noteSizeMax == other.__isset.noteSizeMax) && ((!__isset.noteSizeMax) || (global::System.Object.Equals(NoteSizeMax, other.NoteSizeMax))))
        && ((__isset.resourceSizeMax == other.__isset.resourceSizeMax) && ((!__isset.resourceSizeMax) || (global::System.Object.Equals(ResourceSizeMax, other.ResourceSizeMax))))
        && ((__isset.userLinkedNotebookMax == other.__isset.userLinkedNotebookMax) && ((!__isset.userLinkedNotebookMax) || (global::System.Object.Equals(UserLinkedNotebookMax, other.UserLinkedNotebookMax))))
        && ((__isset.uploadLimit == other.__isset.uploadLimit) && ((!__isset.uploadLimit) || (global::System.Object.Equals(UploadLimit, other.UploadLimit))))
        && ((__isset.userNoteCountMax == other.__isset.userNoteCountMax) && ((!__isset.userNoteCountMax) || (global::System.Object.Equals(UserNoteCountMax, other.UserNoteCountMax))))
        && ((__isset.userNotebookCountMax == other.__isset.userNotebookCountMax) && ((!__isset.userNotebookCountMax) || (global::System.Object.Equals(UserNotebookCountMax, other.UserNotebookCountMax))))
        && ((__isset.userTagCountMax == other.__isset.userTagCountMax) && ((!__isset.userTagCountMax) || (global::System.Object.Equals(UserTagCountMax, other.UserTagCountMax))))
        && ((__isset.noteTagCountMax == other.__isset.noteTagCountMax) && ((!__isset.noteTagCountMax) || (global::System.Object.Equals(NoteTagCountMax, other.NoteTagCountMax))))
        && ((__isset.userSavedSearchesMax == other.__isset.userSavedSearchesMax) && ((!__isset.userSavedSearchesMax) || (global::System.Object.Equals(UserSavedSearchesMax, other.UserSavedSearchesMax))))
        && ((__isset.noteResourceCountMax == other.__isset.noteResourceCountMax) && ((!__isset.noteResourceCountMax) || (global::System.Object.Equals(NoteResourceCountMax, other.NoteResourceCountMax))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userMailLimitDaily)
        {
          hashcode = (hashcode * 397) + UserMailLimitDaily.GetHashCode();
        }
        if(__isset.noteSizeMax)
        {
          hashcode = (hashcode * 397) + NoteSizeMax.GetHashCode();
        }
        if(__isset.resourceSizeMax)
        {
          hashcode = (hashcode * 397) + ResourceSizeMax.GetHashCode();
        }
        if(__isset.userLinkedNotebookMax)
        {
          hashcode = (hashcode * 397) + UserLinkedNotebookMax.GetHashCode();
        }
        if(__isset.uploadLimit)
        {
          hashcode = (hashcode * 397) + UploadLimit.GetHashCode();
        }
        if(__isset.userNoteCountMax)
        {
          hashcode = (hashcode * 397) + UserNoteCountMax.GetHashCode();
        }
        if(__isset.userNotebookCountMax)
        {
          hashcode = (hashcode * 397) + UserNotebookCountMax.GetHashCode();
        }
        if(__isset.userTagCountMax)
        {
          hashcode = (hashcode * 397) + UserTagCountMax.GetHashCode();
        }
        if(__isset.noteTagCountMax)
        {
          hashcode = (hashcode * 397) + NoteTagCountMax.GetHashCode();
        }
        if(__isset.userSavedSearchesMax)
        {
          hashcode = (hashcode * 397) + UserSavedSearchesMax.GetHashCode();
        }
        if(__isset.noteResourceCountMax)
        {
          hashcode = (hashcode * 397) + NoteResourceCountMax.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp36 = new StringBuilder("AccountLimits(");
      int tmp37 = 0;
      if(__isset.userMailLimitDaily)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserMailLimitDaily: ");
        UserMailLimitDaily.ToString(tmp36);
      }
      if(__isset.noteSizeMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("NoteSizeMax: ");
        NoteSizeMax.ToString(tmp36);
      }
      if(__isset.resourceSizeMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("ResourceSizeMax: ");
        ResourceSizeMax.ToString(tmp36);
      }
      if(__isset.userLinkedNotebookMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserLinkedNotebookMax: ");
        UserLinkedNotebookMax.ToString(tmp36);
      }
      if(__isset.uploadLimit)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UploadLimit: ");
        UploadLimit.ToString(tmp36);
      }
      if(__isset.userNoteCountMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserNoteCountMax: ");
        UserNoteCountMax.ToString(tmp36);
      }
      if(__isset.userNotebookCountMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserNotebookCountMax: ");
        UserNotebookCountMax.ToString(tmp36);
      }
      if(__isset.userTagCountMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserTagCountMax: ");
        UserTagCountMax.ToString(tmp36);
      }
      if(__isset.noteTagCountMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("NoteTagCountMax: ");
        NoteTagCountMax.ToString(tmp36);
      }
      if(__isset.userSavedSearchesMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("UserSavedSearchesMax: ");
        UserSavedSearchesMax.ToString(tmp36);
      }
      if(__isset.noteResourceCountMax)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("NoteResourceCountMax: ");
        NoteResourceCountMax.ToString(tmp36);
      }
      tmp36.Append(')');
      return tmp36.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure holding the optional attributes associated with users
  /// in a business.
  /// 
  /// <dl>
  ///  <dt>title</dt>
  ///  <dd>Free form text of this user's title in the business</dd>
  /// 
  ///  <dt>location</dt>
  ///  <dd>City, State (for US) or City / Province for other countries</dd>
  /// 
  ///  <dt>department</dt>
  ///  <dd>Free form text of the department this user belongs to.</dd>
  /// 
  ///  <dt>mobilePhone</dt>
  ///  <dd>User's mobile phone number. Stored as plain text without any formatting.</dd>
  /// 
  ///  <dt>linkedInProfileUrl</dt>
  ///  <dd>URL to user's public LinkedIn profile page. This should only contain
  ///  the portion relative to the base LinkedIn URL. For example: "/pub/john-smith/".
  ///  </dd>
  /// 
  ///  <dt>workPhone</dt>
  ///  <dd>User's work phone number. Stored as plain text without any formatting.</dd>
  /// 
  ///  <dt>companyStartDate</dt>
  ///  <dd>The date on which the user started working at their company.</dd>
  /// </dl>
  /// </summary>
  public partial class BusinessUserAttributes : TBase
  {
    private string _title;
    private string _location;
    private string _department;
    private string _mobilePhone;
    private string _linkedInProfileUrl;
    private string _workPhone;
    private long _companyStartDate;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string Department
    {
      get
      {
        return _department;
      }
      set
      {
        __isset.department = true;
        this._department = value;
      }
    }

    public string MobilePhone
    {
      get
      {
        return _mobilePhone;
      }
      set
      {
        __isset.mobilePhone = true;
        this._mobilePhone = value;
      }
    }

    public string LinkedInProfileUrl
    {
      get
      {
        return _linkedInProfileUrl;
      }
      set
      {
        __isset.linkedInProfileUrl = true;
        this._linkedInProfileUrl = value;
      }
    }

    public string WorkPhone
    {
      get
      {
        return _workPhone;
      }
      set
      {
        __isset.workPhone = true;
        this._workPhone = value;
      }
    }

    public long CompanyStartDate
    {
      get
      {
        return _companyStartDate;
      }
      set
      {
        __isset.companyStartDate = true;
        this._companyStartDate = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool title;
      public bool location;
      public bool department;
      public bool mobilePhone;
      public bool linkedInProfileUrl;
      public bool workPhone;
      public bool companyStartDate;
    }

    public BusinessUserAttributes()
    {
    }

    public BusinessUserAttributes DeepCopy()
    {
      var tmp18 = new BusinessUserAttributes();
      if((Title != null) && __isset.title)
      {
        tmp18.Title = this.Title;
      }
      tmp18.__isset.title = this.__isset.title;
      if((Location != null) && __isset.location)
      {
        tmp18.Location = this.Location;
      }
      tmp18.__isset.location = this.__isset.location;
      if((Department != null) && __isset.department)
      {
        tmp18.Department = this.Department;
      }
      tmp18.__isset.department = this.__isset.department;
      if((MobilePhone != null) && __isset.mobilePhone)
      {
        tmp18.MobilePhone = this.MobilePhone;
      }
      tmp18.__isset.mobilePhone = this.__isset.mobilePhone;
      if((LinkedInProfileUrl != null) && __isset.linkedInProfileUrl)
      {
        tmp18.LinkedInProfileUrl = this.LinkedInProfileUrl;
      }
      tmp18.__isset.linkedInProfileUrl = this.__isset.linkedInProfileUrl;
      if((WorkPhone != null) && __isset.workPhone)
      {
        tmp18.WorkPhone = this.WorkPhone;
      }
      tmp18.__isset.workPhone = this.__isset.workPhone;
      if(__isset.companyStartDate)
      {
        tmp18.CompanyStartDate = this.CompanyStartDate;
      }
      tmp18.__isset.companyStartDate = this.__isset.companyStartDate;
      return tmp18;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Location = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Department = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                MobilePhone = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                LinkedInProfileUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                WorkPhone = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                CompanyStartDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp19 = new TStruct("BusinessUserAttributes");
        await oprot.WriteStructBeginAsync(tmp19, cancellationToken);
        var tmp20 = new TField();
        if((Title != null) && __isset.title)
        {
          tmp20.Name = "title";
          tmp20.Type = TType.String;
          tmp20.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Location != null) && __isset.location)
        {
          tmp20.Name = "location";
          tmp20.Type = TType.String;
          tmp20.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(Location, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Department != null) && __isset.department)
        {
          tmp20.Name = "department";
          tmp20.Type = TType.String;
          tmp20.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(Department, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MobilePhone != null) && __isset.mobilePhone)
        {
          tmp20.Name = "mobilePhone";
          tmp20.Type = TType.String;
          tmp20.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(MobilePhone, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LinkedInProfileUrl != null) && __isset.linkedInProfileUrl)
        {
          tmp20.Name = "linkedInProfileUrl";
          tmp20.Type = TType.String;
          tmp20.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(LinkedInProfileUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((WorkPhone != null) && __isset.workPhone)
        {
          tmp20.Name = "workPhone";
          tmp20.Type = TType.String;
          tmp20.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(WorkPhone, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.companyStartDate)
        {
          tmp20.Name = "companyStartDate";
          tmp20.Type = TType.I64;
          tmp20.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteI64Async(CompanyStartDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BusinessUserAttributes other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.title == other.__isset.title) && ((!__isset.title) || (global::System.Object.Equals(Title, other.Title))))
        && ((__isset.location == other.__isset.location) && ((!__isset.location) || (global::System.Object.Equals(Location, other.Location))))
        && ((__isset.department == other.__isset.department) && ((!__isset.department) || (global::System.Object.Equals(Department, other.Department))))
        && ((__isset.mobilePhone == other.__isset.mobilePhone) && ((!__isset.mobilePhone) || (global::System.Object.Equals(MobilePhone, other.MobilePhone))))
        && ((__isset.linkedInProfileUrl == other.__isset.linkedInProfileUrl) && ((!__isset.linkedInProfileUrl) || (global::System.Object.Equals(LinkedInProfileUrl, other.LinkedInProfileUrl))))
        && ((__isset.workPhone == other.__isset.workPhone) && ((!__isset.workPhone) || (global::System.Object.Equals(WorkPhone, other.WorkPhone))))
        && ((__isset.companyStartDate == other.__isset.companyStartDate) && ((!__isset.companyStartDate) || (global::System.Object.Equals(CompanyStartDate, other.CompanyStartDate))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Title != null) && __isset.title)
        {
          hashcode = (hashcode * 397) + Title.GetHashCode();
        }
        if((Location != null) && __isset.location)
        {
          hashcode = (hashcode * 397) + Location.GetHashCode();
        }
        if((Department != null) && __isset.department)
        {
          hashcode = (hashcode * 397) + Department.GetHashCode();
        }
        if((MobilePhone != null) && __isset.mobilePhone)
        {
          hashcode = (hashcode * 397) + MobilePhone.GetHashCode();
        }
        if((LinkedInProfileUrl != null) && __isset.linkedInProfileUrl)
        {
          hashcode = (hashcode * 397) + LinkedInProfileUrl.GetHashCode();
        }
        if((WorkPhone != null) && __isset.workPhone)
        {
          hashcode = (hashcode * 397) + WorkPhone.GetHashCode();
        }
        if(__isset.companyStartDate)
        {
          hashcode = (hashcode * 397) + CompanyStartDate.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp21 = new StringBuilder("BusinessUserAttributes(");
      int tmp22 = 0;
      if((Title != null) && __isset.title)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Title: ");
        Title.ToString(tmp21);
      }
      if((Location != null) && __isset.location)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Location: ");
        Location.ToString(tmp21);
      }
      if((Department != null) && __isset.department)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Department: ");
        Department.ToString(tmp21);
      }
      if((MobilePhone != null) && __isset.mobilePhone)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("MobilePhone: ");
        MobilePhone.ToString(tmp21);
      }
      if((LinkedInProfileUrl != null) && __isset.linkedInProfileUrl)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("LinkedInProfileUrl: ");
        LinkedInProfileUrl.ToString(tmp21);
      }
      if((WorkPhone != null) && __isset.workPhone)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("WorkPhone: ");
        WorkPhone.ToString(tmp21);
      }
      if(__isset.companyStartDate)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("CompanyStartDate: ");
        CompanyStartDate.ToString(tmp21);
      }
      tmp21.Append(')');
      return tmp21.ToString();
    }
  }

}

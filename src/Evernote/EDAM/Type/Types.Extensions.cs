/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{
  public static class TypesExtensions
  {
    public static bool Equals(this Dictionary<string, string> instance, object that)
    {
      if (!(that is Dictionary<string, string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<string, string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<string, string> DeepCopy(this Dictionary<string, string> source)
    {
      if (source == null)
        return null;

      var tmp229 = new Dictionary<string, string>(source.Count);
      foreach (var pair in source)
        tmp229.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value : null);
      return tmp229;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.RelatedContentImage> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.RelatedContentImage> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.RelatedContentImage> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.RelatedContentImage> DeepCopy(this List<global::Evernote.EDAM.Type.RelatedContentImage> source)
    {
      if (source == null)
        return null;

      var tmp230 = new List<global::Evernote.EDAM.Type.RelatedContentImage>(source.Count);
      foreach (var elem in source)
        tmp230.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp230;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.Resource> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.Resource> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.Resource> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.Resource> DeepCopy(this List<global::Evernote.EDAM.Type.Resource> source)
    {
      if (source == null)
        return null;

      var tmp231 = new List<global::Evernote.EDAM.Type.Resource>(source.Count);
      foreach (var elem in source)
        tmp231.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp231;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.SharedNote> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.SharedNote> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.SharedNote> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.SharedNote> DeepCopy(this List<global::Evernote.EDAM.Type.SharedNote> source)
    {
      if (source == null)
        return null;

      var tmp232 = new List<global::Evernote.EDAM.Type.SharedNote>(source.Count);
      foreach (var elem in source)
        tmp232.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp232;
    }


    public static bool Equals(this List<global::Evernote.EDAM.Type.SharedNotebook> instance, object that)
    {
      if (!(that is List<global::Evernote.EDAM.Type.SharedNotebook> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Evernote.EDAM.Type.SharedNotebook> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Evernote.EDAM.Type.SharedNotebook> DeepCopy(this List<global::Evernote.EDAM.Type.SharedNotebook> source)
    {
      if (source == null)
        return null;

      var tmp233 = new List<global::Evernote.EDAM.Type.SharedNotebook>(source.Count);
      foreach (var elem in source)
        tmp233.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp233;
    }


    public static bool Equals(this List<long> instance, object that)
    {
      if (!(that is List<long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<long> DeepCopy(this List<long> source)
    {
      if (source == null)
        return null;

      var tmp234 = new List<long>(source.Count);
      foreach (var elem in source)
        tmp234.Add(elem);
      return tmp234;
    }


    public static bool Equals(this List<string> instance, object that)
    {
      if (!(that is List<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<string> DeepCopy(this List<string> source)
    {
      if (source == null)
        return null;

      var tmp235 = new List<string>(source.Count);
      foreach (var elem in source)
        tmp235.Add((elem != null) ? elem : null);
      return tmp235;
    }


    public static bool Equals(this THashSet<string> instance, object that)
    {
      if (!(that is THashSet<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<string> DeepCopy(this THashSet<string> source)
    {
      if (source == null)
        return null;

      var tmp236 = new THashSet<string>(source.Count);
      foreach (var elem in source)
        tmp236.Add((elem != null) ? elem : null);
      return tmp236;
    }


  }
}

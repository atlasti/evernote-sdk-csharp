/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure that holds user identifying information such as an
  /// email address, Evernote user ID, or an identifier from a 3rd party
  /// service.  An instance consists of a type and a value, where the
  /// value will be stored in one of the value fields depending upon the
  /// data type required for the identity type.
  /// 
  /// When used with shared notebook invitations, a UserIdentity
  /// identifies a particular person who may not (yet) have an Evernote
  /// UserID UserIdentity but who has (almost) unique access to the
  /// service endpoint described by the UserIdentity.  For example, an
  /// e-mail UserIdentity can identify the person who receives e-mail at
  /// the given address, and who can therefore read the share key that
  /// has a cryptographic signature from the Evernote service. With the
  /// share key, this person can supply their Evernote UserID via an
  /// authentication token to join the notebook
  /// (authenticateToSharedNotebook), at which time we have associated
  /// the e-mail UserIdentity with an Evernote UserID UserIdentity. Note
  /// that using shared notebook records, the relationship between
  /// Evernote UserIDs and e-mail addresses is many to many.
  /// 
  /// Note that the identifier may not directly identify a
  /// particular Evernote UserID UserIdentity without further
  /// verification.  For example, an e-mail UserIdentity may be
  /// associated with an invitation to join a notebook (via a shared
  /// notebook record), but until a user uses a share key, that was sent
  /// to that e-mail address, to join the notebook, we do not know an
  /// Evernote UserID UserIdentity ID to match the e-mail address.
  /// </summary>
  public partial class UserIdentity : TBase
  {
    private global::Evernote.EDAM.Type.UserIdentityType _type;
    private string _stringIdentifier;
    private long _longIdentifier;

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.UserIdentityType"/>
    /// </summary>
    public global::Evernote.EDAM.Type.UserIdentityType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string StringIdentifier
    {
      get
      {
        return _stringIdentifier;
      }
      set
      {
        __isset.stringIdentifier = true;
        this._stringIdentifier = value;
      }
    }

    public long LongIdentifier
    {
      get
      {
        return _longIdentifier;
      }
      set
      {
        __isset.longIdentifier = true;
        this._longIdentifier = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool stringIdentifier;
      public bool longIdentifier;
    }

    public UserIdentity()
    {
    }

    public UserIdentity DeepCopy()
    {
      var tmp224 = new UserIdentity();
      if(__isset.type)
      {
        tmp224.Type = this.Type;
      }
      tmp224.__isset.type = this.__isset.type;
      if((StringIdentifier != null) && __isset.stringIdentifier)
      {
        tmp224.StringIdentifier = this.StringIdentifier;
      }
      tmp224.__isset.stringIdentifier = this.__isset.stringIdentifier;
      if(__isset.longIdentifier)
      {
        tmp224.LongIdentifier = this.LongIdentifier;
      }
      tmp224.__isset.longIdentifier = this.__isset.longIdentifier;
      return tmp224;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::Evernote.EDAM.Type.UserIdentityType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StringIdentifier = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                LongIdentifier = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp225 = new TStruct("UserIdentity");
        await oprot.WriteStructBeginAsync(tmp225, cancellationToken);
        var tmp226 = new TField();
        if(__isset.type)
        {
          tmp226.Name = "type";
          tmp226.Type = TType.I32;
          tmp226.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((StringIdentifier != null) && __isset.stringIdentifier)
        {
          tmp226.Name = "stringIdentifier";
          tmp226.Type = TType.String;
          tmp226.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteStringAsync(StringIdentifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.longIdentifier)
        {
          tmp226.Name = "longIdentifier";
          tmp226.Type = TType.I64;
          tmp226.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp226, cancellationToken);
          await oprot.WriteI64Async(LongIdentifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserIdentity other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.stringIdentifier == other.__isset.stringIdentifier) && ((!__isset.stringIdentifier) || (global::System.Object.Equals(StringIdentifier, other.StringIdentifier))))
        && ((__isset.longIdentifier == other.__isset.longIdentifier) && ((!__isset.longIdentifier) || (global::System.Object.Equals(LongIdentifier, other.LongIdentifier))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((StringIdentifier != null) && __isset.stringIdentifier)
        {
          hashcode = (hashcode * 397) + StringIdentifier.GetHashCode();
        }
        if(__isset.longIdentifier)
        {
          hashcode = (hashcode * 397) + LongIdentifier.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp227 = new StringBuilder("UserIdentity(");
      int tmp228 = 0;
      if(__isset.type)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("Type: ");
        Type.ToString(tmp227);
      }
      if((StringIdentifier != null) && __isset.stringIdentifier)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("StringIdentifier: ");
        StringIdentifier.ToString(tmp227);
      }
      if(__isset.longIdentifier)
      {
        if(0 < tmp228++) { tmp227.Append(", "); }
        tmp227.Append("LongIdentifier: ");
        LongIdentifier.ToString(tmp227);
      }
      tmp227.Append(')');
      return tmp227.ToString();
    }
  }

}

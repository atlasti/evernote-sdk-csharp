/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// This structure represents profile information for a user in a business.
  /// 
  /// <dl>
  /// <dt>id</dt>
  /// <dd>The numeric identifier that uniquely identifies a user.</dd>
  /// 
  /// <dt>name</dt>
  /// <dd>The full name of the user.</dd>
  /// 
  /// <dt>email</dt>
  /// <dd>The user's business email address. If the user has not registered their business
  ///   email address, this field will be empty.
  /// </dd>
  /// 
  /// <dt>username</dt>
  /// <dd>The user's Evernote username.</dd>
  /// 
  /// <dt>attributes</dt>
  /// <dd>The user's business specific attributes.</dd>
  /// 
  /// <dt>joined</dt>
  /// <dd>The time when the user joined the business</dd>
  /// 
  /// <dt>photoLastUpdated</dt>
  /// <dd>The time when the user's profile photo was most recently updated</dd>
  /// 
  /// <dt>photoUrl</dt>
  /// <dd>A URL identifying a copy of the user's current profile photo</dd>
  /// 
  /// <dt>role</dt>
  /// <dd>The BusinessUserRole for the user</dd>
  /// 
  /// <dt>status</dt>
  /// <dd>The BusinessUserStatus for the user</dd>
  /// 
  /// </dl>
  /// </summary>
  public partial class UserProfile : TBase
  {
    private int _id;
    private string _name;
    private string _email;
    private string _username;
    private global::Evernote.EDAM.Type.BusinessUserAttributes _attributes;
    private long _joined;
    private long _photoLastUpdated;
    private string _photoUrl;
    private global::Evernote.EDAM.Type.BusinessUserRole _role;
    private global::Evernote.EDAM.Type.BusinessUserStatus _status;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public global::Evernote.EDAM.Type.BusinessUserAttributes Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public long Joined
    {
      get
      {
        return _joined;
      }
      set
      {
        __isset.joined = true;
        this._joined = value;
      }
    }

    public long PhotoLastUpdated
    {
      get
      {
        return _photoLastUpdated;
      }
      set
      {
        __isset.photoLastUpdated = true;
        this._photoLastUpdated = value;
      }
    }

    public string PhotoUrl
    {
      get
      {
        return _photoUrl;
      }
      set
      {
        __isset.photoUrl = true;
        this._photoUrl = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.BusinessUserRole"/>
    /// </summary>
    public global::Evernote.EDAM.Type.BusinessUserRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.BusinessUserStatus"/>
    /// </summary>
    public global::Evernote.EDAM.Type.BusinessUserStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
      public bool name;
      public bool email;
      public bool username;
      public bool attributes;
      public bool joined;
      public bool photoLastUpdated;
      public bool photoUrl;
      public bool role;
      public bool status;
    }

    public UserProfile()
    {
    }

    public UserProfile DeepCopy()
    {
      var tmp196 = new UserProfile();
      if(__isset.id)
      {
        tmp196.Id = this.Id;
      }
      tmp196.__isset.id = this.__isset.id;
      if((Name != null) && __isset.name)
      {
        tmp196.Name = this.Name;
      }
      tmp196.__isset.name = this.__isset.name;
      if((Email != null) && __isset.email)
      {
        tmp196.Email = this.Email;
      }
      tmp196.__isset.email = this.__isset.email;
      if((Username != null) && __isset.username)
      {
        tmp196.Username = this.Username;
      }
      tmp196.__isset.username = this.__isset.username;
      if((Attributes != null) && __isset.attributes)
      {
        tmp196.Attributes = (global::Evernote.EDAM.Type.BusinessUserAttributes)this.Attributes.DeepCopy();
      }
      tmp196.__isset.attributes = this.__isset.attributes;
      if(__isset.joined)
      {
        tmp196.Joined = this.Joined;
      }
      tmp196.__isset.joined = this.__isset.joined;
      if(__isset.photoLastUpdated)
      {
        tmp196.PhotoLastUpdated = this.PhotoLastUpdated;
      }
      tmp196.__isset.photoLastUpdated = this.__isset.photoLastUpdated;
      if((PhotoUrl != null) && __isset.photoUrl)
      {
        tmp196.PhotoUrl = this.PhotoUrl;
      }
      tmp196.__isset.photoUrl = this.__isset.photoUrl;
      if(__isset.role)
      {
        tmp196.Role = this.Role;
      }
      tmp196.__isset.role = this.__isset.role;
      if(__isset.status)
      {
        tmp196.Status = this.Status;
      }
      tmp196.__isset.status = this.__isset.status;
      return tmp196;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Attributes = new global::Evernote.EDAM.Type.BusinessUserAttributes();
                await Attributes.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Joined = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                PhotoLastUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                PhotoUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                Role = (global::Evernote.EDAM.Type.BusinessUserRole)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I32)
              {
                Status = (global::Evernote.EDAM.Type.BusinessUserStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp197 = new TStruct("UserProfile");
        await oprot.WriteStructBeginAsync(tmp197, cancellationToken);
        var tmp198 = new TField();
        if(__isset.id)
        {
          tmp198.Name = "id";
          tmp198.Type = TType.I32;
          tmp198.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp198.Name = "name";
          tmp198.Type = TType.String;
          tmp198.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Email != null) && __isset.email)
        {
          tmp198.Name = "email";
          tmp198.Type = TType.String;
          tmp198.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.username)
        {
          tmp198.Name = "username";
          tmp198.Type = TType.String;
          tmp198.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Attributes != null) && __isset.attributes)
        {
          tmp198.Name = "attributes";
          tmp198.Type = TType.Struct;
          tmp198.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await Attributes.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.joined)
        {
          tmp198.Name = "joined";
          tmp198.Type = TType.I64;
          tmp198.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteI64Async(Joined, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.photoLastUpdated)
        {
          tmp198.Name = "photoLastUpdated";
          tmp198.Type = TType.I64;
          tmp198.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteI64Async(PhotoLastUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PhotoUrl != null) && __isset.photoUrl)
        {
          tmp198.Name = "photoUrl";
          tmp198.Type = TType.String;
          tmp198.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteStringAsync(PhotoUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.role)
        {
          tmp198.Name = "role";
          tmp198.Type = TType.I32;
          tmp198.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteI32Async((int)Role, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp198.Name = "status";
          tmp198.Type = TType.I32;
          tmp198.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp198, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserProfile other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.email == other.__isset.email) && ((!__isset.email) || (global::System.Object.Equals(Email, other.Email))))
        && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (global::System.Object.Equals(Attributes, other.Attributes))))
        && ((__isset.joined == other.__isset.joined) && ((!__isset.joined) || (global::System.Object.Equals(Joined, other.Joined))))
        && ((__isset.photoLastUpdated == other.__isset.photoLastUpdated) && ((!__isset.photoLastUpdated) || (global::System.Object.Equals(PhotoLastUpdated, other.PhotoLastUpdated))))
        && ((__isset.photoUrl == other.__isset.photoUrl) && ((!__isset.photoUrl) || (global::System.Object.Equals(PhotoUrl, other.PhotoUrl))))
        && ((__isset.role == other.__isset.role) && ((!__isset.role) || (global::System.Object.Equals(Role, other.Role))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (global::System.Object.Equals(Status, other.Status))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.id)
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Email != null) && __isset.email)
        {
          hashcode = (hashcode * 397) + Email.GetHashCode();
        }
        if((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if((Attributes != null) && __isset.attributes)
        {
          hashcode = (hashcode * 397) + Attributes.GetHashCode();
        }
        if(__isset.joined)
        {
          hashcode = (hashcode * 397) + Joined.GetHashCode();
        }
        if(__isset.photoLastUpdated)
        {
          hashcode = (hashcode * 397) + PhotoLastUpdated.GetHashCode();
        }
        if((PhotoUrl != null) && __isset.photoUrl)
        {
          hashcode = (hashcode * 397) + PhotoUrl.GetHashCode();
        }
        if(__isset.role)
        {
          hashcode = (hashcode * 397) + Role.GetHashCode();
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp199 = new StringBuilder("UserProfile(");
      int tmp200 = 0;
      if(__isset.id)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Id: ");
        Id.ToString(tmp199);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Name: ");
        Name.ToString(tmp199);
      }
      if((Email != null) && __isset.email)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Email: ");
        Email.ToString(tmp199);
      }
      if((Username != null) && __isset.username)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Username: ");
        Username.ToString(tmp199);
      }
      if((Attributes != null) && __isset.attributes)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Attributes: ");
        Attributes.ToString(tmp199);
      }
      if(__isset.joined)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Joined: ");
        Joined.ToString(tmp199);
      }
      if(__isset.photoLastUpdated)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("PhotoLastUpdated: ");
        PhotoLastUpdated.ToString(tmp199);
      }
      if((PhotoUrl != null) && __isset.photoUrl)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("PhotoUrl: ");
        PhotoUrl.ToString(tmp199);
      }
      if(__isset.role)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Role: ");
        Role.ToString(tmp199);
      }
      if(__isset.status)
      {
        if(0 < tmp200++) { tmp199.Append(", "); }
        tmp199.Append("Status: ");
        Status.ToString(tmp199);
      }
      tmp199.Append(')');
      return tmp199.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  A structure holding the optional attributes that can be stored
  ///  on a User.  These are generally less critical than the core User fields.
  /// 
  /// <dl>
  ///  <dt>defaultLocationName</dt>
  ///    <dd>the location string that should be associated
  ///    with the user in order to determine where notes are taken if not otherwise
  ///    specified.<br/>
  ///    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///    </dd>
  /// 
  ///  <dt>defaultLatitude</dt>
  ///    <dd>if set, this is the latitude that should be
  ///    assigned to any notes that have no other latitude information.
  ///    </dd>
  /// 
  ///  <dt>defaultLongitude</dt>
  ///    <dd>if set, this is the longitude that should be
  ///    assigned to any notes that have no other longitude information.
  ///    </dd>
  /// 
  ///  <dt>preactivation</dt>
  ///    <dd>if set, the user account is not yet confirmed for
  ///    login.  I.e. the account has been created, but we are still waiting for
  ///    the user to complete the activation step.
  ///    </dd>
  /// 
  ///  <dt>viewedPromotions</dt>
  ///    <dd>a list of promotions the user has seen.
  ///     This list may occasionally be modified by the system when promotions are
  ///     no longer available.<br/>
  ///     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///    </dd>
  /// 
  ///  <dt>incomingEmailAddress</dt>
  ///    <dd>if set, this is the email address that the
  ///     user may send email to in order to add an email note directly into the
  ///     account via the SMTP email gateway.  This is the part of the email
  ///     address before the '@' symbol ... our domain is not included.
  ///     If this is not set, the user may not add notes via the gateway.<br/>
  ///     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///    </dd>
  /// 
  ///  <dt>recentMailedAddresses</dt>
  ///    <dd>if set, this will contain a list of email
  ///     addresses that have recently been used as recipients
  ///     of outbound emails by the user.  This can be used to pre-populate a
  ///     list of possible destinations when a user wishes to send a note via
  ///     email.<br/>
  ///     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX each<br/>
  ///     Max:  EDAM_USER_RECENT_MAILED_ADDRESSES_MAX entries
  ///    </dd>
  /// 
  ///  <dt>comments</dt>
  ///    <dd>Free-form text field that may hold general support
  ///     information, etc.<br/>
  ///     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///    </dd>
  /// 
  ///  <dt>dateAgreedToTermsOfService</dt>
  ///    <dd>The date/time when the user agreed to
  ///     the terms of service.  This can be used as the effective "start date"
  ///     for the account.
  ///    </dd>
  /// 
  ///  <dt>maxReferrals</dt>
  ///    <dd>The number of referrals that the user is permitted
  ///     to make.
  ///    </dd>
  /// 
  ///  <dt>referralCount</dt>
  ///    <dd>The number of referrals sent from this account.
  ///    </dd>
  /// 
  ///  <dt>refererCode</dt>
  ///    <dd>A code indicating where the user was sent from. AKA
  ///     promotion code
  ///    </dd>
  /// 
  ///  <dt>sentEmailDate</dt>
  ///    <dd>The most recent date when the user sent outbound
  ///     emails from the service.  Used with sentEmailCount to limit the number
  ///     of emails that can be sent per day.
  ///    </dd>
  /// 
  ///  <dt>sentEmailCount</dt>
  ///    <dd>The number of emails that were sent from the user
  ///     via the service on sentEmailDate.  Used to enforce a limit on the number
  ///     of emails per user per day to prevent spamming.
  ///    </dd>
  /// 
  ///  <dt>dailyEmailLimit</dt>
  ///    <dd>If set, this is the maximum number of emails that
  ///     may be sent in a given day from this account.  If unset, the server will
  ///     use the configured default limit.
  ///    </dd>
  /// 
  ///  <dt>emailOptOutDate</dt>
  ///    <dd>If set, this is the date when the user asked
  ///     to be excluded from offers and promotions sent by Evernote.  If not set,
  ///     then the user currently agrees to receive these messages.
  ///    </dd>
  /// 
  ///  <dt>partnerEmailOptInDate</dt>
  ///    <dd>If set, this is the date when the user asked
  ///     to be included in offers and promotions sent by Evernote's partners.
  ///     If not sent, then the user currently does not agree to receive these
  ///     emails.
  ///    </dd>
  /// 
  ///  <dt>preferredLanguage</dt>
  ///    <dd>a 2 character language codes based on:
  ///        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt used for
  ///       localization purposes to determine what language to use for the web
  ///       interface and for other direct communication (e.g. emails).
  ///    </dd>
  /// 
  ///  <dt>preferredCountry</dt>
  ///    <dd>Preferred country code based on ISO 3166-1-alpha-2 indicating the
  ///    users preferred country</dd>
  /// 
  ///  <dt>clipFullPage</dt>
  ///    <dd>Boolean flag set to true if the user wants to clip full pages by
  ///    default when they use the web clipper without a selection.</dd>
  /// 
  ///  <dt>twitterUserName</dt>
  ///    <dd>The username of the account of someone who has chosen to enable
  ///    Twittering into Evernote.  This value is subject to change, since users
  ///    may change their Twitter user name.</dd>
  /// 
  ///  <dt>twitterId</dt>
  ///    <dd>The unique identifier of the user's Twitter account if that user
  ///    has chosen to enable Twittering into Evernote.</dd>
  /// 
  ///  <dt>groupName</dt>
  ///    <dd>A name identifier used to identify a particular set of branding and
  ///     light customization.</dd>
  /// 
  ///  <dt>recognitionLanguage</dt>
  ///    <dd>a 2 character language codes based on:
  ///        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
  ///        If set, this is used to determine the language that should be used
  ///        when processing images and PDF files to find text.
  ///        If not set, then the 'preferredLanguage' will be used.
  ///    </dd>
  /// 
  ///  <dt>educationalInstitution</dt>
  ///    <dd>a flag indicating that the user is part of an educational institution which
  ///    makes them eligible for discounts on bulk purchases
  ///    </dd>
  /// 
  ///  <dt>businessAddress</dt>
  ///    <dd>A string recording the business address of a Sponsored Account user who has requested invoicing.
  ///    </dd>
  /// 
  ///  <dt>hideSponsorBilling</dt>
  ///    <dd>A flag indicating whether to hide the billing information on a sponsored
  ///        account owner's settings page
  ///    </dd>
  /// 
  ///  <dt>useEmailAutoFiling</dt>
  ///    <dd>A flag indicating whether the user chooses to allow Evernote to automatically
  ///        file and tag emailed notes
  ///    </dd>
  /// 
  ///  <dt>reminderEmailConfig</dt>
  ///    <dd>Configuration state for whether or not the user wishes to receive
  ///        reminder e-mail.  This setting applies to both the reminder e-mail sent
  ///        for personal reminder notes and for the reminder e-mail sent for reminder
  ///        notes in the user's business notebooks that the user has configured for
  ///        e-mail notifications.
  ///    </dd>
  /// 
  ///  <dt>emailAddressLastConfirmed</dt>
  ///    <dd>If set, this contains the time at which the user last confirmed that the
  ///        configured email address for this account is correct and up-to-date. If this is
  ///        unset that indicates that the user's email address is unverified.
  ///    </dd>
  /// 
  ///  <dt>passwordUpdated</dt>
  ///    <dd>If set, this contains the time at which the user's password last changed. This
  ///        will be unset for users created before the addition of this field who have not
  ///        changed their passwords since the addition of this field.
  ///    </dd>
  /// 
  ///  <dt>shouldLogClientEvent</dt>
  ///    <dd>If set to True, the server will record LogRequest send from clients of this
  ///         user as ClientEventLog.
  ///    </dd>
  /// 
  ///  <dt>optOutMachineLearning</dt>
  ///    <dd>If set to True, no Machine Learning nor human review will be done to this
  ///         user's note contents.
  ///    </dd>
  ///    </dl>
  /// </summary>
  public partial class UserAttributes : TBase
  {
    private string _defaultLocationName;
    private double _defaultLatitude;
    private double _defaultLongitude;
    private bool _preactivation;
    private List<string> _viewedPromotions;
    private string _incomingEmailAddress;
    private List<string> _recentMailedAddresses;
    private string _comments;
    private long _dateAgreedToTermsOfService;
    private int _maxReferrals;
    private int _referralCount;
    private string _refererCode;
    private long _sentEmailDate;
    private int _sentEmailCount;
    private int _dailyEmailLimit;
    private long _emailOptOutDate;
    private long _partnerEmailOptInDate;
    private string _preferredLanguage;
    private string _preferredCountry;
    private bool _clipFullPage;
    private string _twitterUserName;
    private string _twitterId;
    private string _groupName;
    private string _recognitionLanguage;
    private string _referralProof;
    private bool _educationalDiscount;
    private string _businessAddress;
    private bool _hideSponsorBilling;
    private bool _useEmailAutoFiling;
    private global::Evernote.EDAM.Type.ReminderEmailConfig _reminderEmailConfig;
    private long _emailAddressLastConfirmed;
    private long _passwordUpdated;
    private bool _salesforcePushEnabled;
    private bool _shouldLogClientEvent;
    private bool _optOutMachineLearning;

    public string DefaultLocationName
    {
      get
      {
        return _defaultLocationName;
      }
      set
      {
        __isset.defaultLocationName = true;
        this._defaultLocationName = value;
      }
    }

    public double DefaultLatitude
    {
      get
      {
        return _defaultLatitude;
      }
      set
      {
        __isset.defaultLatitude = true;
        this._defaultLatitude = value;
      }
    }

    public double DefaultLongitude
    {
      get
      {
        return _defaultLongitude;
      }
      set
      {
        __isset.defaultLongitude = true;
        this._defaultLongitude = value;
      }
    }

    public bool Preactivation
    {
      get
      {
        return _preactivation;
      }
      set
      {
        __isset.preactivation = true;
        this._preactivation = value;
      }
    }

    public List<string> ViewedPromotions
    {
      get
      {
        return _viewedPromotions;
      }
      set
      {
        __isset.viewedPromotions = true;
        this._viewedPromotions = value;
      }
    }

    public string IncomingEmailAddress
    {
      get
      {
        return _incomingEmailAddress;
      }
      set
      {
        __isset.incomingEmailAddress = true;
        this._incomingEmailAddress = value;
      }
    }

    public List<string> RecentMailedAddresses
    {
      get
      {
        return _recentMailedAddresses;
      }
      set
      {
        __isset.recentMailedAddresses = true;
        this._recentMailedAddresses = value;
      }
    }

    public string Comments
    {
      get
      {
        return _comments;
      }
      set
      {
        __isset.comments = true;
        this._comments = value;
      }
    }

    public long DateAgreedToTermsOfService
    {
      get
      {
        return _dateAgreedToTermsOfService;
      }
      set
      {
        __isset.dateAgreedToTermsOfService = true;
        this._dateAgreedToTermsOfService = value;
      }
    }

    public int MaxReferrals
    {
      get
      {
        return _maxReferrals;
      }
      set
      {
        __isset.maxReferrals = true;
        this._maxReferrals = value;
      }
    }

    public int ReferralCount
    {
      get
      {
        return _referralCount;
      }
      set
      {
        __isset.referralCount = true;
        this._referralCount = value;
      }
    }

    public string RefererCode
    {
      get
      {
        return _refererCode;
      }
      set
      {
        __isset.refererCode = true;
        this._refererCode = value;
      }
    }

    public long SentEmailDate
    {
      get
      {
        return _sentEmailDate;
      }
      set
      {
        __isset.sentEmailDate = true;
        this._sentEmailDate = value;
      }
    }

    public int SentEmailCount
    {
      get
      {
        return _sentEmailCount;
      }
      set
      {
        __isset.sentEmailCount = true;
        this._sentEmailCount = value;
      }
    }

    public int DailyEmailLimit
    {
      get
      {
        return _dailyEmailLimit;
      }
      set
      {
        __isset.dailyEmailLimit = true;
        this._dailyEmailLimit = value;
      }
    }

    public long EmailOptOutDate
    {
      get
      {
        return _emailOptOutDate;
      }
      set
      {
        __isset.emailOptOutDate = true;
        this._emailOptOutDate = value;
      }
    }

    public long PartnerEmailOptInDate
    {
      get
      {
        return _partnerEmailOptInDate;
      }
      set
      {
        __isset.partnerEmailOptInDate = true;
        this._partnerEmailOptInDate = value;
      }
    }

    public string PreferredLanguage
    {
      get
      {
        return _preferredLanguage;
      }
      set
      {
        __isset.preferredLanguage = true;
        this._preferredLanguage = value;
      }
    }

    public string PreferredCountry
    {
      get
      {
        return _preferredCountry;
      }
      set
      {
        __isset.preferredCountry = true;
        this._preferredCountry = value;
      }
    }

    public bool ClipFullPage
    {
      get
      {
        return _clipFullPage;
      }
      set
      {
        __isset.clipFullPage = true;
        this._clipFullPage = value;
      }
    }

    public string TwitterUserName
    {
      get
      {
        return _twitterUserName;
      }
      set
      {
        __isset.twitterUserName = true;
        this._twitterUserName = value;
      }
    }

    public string TwitterId
    {
      get
      {
        return _twitterId;
      }
      set
      {
        __isset.twitterId = true;
        this._twitterId = value;
      }
    }

    public string GroupName
    {
      get
      {
        return _groupName;
      }
      set
      {
        __isset.groupName = true;
        this._groupName = value;
      }
    }

    public string RecognitionLanguage
    {
      get
      {
        return _recognitionLanguage;
      }
      set
      {
        __isset.recognitionLanguage = true;
        this._recognitionLanguage = value;
      }
    }

    public string ReferralProof
    {
      get
      {
        return _referralProof;
      }
      set
      {
        __isset.referralProof = true;
        this._referralProof = value;
      }
    }

    public bool EducationalDiscount
    {
      get
      {
        return _educationalDiscount;
      }
      set
      {
        __isset.educationalDiscount = true;
        this._educationalDiscount = value;
      }
    }

    public string BusinessAddress
    {
      get
      {
        return _businessAddress;
      }
      set
      {
        __isset.businessAddress = true;
        this._businessAddress = value;
      }
    }

    public bool HideSponsorBilling
    {
      get
      {
        return _hideSponsorBilling;
      }
      set
      {
        __isset.hideSponsorBilling = true;
        this._hideSponsorBilling = value;
      }
    }

    public bool UseEmailAutoFiling
    {
      get
      {
        return _useEmailAutoFiling;
      }
      set
      {
        __isset.useEmailAutoFiling = true;
        this._useEmailAutoFiling = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.ReminderEmailConfig"/>
    /// </summary>
    public global::Evernote.EDAM.Type.ReminderEmailConfig ReminderEmailConfig
    {
      get
      {
        return _reminderEmailConfig;
      }
      set
      {
        __isset.reminderEmailConfig = true;
        this._reminderEmailConfig = value;
      }
    }

    public long EmailAddressLastConfirmed
    {
      get
      {
        return _emailAddressLastConfirmed;
      }
      set
      {
        __isset.emailAddressLastConfirmed = true;
        this._emailAddressLastConfirmed = value;
      }
    }

    public long PasswordUpdated
    {
      get
      {
        return _passwordUpdated;
      }
      set
      {
        __isset.passwordUpdated = true;
        this._passwordUpdated = value;
      }
    }

    public bool SalesforcePushEnabled
    {
      get
      {
        return _salesforcePushEnabled;
      }
      set
      {
        __isset.salesforcePushEnabled = true;
        this._salesforcePushEnabled = value;
      }
    }

    public bool ShouldLogClientEvent
    {
      get
      {
        return _shouldLogClientEvent;
      }
      set
      {
        __isset.shouldLogClientEvent = true;
        this._shouldLogClientEvent = value;
      }
    }

    public bool OptOutMachineLearning
    {
      get
      {
        return _optOutMachineLearning;
      }
      set
      {
        __isset.optOutMachineLearning = true;
        this._optOutMachineLearning = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool defaultLocationName;
      public bool defaultLatitude;
      public bool defaultLongitude;
      public bool preactivation;
      public bool viewedPromotions;
      public bool incomingEmailAddress;
      public bool recentMailedAddresses;
      public bool comments;
      public bool dateAgreedToTermsOfService;
      public bool maxReferrals;
      public bool referralCount;
      public bool refererCode;
      public bool sentEmailDate;
      public bool sentEmailCount;
      public bool dailyEmailLimit;
      public bool emailOptOutDate;
      public bool partnerEmailOptInDate;
      public bool preferredLanguage;
      public bool preferredCountry;
      public bool clipFullPage;
      public bool twitterUserName;
      public bool twitterId;
      public bool groupName;
      public bool recognitionLanguage;
      public bool referralProof;
      public bool educationalDiscount;
      public bool businessAddress;
      public bool hideSponsorBilling;
      public bool useEmailAutoFiling;
      public bool reminderEmailConfig;
      public bool emailAddressLastConfirmed;
      public bool passwordUpdated;
      public bool salesforcePushEnabled;
      public bool shouldLogClientEvent;
      public bool optOutMachineLearning;
    }

    public UserAttributes()
    {
    }

    public UserAttributes DeepCopy()
    {
      var tmp5 = new UserAttributes();
      if((DefaultLocationName != null) && __isset.defaultLocationName)
      {
        tmp5.DefaultLocationName = this.DefaultLocationName;
      }
      tmp5.__isset.defaultLocationName = this.__isset.defaultLocationName;
      if(__isset.defaultLatitude)
      {
        tmp5.DefaultLatitude = this.DefaultLatitude;
      }
      tmp5.__isset.defaultLatitude = this.__isset.defaultLatitude;
      if(__isset.defaultLongitude)
      {
        tmp5.DefaultLongitude = this.DefaultLongitude;
      }
      tmp5.__isset.defaultLongitude = this.__isset.defaultLongitude;
      if(__isset.preactivation)
      {
        tmp5.Preactivation = this.Preactivation;
      }
      tmp5.__isset.preactivation = this.__isset.preactivation;
      if((ViewedPromotions != null) && __isset.viewedPromotions)
      {
        tmp5.ViewedPromotions = this.ViewedPromotions.DeepCopy();
      }
      tmp5.__isset.viewedPromotions = this.__isset.viewedPromotions;
      if((IncomingEmailAddress != null) && __isset.incomingEmailAddress)
      {
        tmp5.IncomingEmailAddress = this.IncomingEmailAddress;
      }
      tmp5.__isset.incomingEmailAddress = this.__isset.incomingEmailAddress;
      if((RecentMailedAddresses != null) && __isset.recentMailedAddresses)
      {
        tmp5.RecentMailedAddresses = this.RecentMailedAddresses.DeepCopy();
      }
      tmp5.__isset.recentMailedAddresses = this.__isset.recentMailedAddresses;
      if((Comments != null) && __isset.comments)
      {
        tmp5.Comments = this.Comments;
      }
      tmp5.__isset.comments = this.__isset.comments;
      if(__isset.dateAgreedToTermsOfService)
      {
        tmp5.DateAgreedToTermsOfService = this.DateAgreedToTermsOfService;
      }
      tmp5.__isset.dateAgreedToTermsOfService = this.__isset.dateAgreedToTermsOfService;
      if(__isset.maxReferrals)
      {
        tmp5.MaxReferrals = this.MaxReferrals;
      }
      tmp5.__isset.maxReferrals = this.__isset.maxReferrals;
      if(__isset.referralCount)
      {
        tmp5.ReferralCount = this.ReferralCount;
      }
      tmp5.__isset.referralCount = this.__isset.referralCount;
      if((RefererCode != null) && __isset.refererCode)
      {
        tmp5.RefererCode = this.RefererCode;
      }
      tmp5.__isset.refererCode = this.__isset.refererCode;
      if(__isset.sentEmailDate)
      {
        tmp5.SentEmailDate = this.SentEmailDate;
      }
      tmp5.__isset.sentEmailDate = this.__isset.sentEmailDate;
      if(__isset.sentEmailCount)
      {
        tmp5.SentEmailCount = this.SentEmailCount;
      }
      tmp5.__isset.sentEmailCount = this.__isset.sentEmailCount;
      if(__isset.dailyEmailLimit)
      {
        tmp5.DailyEmailLimit = this.DailyEmailLimit;
      }
      tmp5.__isset.dailyEmailLimit = this.__isset.dailyEmailLimit;
      if(__isset.emailOptOutDate)
      {
        tmp5.EmailOptOutDate = this.EmailOptOutDate;
      }
      tmp5.__isset.emailOptOutDate = this.__isset.emailOptOutDate;
      if(__isset.partnerEmailOptInDate)
      {
        tmp5.PartnerEmailOptInDate = this.PartnerEmailOptInDate;
      }
      tmp5.__isset.partnerEmailOptInDate = this.__isset.partnerEmailOptInDate;
      if((PreferredLanguage != null) && __isset.preferredLanguage)
      {
        tmp5.PreferredLanguage = this.PreferredLanguage;
      }
      tmp5.__isset.preferredLanguage = this.__isset.preferredLanguage;
      if((PreferredCountry != null) && __isset.preferredCountry)
      {
        tmp5.PreferredCountry = this.PreferredCountry;
      }
      tmp5.__isset.preferredCountry = this.__isset.preferredCountry;
      if(__isset.clipFullPage)
      {
        tmp5.ClipFullPage = this.ClipFullPage;
      }
      tmp5.__isset.clipFullPage = this.__isset.clipFullPage;
      if((TwitterUserName != null) && __isset.twitterUserName)
      {
        tmp5.TwitterUserName = this.TwitterUserName;
      }
      tmp5.__isset.twitterUserName = this.__isset.twitterUserName;
      if((TwitterId != null) && __isset.twitterId)
      {
        tmp5.TwitterId = this.TwitterId;
      }
      tmp5.__isset.twitterId = this.__isset.twitterId;
      if((GroupName != null) && __isset.groupName)
      {
        tmp5.GroupName = this.GroupName;
      }
      tmp5.__isset.groupName = this.__isset.groupName;
      if((RecognitionLanguage != null) && __isset.recognitionLanguage)
      {
        tmp5.RecognitionLanguage = this.RecognitionLanguage;
      }
      tmp5.__isset.recognitionLanguage = this.__isset.recognitionLanguage;
      if((ReferralProof != null) && __isset.referralProof)
      {
        tmp5.ReferralProof = this.ReferralProof;
      }
      tmp5.__isset.referralProof = this.__isset.referralProof;
      if(__isset.educationalDiscount)
      {
        tmp5.EducationalDiscount = this.EducationalDiscount;
      }
      tmp5.__isset.educationalDiscount = this.__isset.educationalDiscount;
      if((BusinessAddress != null) && __isset.businessAddress)
      {
        tmp5.BusinessAddress = this.BusinessAddress;
      }
      tmp5.__isset.businessAddress = this.__isset.businessAddress;
      if(__isset.hideSponsorBilling)
      {
        tmp5.HideSponsorBilling = this.HideSponsorBilling;
      }
      tmp5.__isset.hideSponsorBilling = this.__isset.hideSponsorBilling;
      if(__isset.useEmailAutoFiling)
      {
        tmp5.UseEmailAutoFiling = this.UseEmailAutoFiling;
      }
      tmp5.__isset.useEmailAutoFiling = this.__isset.useEmailAutoFiling;
      if(__isset.reminderEmailConfig)
      {
        tmp5.ReminderEmailConfig = this.ReminderEmailConfig;
      }
      tmp5.__isset.reminderEmailConfig = this.__isset.reminderEmailConfig;
      if(__isset.emailAddressLastConfirmed)
      {
        tmp5.EmailAddressLastConfirmed = this.EmailAddressLastConfirmed;
      }
      tmp5.__isset.emailAddressLastConfirmed = this.__isset.emailAddressLastConfirmed;
      if(__isset.passwordUpdated)
      {
        tmp5.PasswordUpdated = this.PasswordUpdated;
      }
      tmp5.__isset.passwordUpdated = this.__isset.passwordUpdated;
      if(__isset.salesforcePushEnabled)
      {
        tmp5.SalesforcePushEnabled = this.SalesforcePushEnabled;
      }
      tmp5.__isset.salesforcePushEnabled = this.__isset.salesforcePushEnabled;
      if(__isset.shouldLogClientEvent)
      {
        tmp5.ShouldLogClientEvent = this.ShouldLogClientEvent;
      }
      tmp5.__isset.shouldLogClientEvent = this.__isset.shouldLogClientEvent;
      if(__isset.optOutMachineLearning)
      {
        tmp5.OptOutMachineLearning = this.OptOutMachineLearning;
      }
      tmp5.__isset.optOutMachineLearning = this.__isset.optOutMachineLearning;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                DefaultLocationName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                DefaultLatitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                DefaultLongitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Preactivation = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list6 = await iprot.ReadListBeginAsync(cancellationToken);
                  ViewedPromotions = new List<string>(_list6.Count);
                  for(int _i7 = 0; _i7 < _list6.Count; ++_i7)
                  {
                    string _elem8;
                    _elem8 = await iprot.ReadStringAsync(cancellationToken);
                    ViewedPromotions.Add(_elem8);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                IncomingEmailAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list9 = await iprot.ReadListBeginAsync(cancellationToken);
                  RecentMailedAddresses = new List<string>(_list9.Count);
                  for(int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    string _elem11;
                    _elem11 = await iprot.ReadStringAsync(cancellationToken);
                    RecentMailedAddresses.Add(_elem11);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Comments = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I64)
              {
                DateAgreedToTermsOfService = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I32)
              {
                MaxReferrals = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.I32)
              {
                ReferralCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                RefererCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.I64)
              {
                SentEmailDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.I32)
              {
                SentEmailCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.I32)
              {
                DailyEmailLimit = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.I64)
              {
                EmailOptOutDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.I64)
              {
                PartnerEmailOptInDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.String)
              {
                PreferredLanguage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.String)
              {
                PreferredCountry = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.Bool)
              {
                ClipFullPage = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.String)
              {
                TwitterUserName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.String)
              {
                TwitterId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 25:
              if (field.Type == TType.String)
              {
                GroupName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.String)
              {
                RecognitionLanguage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.String)
              {
                ReferralProof = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.Bool)
              {
                EducationalDiscount = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.String)
              {
                BusinessAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 31:
              if (field.Type == TType.Bool)
              {
                HideSponsorBilling = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 33:
              if (field.Type == TType.Bool)
              {
                UseEmailAutoFiling = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 34:
              if (field.Type == TType.I32)
              {
                ReminderEmailConfig = (global::Evernote.EDAM.Type.ReminderEmailConfig)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 35:
              if (field.Type == TType.I64)
              {
                EmailAddressLastConfirmed = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 36:
              if (field.Type == TType.I64)
              {
                PasswordUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 37:
              if (field.Type == TType.Bool)
              {
                SalesforcePushEnabled = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 38:
              if (field.Type == TType.Bool)
              {
                ShouldLogClientEvent = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 39:
              if (field.Type == TType.Bool)
              {
                OptOutMachineLearning = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp12 = new TStruct("UserAttributes");
        await oprot.WriteStructBeginAsync(tmp12, cancellationToken);
        var tmp13 = new TField();
        if((DefaultLocationName != null) && __isset.defaultLocationName)
        {
          tmp13.Name = "defaultLocationName";
          tmp13.Type = TType.String;
          tmp13.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(DefaultLocationName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.defaultLatitude)
        {
          tmp13.Name = "defaultLatitude";
          tmp13.Type = TType.Double;
          tmp13.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteDoubleAsync(DefaultLatitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.defaultLongitude)
        {
          tmp13.Name = "defaultLongitude";
          tmp13.Type = TType.Double;
          tmp13.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteDoubleAsync(DefaultLongitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.preactivation)
        {
          tmp13.Name = "preactivation";
          tmp13.Type = TType.Bool;
          tmp13.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(Preactivation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ViewedPromotions != null) && __isset.viewedPromotions)
        {
          tmp13.Name = "viewedPromotions";
          tmp13.Type = TType.List;
          tmp13.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, ViewedPromotions.Count), cancellationToken);
            foreach (string _iter14 in ViewedPromotions)
            {
              await oprot.WriteStringAsync(_iter14, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IncomingEmailAddress != null) && __isset.incomingEmailAddress)
        {
          tmp13.Name = "incomingEmailAddress";
          tmp13.Type = TType.String;
          tmp13.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(IncomingEmailAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecentMailedAddresses != null) && __isset.recentMailedAddresses)
        {
          tmp13.Name = "recentMailedAddresses";
          tmp13.Type = TType.List;
          tmp13.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, RecentMailedAddresses.Count), cancellationToken);
            foreach (string _iter15 in RecentMailedAddresses)
            {
              await oprot.WriteStringAsync(_iter15, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comments != null) && __isset.comments)
        {
          tmp13.Name = "comments";
          tmp13.Type = TType.String;
          tmp13.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(Comments, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.dateAgreedToTermsOfService)
        {
          tmp13.Name = "dateAgreedToTermsOfService";
          tmp13.Type = TType.I64;
          tmp13.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(DateAgreedToTermsOfService, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxReferrals)
        {
          tmp13.Name = "maxReferrals";
          tmp13.Type = TType.I32;
          tmp13.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI32Async(MaxReferrals, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.referralCount)
        {
          tmp13.Name = "referralCount";
          tmp13.Type = TType.I32;
          tmp13.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI32Async(ReferralCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RefererCode != null) && __isset.refererCode)
        {
          tmp13.Name = "refererCode";
          tmp13.Type = TType.String;
          tmp13.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(RefererCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sentEmailDate)
        {
          tmp13.Name = "sentEmailDate";
          tmp13.Type = TType.I64;
          tmp13.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(SentEmailDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sentEmailCount)
        {
          tmp13.Name = "sentEmailCount";
          tmp13.Type = TType.I32;
          tmp13.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI32Async(SentEmailCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.dailyEmailLimit)
        {
          tmp13.Name = "dailyEmailLimit";
          tmp13.Type = TType.I32;
          tmp13.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI32Async(DailyEmailLimit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.emailOptOutDate)
        {
          tmp13.Name = "emailOptOutDate";
          tmp13.Type = TType.I64;
          tmp13.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(EmailOptOutDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.partnerEmailOptInDate)
        {
          tmp13.Name = "partnerEmailOptInDate";
          tmp13.Type = TType.I64;
          tmp13.ID = 19;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(PartnerEmailOptInDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PreferredLanguage != null) && __isset.preferredLanguage)
        {
          tmp13.Name = "preferredLanguage";
          tmp13.Type = TType.String;
          tmp13.ID = 20;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(PreferredLanguage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PreferredCountry != null) && __isset.preferredCountry)
        {
          tmp13.Name = "preferredCountry";
          tmp13.Type = TType.String;
          tmp13.ID = 21;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(PreferredCountry, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.clipFullPage)
        {
          tmp13.Name = "clipFullPage";
          tmp13.Type = TType.Bool;
          tmp13.ID = 22;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(ClipFullPage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TwitterUserName != null) && __isset.twitterUserName)
        {
          tmp13.Name = "twitterUserName";
          tmp13.Type = TType.String;
          tmp13.ID = 23;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(TwitterUserName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TwitterId != null) && __isset.twitterId)
        {
          tmp13.Name = "twitterId";
          tmp13.Type = TType.String;
          tmp13.ID = 24;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(TwitterId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GroupName != null) && __isset.groupName)
        {
          tmp13.Name = "groupName";
          tmp13.Type = TType.String;
          tmp13.ID = 25;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(GroupName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RecognitionLanguage != null) && __isset.recognitionLanguage)
        {
          tmp13.Name = "recognitionLanguage";
          tmp13.Type = TType.String;
          tmp13.ID = 26;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(RecognitionLanguage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ReferralProof != null) && __isset.referralProof)
        {
          tmp13.Name = "referralProof";
          tmp13.Type = TType.String;
          tmp13.ID = 28;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(ReferralProof, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.educationalDiscount)
        {
          tmp13.Name = "educationalDiscount";
          tmp13.Type = TType.Bool;
          tmp13.ID = 29;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(EducationalDiscount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BusinessAddress != null) && __isset.businessAddress)
        {
          tmp13.Name = "businessAddress";
          tmp13.Type = TType.String;
          tmp13.ID = 30;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteStringAsync(BusinessAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hideSponsorBilling)
        {
          tmp13.Name = "hideSponsorBilling";
          tmp13.Type = TType.Bool;
          tmp13.ID = 31;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(HideSponsorBilling, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.useEmailAutoFiling)
        {
          tmp13.Name = "useEmailAutoFiling";
          tmp13.Type = TType.Bool;
          tmp13.ID = 33;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(UseEmailAutoFiling, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reminderEmailConfig)
        {
          tmp13.Name = "reminderEmailConfig";
          tmp13.Type = TType.I32;
          tmp13.ID = 34;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI32Async((int)ReminderEmailConfig, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.emailAddressLastConfirmed)
        {
          tmp13.Name = "emailAddressLastConfirmed";
          tmp13.Type = TType.I64;
          tmp13.ID = 35;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(EmailAddressLastConfirmed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.passwordUpdated)
        {
          tmp13.Name = "passwordUpdated";
          tmp13.Type = TType.I64;
          tmp13.ID = 36;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteI64Async(PasswordUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.salesforcePushEnabled)
        {
          tmp13.Name = "salesforcePushEnabled";
          tmp13.Type = TType.Bool;
          tmp13.ID = 37;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(SalesforcePushEnabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.shouldLogClientEvent)
        {
          tmp13.Name = "shouldLogClientEvent";
          tmp13.Type = TType.Bool;
          tmp13.ID = 38;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(ShouldLogClientEvent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.optOutMachineLearning)
        {
          tmp13.Name = "optOutMachineLearning";
          tmp13.Type = TType.Bool;
          tmp13.ID = 39;
          await oprot.WriteFieldBeginAsync(tmp13, cancellationToken);
          await oprot.WriteBoolAsync(OptOutMachineLearning, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserAttributes other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.defaultLocationName == other.__isset.defaultLocationName) && ((!__isset.defaultLocationName) || (global::System.Object.Equals(DefaultLocationName, other.DefaultLocationName))))
        && ((__isset.defaultLatitude == other.__isset.defaultLatitude) && ((!__isset.defaultLatitude) || (global::System.Object.Equals(DefaultLatitude, other.DefaultLatitude))))
        && ((__isset.defaultLongitude == other.__isset.defaultLongitude) && ((!__isset.defaultLongitude) || (global::System.Object.Equals(DefaultLongitude, other.DefaultLongitude))))
        && ((__isset.preactivation == other.__isset.preactivation) && ((!__isset.preactivation) || (global::System.Object.Equals(Preactivation, other.Preactivation))))
        && ((__isset.viewedPromotions == other.__isset.viewedPromotions) && ((!__isset.viewedPromotions) || (TCollections.Equals(ViewedPromotions, other.ViewedPromotions))))
        && ((__isset.incomingEmailAddress == other.__isset.incomingEmailAddress) && ((!__isset.incomingEmailAddress) || (global::System.Object.Equals(IncomingEmailAddress, other.IncomingEmailAddress))))
        && ((__isset.recentMailedAddresses == other.__isset.recentMailedAddresses) && ((!__isset.recentMailedAddresses) || (TCollections.Equals(RecentMailedAddresses, other.RecentMailedAddresses))))
        && ((__isset.comments == other.__isset.comments) && ((!__isset.comments) || (global::System.Object.Equals(Comments, other.Comments))))
        && ((__isset.dateAgreedToTermsOfService == other.__isset.dateAgreedToTermsOfService) && ((!__isset.dateAgreedToTermsOfService) || (global::System.Object.Equals(DateAgreedToTermsOfService, other.DateAgreedToTermsOfService))))
        && ((__isset.maxReferrals == other.__isset.maxReferrals) && ((!__isset.maxReferrals) || (global::System.Object.Equals(MaxReferrals, other.MaxReferrals))))
        && ((__isset.referralCount == other.__isset.referralCount) && ((!__isset.referralCount) || (global::System.Object.Equals(ReferralCount, other.ReferralCount))))
        && ((__isset.refererCode == other.__isset.refererCode) && ((!__isset.refererCode) || (global::System.Object.Equals(RefererCode, other.RefererCode))))
        && ((__isset.sentEmailDate == other.__isset.sentEmailDate) && ((!__isset.sentEmailDate) || (global::System.Object.Equals(SentEmailDate, other.SentEmailDate))))
        && ((__isset.sentEmailCount == other.__isset.sentEmailCount) && ((!__isset.sentEmailCount) || (global::System.Object.Equals(SentEmailCount, other.SentEmailCount))))
        && ((__isset.dailyEmailLimit == other.__isset.dailyEmailLimit) && ((!__isset.dailyEmailLimit) || (global::System.Object.Equals(DailyEmailLimit, other.DailyEmailLimit))))
        && ((__isset.emailOptOutDate == other.__isset.emailOptOutDate) && ((!__isset.emailOptOutDate) || (global::System.Object.Equals(EmailOptOutDate, other.EmailOptOutDate))))
        && ((__isset.partnerEmailOptInDate == other.__isset.partnerEmailOptInDate) && ((!__isset.partnerEmailOptInDate) || (global::System.Object.Equals(PartnerEmailOptInDate, other.PartnerEmailOptInDate))))
        && ((__isset.preferredLanguage == other.__isset.preferredLanguage) && ((!__isset.preferredLanguage) || (global::System.Object.Equals(PreferredLanguage, other.PreferredLanguage))))
        && ((__isset.preferredCountry == other.__isset.preferredCountry) && ((!__isset.preferredCountry) || (global::System.Object.Equals(PreferredCountry, other.PreferredCountry))))
        && ((__isset.clipFullPage == other.__isset.clipFullPage) && ((!__isset.clipFullPage) || (global::System.Object.Equals(ClipFullPage, other.ClipFullPage))))
        && ((__isset.twitterUserName == other.__isset.twitterUserName) && ((!__isset.twitterUserName) || (global::System.Object.Equals(TwitterUserName, other.TwitterUserName))))
        && ((__isset.twitterId == other.__isset.twitterId) && ((!__isset.twitterId) || (global::System.Object.Equals(TwitterId, other.TwitterId))))
        && ((__isset.groupName == other.__isset.groupName) && ((!__isset.groupName) || (global::System.Object.Equals(GroupName, other.GroupName))))
        && ((__isset.recognitionLanguage == other.__isset.recognitionLanguage) && ((!__isset.recognitionLanguage) || (global::System.Object.Equals(RecognitionLanguage, other.RecognitionLanguage))))
        && ((__isset.referralProof == other.__isset.referralProof) && ((!__isset.referralProof) || (global::System.Object.Equals(ReferralProof, other.ReferralProof))))
        && ((__isset.educationalDiscount == other.__isset.educationalDiscount) && ((!__isset.educationalDiscount) || (global::System.Object.Equals(EducationalDiscount, other.EducationalDiscount))))
        && ((__isset.businessAddress == other.__isset.businessAddress) && ((!__isset.businessAddress) || (global::System.Object.Equals(BusinessAddress, other.BusinessAddress))))
        && ((__isset.hideSponsorBilling == other.__isset.hideSponsorBilling) && ((!__isset.hideSponsorBilling) || (global::System.Object.Equals(HideSponsorBilling, other.HideSponsorBilling))))
        && ((__isset.useEmailAutoFiling == other.__isset.useEmailAutoFiling) && ((!__isset.useEmailAutoFiling) || (global::System.Object.Equals(UseEmailAutoFiling, other.UseEmailAutoFiling))))
        && ((__isset.reminderEmailConfig == other.__isset.reminderEmailConfig) && ((!__isset.reminderEmailConfig) || (global::System.Object.Equals(ReminderEmailConfig, other.ReminderEmailConfig))))
        && ((__isset.emailAddressLastConfirmed == other.__isset.emailAddressLastConfirmed) && ((!__isset.emailAddressLastConfirmed) || (global::System.Object.Equals(EmailAddressLastConfirmed, other.EmailAddressLastConfirmed))))
        && ((__isset.passwordUpdated == other.__isset.passwordUpdated) && ((!__isset.passwordUpdated) || (global::System.Object.Equals(PasswordUpdated, other.PasswordUpdated))))
        && ((__isset.salesforcePushEnabled == other.__isset.salesforcePushEnabled) && ((!__isset.salesforcePushEnabled) || (global::System.Object.Equals(SalesforcePushEnabled, other.SalesforcePushEnabled))))
        && ((__isset.shouldLogClientEvent == other.__isset.shouldLogClientEvent) && ((!__isset.shouldLogClientEvent) || (global::System.Object.Equals(ShouldLogClientEvent, other.ShouldLogClientEvent))))
        && ((__isset.optOutMachineLearning == other.__isset.optOutMachineLearning) && ((!__isset.optOutMachineLearning) || (global::System.Object.Equals(OptOutMachineLearning, other.OptOutMachineLearning))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((DefaultLocationName != null) && __isset.defaultLocationName)
        {
          hashcode = (hashcode * 397) + DefaultLocationName.GetHashCode();
        }
        if(__isset.defaultLatitude)
        {
          hashcode = (hashcode * 397) + DefaultLatitude.GetHashCode();
        }
        if(__isset.defaultLongitude)
        {
          hashcode = (hashcode * 397) + DefaultLongitude.GetHashCode();
        }
        if(__isset.preactivation)
        {
          hashcode = (hashcode * 397) + Preactivation.GetHashCode();
        }
        if((ViewedPromotions != null) && __isset.viewedPromotions)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ViewedPromotions);
        }
        if((IncomingEmailAddress != null) && __isset.incomingEmailAddress)
        {
          hashcode = (hashcode * 397) + IncomingEmailAddress.GetHashCode();
        }
        if((RecentMailedAddresses != null) && __isset.recentMailedAddresses)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(RecentMailedAddresses);
        }
        if((Comments != null) && __isset.comments)
        {
          hashcode = (hashcode * 397) + Comments.GetHashCode();
        }
        if(__isset.dateAgreedToTermsOfService)
        {
          hashcode = (hashcode * 397) + DateAgreedToTermsOfService.GetHashCode();
        }
        if(__isset.maxReferrals)
        {
          hashcode = (hashcode * 397) + MaxReferrals.GetHashCode();
        }
        if(__isset.referralCount)
        {
          hashcode = (hashcode * 397) + ReferralCount.GetHashCode();
        }
        if((RefererCode != null) && __isset.refererCode)
        {
          hashcode = (hashcode * 397) + RefererCode.GetHashCode();
        }
        if(__isset.sentEmailDate)
        {
          hashcode = (hashcode * 397) + SentEmailDate.GetHashCode();
        }
        if(__isset.sentEmailCount)
        {
          hashcode = (hashcode * 397) + SentEmailCount.GetHashCode();
        }
        if(__isset.dailyEmailLimit)
        {
          hashcode = (hashcode * 397) + DailyEmailLimit.GetHashCode();
        }
        if(__isset.emailOptOutDate)
        {
          hashcode = (hashcode * 397) + EmailOptOutDate.GetHashCode();
        }
        if(__isset.partnerEmailOptInDate)
        {
          hashcode = (hashcode * 397) + PartnerEmailOptInDate.GetHashCode();
        }
        if((PreferredLanguage != null) && __isset.preferredLanguage)
        {
          hashcode = (hashcode * 397) + PreferredLanguage.GetHashCode();
        }
        if((PreferredCountry != null) && __isset.preferredCountry)
        {
          hashcode = (hashcode * 397) + PreferredCountry.GetHashCode();
        }
        if(__isset.clipFullPage)
        {
          hashcode = (hashcode * 397) + ClipFullPage.GetHashCode();
        }
        if((TwitterUserName != null) && __isset.twitterUserName)
        {
          hashcode = (hashcode * 397) + TwitterUserName.GetHashCode();
        }
        if((TwitterId != null) && __isset.twitterId)
        {
          hashcode = (hashcode * 397) + TwitterId.GetHashCode();
        }
        if((GroupName != null) && __isset.groupName)
        {
          hashcode = (hashcode * 397) + GroupName.GetHashCode();
        }
        if((RecognitionLanguage != null) && __isset.recognitionLanguage)
        {
          hashcode = (hashcode * 397) + RecognitionLanguage.GetHashCode();
        }
        if((ReferralProof != null) && __isset.referralProof)
        {
          hashcode = (hashcode * 397) + ReferralProof.GetHashCode();
        }
        if(__isset.educationalDiscount)
        {
          hashcode = (hashcode * 397) + EducationalDiscount.GetHashCode();
        }
        if((BusinessAddress != null) && __isset.businessAddress)
        {
          hashcode = (hashcode * 397) + BusinessAddress.GetHashCode();
        }
        if(__isset.hideSponsorBilling)
        {
          hashcode = (hashcode * 397) + HideSponsorBilling.GetHashCode();
        }
        if(__isset.useEmailAutoFiling)
        {
          hashcode = (hashcode * 397) + UseEmailAutoFiling.GetHashCode();
        }
        if(__isset.reminderEmailConfig)
        {
          hashcode = (hashcode * 397) + ReminderEmailConfig.GetHashCode();
        }
        if(__isset.emailAddressLastConfirmed)
        {
          hashcode = (hashcode * 397) + EmailAddressLastConfirmed.GetHashCode();
        }
        if(__isset.passwordUpdated)
        {
          hashcode = (hashcode * 397) + PasswordUpdated.GetHashCode();
        }
        if(__isset.salesforcePushEnabled)
        {
          hashcode = (hashcode * 397) + SalesforcePushEnabled.GetHashCode();
        }
        if(__isset.shouldLogClientEvent)
        {
          hashcode = (hashcode * 397) + ShouldLogClientEvent.GetHashCode();
        }
        if(__isset.optOutMachineLearning)
        {
          hashcode = (hashcode * 397) + OptOutMachineLearning.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp16 = new StringBuilder("UserAttributes(");
      int tmp17 = 0;
      if((DefaultLocationName != null) && __isset.defaultLocationName)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("DefaultLocationName: ");
        DefaultLocationName.ToString(tmp16);
      }
      if(__isset.defaultLatitude)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("DefaultLatitude: ");
        DefaultLatitude.ToString(tmp16);
      }
      if(__isset.defaultLongitude)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("DefaultLongitude: ");
        DefaultLongitude.ToString(tmp16);
      }
      if(__isset.preactivation)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("Preactivation: ");
        Preactivation.ToString(tmp16);
      }
      if((ViewedPromotions != null) && __isset.viewedPromotions)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ViewedPromotions: ");
        ViewedPromotions.ToString(tmp16);
      }
      if((IncomingEmailAddress != null) && __isset.incomingEmailAddress)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("IncomingEmailAddress: ");
        IncomingEmailAddress.ToString(tmp16);
      }
      if((RecentMailedAddresses != null) && __isset.recentMailedAddresses)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("RecentMailedAddresses: ");
        RecentMailedAddresses.ToString(tmp16);
      }
      if((Comments != null) && __isset.comments)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("Comments: ");
        Comments.ToString(tmp16);
      }
      if(__isset.dateAgreedToTermsOfService)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("DateAgreedToTermsOfService: ");
        DateAgreedToTermsOfService.ToString(tmp16);
      }
      if(__isset.maxReferrals)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("MaxReferrals: ");
        MaxReferrals.ToString(tmp16);
      }
      if(__isset.referralCount)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ReferralCount: ");
        ReferralCount.ToString(tmp16);
      }
      if((RefererCode != null) && __isset.refererCode)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("RefererCode: ");
        RefererCode.ToString(tmp16);
      }
      if(__isset.sentEmailDate)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("SentEmailDate: ");
        SentEmailDate.ToString(tmp16);
      }
      if(__isset.sentEmailCount)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("SentEmailCount: ");
        SentEmailCount.ToString(tmp16);
      }
      if(__isset.dailyEmailLimit)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("DailyEmailLimit: ");
        DailyEmailLimit.ToString(tmp16);
      }
      if(__isset.emailOptOutDate)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("EmailOptOutDate: ");
        EmailOptOutDate.ToString(tmp16);
      }
      if(__isset.partnerEmailOptInDate)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("PartnerEmailOptInDate: ");
        PartnerEmailOptInDate.ToString(tmp16);
      }
      if((PreferredLanguage != null) && __isset.preferredLanguage)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("PreferredLanguage: ");
        PreferredLanguage.ToString(tmp16);
      }
      if((PreferredCountry != null) && __isset.preferredCountry)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("PreferredCountry: ");
        PreferredCountry.ToString(tmp16);
      }
      if(__isset.clipFullPage)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ClipFullPage: ");
        ClipFullPage.ToString(tmp16);
      }
      if((TwitterUserName != null) && __isset.twitterUserName)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("TwitterUserName: ");
        TwitterUserName.ToString(tmp16);
      }
      if((TwitterId != null) && __isset.twitterId)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("TwitterId: ");
        TwitterId.ToString(tmp16);
      }
      if((GroupName != null) && __isset.groupName)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("GroupName: ");
        GroupName.ToString(tmp16);
      }
      if((RecognitionLanguage != null) && __isset.recognitionLanguage)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("RecognitionLanguage: ");
        RecognitionLanguage.ToString(tmp16);
      }
      if((ReferralProof != null) && __isset.referralProof)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ReferralProof: ");
        ReferralProof.ToString(tmp16);
      }
      if(__isset.educationalDiscount)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("EducationalDiscount: ");
        EducationalDiscount.ToString(tmp16);
      }
      if((BusinessAddress != null) && __isset.businessAddress)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("BusinessAddress: ");
        BusinessAddress.ToString(tmp16);
      }
      if(__isset.hideSponsorBilling)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("HideSponsorBilling: ");
        HideSponsorBilling.ToString(tmp16);
      }
      if(__isset.useEmailAutoFiling)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("UseEmailAutoFiling: ");
        UseEmailAutoFiling.ToString(tmp16);
      }
      if(__isset.reminderEmailConfig)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ReminderEmailConfig: ");
        ReminderEmailConfig.ToString(tmp16);
      }
      if(__isset.emailAddressLastConfirmed)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("EmailAddressLastConfirmed: ");
        EmailAddressLastConfirmed.ToString(tmp16);
      }
      if(__isset.passwordUpdated)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("PasswordUpdated: ");
        PasswordUpdated.ToString(tmp16);
      }
      if(__isset.salesforcePushEnabled)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("SalesforcePushEnabled: ");
        SalesforcePushEnabled.ToString(tmp16);
      }
      if(__isset.shouldLogClientEvent)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("ShouldLogClientEvent: ");
        ShouldLogClientEvent.ToString(tmp16);
      }
      if(__isset.optOutMachineLearning)
      {
        if(0 < tmp17++) { tmp16.Append(", "); }
        tmp16.Append("OptOutMachineLearning: ");
        OptOutMachineLearning.ToString(tmp16);
      }
      tmp16.Append(')');
      return tmp16.ToString();
    }
  }

}

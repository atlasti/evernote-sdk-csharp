/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// If a Notebook has been opened to the public, the Notebook will have a
  /// reference to one of these structures, which gives the location and optional
  /// description of the externally-visible public Notebook.
  /// <dl>
  /// <dt>uri</dt>
  ///   <dd>If this field is present, then the notebook is published for
  ///   mass consumption on the Internet under the provided URI, which is
  ///   relative to a defined base publishing URI defined by the service.
  ///   This field can only be modified via the web service GUI ... publishing
  ///   cannot be modified via an offline client.
  ///   <br/>
  ///   Length:  EDAM_PUBLISHING_URI_LEN_MIN - EDAM_PUBLISHING_URI_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_PUBLISHING_URI_REGEX
  ///   </dd>
  /// 
  /// <dt>order</dt>
  ///   <dd>When the notes are publicly displayed, they will be sorted
  ///   based on the requested criteria.
  ///   </dd>
  /// 
  /// <dt>ascending</dt>
  ///   <dd>If this is set to true, then the public notes will be
  ///   displayed in ascending order (e.g. from oldest to newest).  Otherwise,
  ///   the notes will be displayed in descending order (e.g. newest to oldest).
  ///   </dd>
  /// 
  /// <dt>publicDescription</dt>
  ///   <dd>This field may be used to provide a short
  ///   description of the notebook, which may be displayed when (e.g.) the
  ///   notebook is shown in a public view.  Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_PUBLISHING_DESCRIPTION_LEN_MIN -
  ///            EDAM_PUBLISHING_DESCRIPTION_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_PUBLISHING_DESCRIPTION_REGEX
  ///   </dd>
  /// 
  /// </dl>
  /// </summary>
  public partial class Publishing : TBase
  {
    private string _uri;
    private global::Evernote.EDAM.Type.NoteSortOrder _order;
    private bool _ascending;
    private string _publicDescription;

    public string Uri
    {
      get
      {
        return _uri;
      }
      set
      {
        __isset.uri = true;
        this._uri = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.NoteSortOrder"/>
    /// </summary>
    public global::Evernote.EDAM.Type.NoteSortOrder Order
    {
      get
      {
        return _order;
      }
      set
      {
        __isset.order = true;
        this._order = value;
      }
    }

    public bool Ascending
    {
      get
      {
        return _ascending;
      }
      set
      {
        __isset.@ascending = true;
        this._ascending = value;
      }
    }

    public string PublicDescription
    {
      get
      {
        return _publicDescription;
      }
      set
      {
        __isset.publicDescription = true;
        this._publicDescription = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool uri;
      public bool order;
      public bool @ascending;
      public bool publicDescription;
    }

    public Publishing()
    {
    }

    public Publishing DeepCopy()
    {
      var tmp128 = new Publishing();
      if((Uri != null) && __isset.uri)
      {
        tmp128.Uri = this.Uri;
      }
      tmp128.__isset.uri = this.__isset.uri;
      if(__isset.order)
      {
        tmp128.Order = this.Order;
      }
      tmp128.__isset.order = this.__isset.order;
      if(__isset.@ascending)
      {
        tmp128.Ascending = this.Ascending;
      }
      tmp128.__isset.@ascending = this.__isset.@ascending;
      if((PublicDescription != null) && __isset.publicDescription)
      {
        tmp128.PublicDescription = this.PublicDescription;
      }
      tmp128.__isset.publicDescription = this.__isset.publicDescription;
      return tmp128;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Uri = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Order = (global::Evernote.EDAM.Type.NoteSortOrder)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Ascending = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                PublicDescription = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp129 = new TStruct("Publishing");
        await oprot.WriteStructBeginAsync(tmp129, cancellationToken);
        var tmp130 = new TField();
        if((Uri != null) && __isset.uri)
        {
          tmp130.Name = "uri";
          tmp130.Type = TType.String;
          tmp130.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteStringAsync(Uri, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.order)
        {
          tmp130.Name = "order";
          tmp130.Type = TType.I32;
          tmp130.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteI32Async((int)Order, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.@ascending)
        {
          tmp130.Name = "ascending";
          tmp130.Type = TType.Bool;
          tmp130.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteBoolAsync(Ascending, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PublicDescription != null) && __isset.publicDescription)
        {
          tmp130.Name = "publicDescription";
          tmp130.Type = TType.String;
          tmp130.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
          await oprot.WriteStringAsync(PublicDescription, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Publishing other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.uri == other.__isset.uri) && ((!__isset.uri) || (global::System.Object.Equals(Uri, other.Uri))))
        && ((__isset.order == other.__isset.order) && ((!__isset.order) || (global::System.Object.Equals(Order, other.Order))))
        && ((__isset.@ascending == other.__isset.@ascending) && ((!__isset.@ascending) || (global::System.Object.Equals(Ascending, other.Ascending))))
        && ((__isset.publicDescription == other.__isset.publicDescription) && ((!__isset.publicDescription) || (global::System.Object.Equals(PublicDescription, other.PublicDescription))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Uri != null) && __isset.uri)
        {
          hashcode = (hashcode * 397) + Uri.GetHashCode();
        }
        if(__isset.order)
        {
          hashcode = (hashcode * 397) + Order.GetHashCode();
        }
        if(__isset.@ascending)
        {
          hashcode = (hashcode * 397) + Ascending.GetHashCode();
        }
        if((PublicDescription != null) && __isset.publicDescription)
        {
          hashcode = (hashcode * 397) + PublicDescription.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp131 = new StringBuilder("Publishing(");
      int tmp132 = 0;
      if((Uri != null) && __isset.uri)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("Uri: ");
        Uri.ToString(tmp131);
      }
      if(__isset.order)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("Order: ");
        Order.ToString(tmp131);
      }
      if(__isset.@ascending)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("Ascending: ");
        Ascending.ToString(tmp131);
      }
      if((PublicDescription != null) && __isset.publicDescription)
      {
        if(0 < tmp132++) { tmp131.Append(", "); }
        tmp131.Append("PublicDescription: ");
        PublicDescription.ToString(tmp131);
      }
      tmp131.Append(')');
      return tmp131.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  A tag within a user's account is a unique name which may be organized
  ///  a simple hierarchy.
  /// <dl>
  ///  <dt>guid</dt>
  ///    <dd>The unique identifier of this tag. Will be set by the service,
  ///    so may be omitted by the client when creating the Tag.
  ///    <br/>
  ///    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_GUID_REGEX
  ///    </dd>
  /// 
  ///  <dt>name</dt>
  ///    <dd>A sequence of characters representing the tag's identifier.
  ///    Case is preserved, but is ignored for comparisons.
  ///    This means that an account may only have one tag with a given name, via
  ///    case-insensitive comparison, so an account may not have both "food" and
  ///    "Food" tags.
  ///    May not contain a comma (','), and may not begin or end with a space.
  ///    <br/>
  ///    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_TAG_NAME_REGEX
  ///    </dd>
  /// 
  ///  <dt>parentGuid</dt>
  ///    <dd>If this is set, then this is the GUID of the tag that
  ///    holds this tag within the tag organizational hierarchy.  If this is
  ///    not set, then the tag has no parent and it is a "top level" tag.
  ///    Cycles are not allowed (e.g. a->parent->parent == a) and will be
  ///    rejected by the service.
  ///    <br/>
  ///    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_GUID_REGEX
  ///    </dd>
  /// 
  ///  <dt>updateSequenceNum</dt>
  ///    <dd>A number identifying the last transaction to
  ///    modify the state of this object.  The USN values are sequential within an
  ///    account, and can be used to compare the order of modifications within the
  ///    service.
  ///    </dd>
  ///  </dl>
  /// </summary>
  public partial class Tag : TBase
  {
    private string _guid;
    private string _name;
    private string _parentGuid;
    private int _updateSequenceNum;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string ParentGuid
    {
      get
      {
        return _parentGuid;
      }
      set
      {
        __isset.parentGuid = true;
        this._parentGuid = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool guid;
      public bool name;
      public bool parentGuid;
      public bool updateSequenceNum;
    }

    public Tag()
    {
    }

    public Tag DeepCopy()
    {
      var tmp53 = new Tag();
      if((Guid != null) && __isset.guid)
      {
        tmp53.Guid = this.Guid;
      }
      tmp53.__isset.guid = this.__isset.guid;
      if((Name != null) && __isset.name)
      {
        tmp53.Name = this.Name;
      }
      tmp53.__isset.name = this.__isset.name;
      if((ParentGuid != null) && __isset.parentGuid)
      {
        tmp53.ParentGuid = this.ParentGuid;
      }
      tmp53.__isset.parentGuid = this.__isset.parentGuid;
      if(__isset.updateSequenceNum)
      {
        tmp53.UpdateSequenceNum = this.UpdateSequenceNum;
      }
      tmp53.__isset.updateSequenceNum = this.__isset.updateSequenceNum;
      return tmp53;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ParentGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                UpdateSequenceNum = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp54 = new TStruct("Tag");
        await oprot.WriteStructBeginAsync(tmp54, cancellationToken);
        var tmp55 = new TField();
        if((Guid != null) && __isset.guid)
        {
          tmp55.Name = "guid";
          tmp55.Type = TType.String;
          tmp55.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp55, cancellationToken);
          await oprot.WriteStringAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp55.Name = "name";
          tmp55.Type = TType.String;
          tmp55.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp55, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentGuid != null) && __isset.parentGuid)
        {
          tmp55.Name = "parentGuid";
          tmp55.Type = TType.String;
          tmp55.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp55, cancellationToken);
          await oprot.WriteStringAsync(ParentGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.updateSequenceNum)
        {
          tmp55.Name = "updateSequenceNum";
          tmp55.Type = TType.I32;
          tmp55.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp55, cancellationToken);
          await oprot.WriteI32Async(UpdateSequenceNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Tag other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.guid == other.__isset.guid) && ((!__isset.guid) || (global::System.Object.Equals(Guid, other.Guid))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.parentGuid == other.__isset.parentGuid) && ((!__isset.parentGuid) || (global::System.Object.Equals(ParentGuid, other.ParentGuid))))
        && ((__isset.updateSequenceNum == other.__isset.updateSequenceNum) && ((!__isset.updateSequenceNum) || (global::System.Object.Equals(UpdateSequenceNum, other.UpdateSequenceNum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Guid != null) && __isset.guid)
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((ParentGuid != null) && __isset.parentGuid)
        {
          hashcode = (hashcode * 397) + ParentGuid.GetHashCode();
        }
        if(__isset.updateSequenceNum)
        {
          hashcode = (hashcode * 397) + UpdateSequenceNum.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp56 = new StringBuilder("Tag(");
      int tmp57 = 0;
      if((Guid != null) && __isset.guid)
      {
        if(0 < tmp57++) { tmp56.Append(", "); }
        tmp56.Append("Guid: ");
        Guid.ToString(tmp56);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp57++) { tmp56.Append(", "); }
        tmp56.Append("Name: ");
        Name.ToString(tmp56);
      }
      if((ParentGuid != null) && __isset.parentGuid)
      {
        if(0 < tmp57++) { tmp56.Append(", "); }
        tmp56.Append("ParentGuid: ");
        ParentGuid.ToString(tmp56);
      }
      if(__isset.updateSequenceNum)
      {
        if(0 < tmp57++) { tmp56.Append(", "); }
        tmp56.Append("UpdateSequenceNum: ");
        UpdateSequenceNum.ToString(tmp56);
      }
      tmp56.Append(')');
      return tmp56.ToString();
    }
  }

}

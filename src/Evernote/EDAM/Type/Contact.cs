/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure that represents contact information. Note this does not necessarily correspond to
  /// an Evernote user.
  /// 
  /// <dl>
  /// <dt>name</dt>
  /// <dd>The displayable name of this contact. This field is filled in by the service and
  ///     is read-only to clients.
  /// </dd>
  /// <dt>id</dt>
  /// <dd>A unique identifier for this ContactType.
  /// </dd>
  /// <dt>type</dt>
  /// <dd>What service does this contact come from?
  /// </dd>
  /// <dt>photoUrl</dt>
  /// <dd>A URL of a profile photo representing this Contact. This field is filled in by the
  ///     service and is read-only to clients.
  /// </dd>
  /// <dt>photoLastUpdated</dt>
  /// <dd>timestamp when the profile photo at 'photoUrl' was last updated.
  ///     This field will be null if the user has never set a profile photo.
  ///     This field is filled in by the service and is read-only to clients.
  /// </dd>
  /// <dt>messagingPermit</dt>
  /// <dd>This field will only be filled by the service when it is giving a Contact record
  ///     to a client, and that client does not normally have enough permission to send a
  ///     new message to the person represented through this Contact. In that case, this
  ///     whole Contact record could be used to send a new Message to the Contact, and the
  ///     service will inspect this permit to confirm that operation was allowed.
  /// </dd>
  /// <dt>messagingPermitExpires</dt>
  /// <dd>If this field is set, then this (whole) Contact record may be used in calls to
  ///     sendMessage until this time. After that time, those calls may be rejected by the
  ///     service if the caller does not have direct permission to initiate a message with
  ///     the represented Evernote user.
  /// </dd>
  /// </dl>
  /// </summary>
  public partial class Contact : TBase
  {
    private string _name;
    private string _id;
    private global::Evernote.EDAM.Type.ContactType _type;
    private string _photoUrl;
    private long _photoLastUpdated;
    private byte[] _messagingPermit;
    private long _messagingPermitExpires;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Evernote.EDAM.Type.ContactType"/>
    /// </summary>
    public global::Evernote.EDAM.Type.ContactType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string PhotoUrl
    {
      get
      {
        return _photoUrl;
      }
      set
      {
        __isset.photoUrl = true;
        this._photoUrl = value;
      }
    }

    public long PhotoLastUpdated
    {
      get
      {
        return _photoLastUpdated;
      }
      set
      {
        __isset.photoLastUpdated = true;
        this._photoLastUpdated = value;
      }
    }

    public byte[] MessagingPermit
    {
      get
      {
        return _messagingPermit;
      }
      set
      {
        __isset.messagingPermit = true;
        this._messagingPermit = value;
      }
    }

    public long MessagingPermitExpires
    {
      get
      {
        return _messagingPermitExpires;
      }
      set
      {
        __isset.messagingPermitExpires = true;
        this._messagingPermitExpires = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool name;
      public bool id;
      public bool type;
      public bool photoUrl;
      public bool photoLastUpdated;
      public bool messagingPermit;
      public bool messagingPermitExpires;
    }

    public Contact()
    {
    }

    public Contact DeepCopy()
    {
      var tmp43 = new Contact();
      if((Name != null) && __isset.name)
      {
        tmp43.Name = this.Name;
      }
      tmp43.__isset.name = this.__isset.name;
      if((Id != null) && __isset.id)
      {
        tmp43.Id = this.Id;
      }
      tmp43.__isset.id = this.__isset.id;
      if(__isset.type)
      {
        tmp43.Type = this.Type;
      }
      tmp43.__isset.type = this.__isset.type;
      if((PhotoUrl != null) && __isset.photoUrl)
      {
        tmp43.PhotoUrl = this.PhotoUrl;
      }
      tmp43.__isset.photoUrl = this.__isset.photoUrl;
      if(__isset.photoLastUpdated)
      {
        tmp43.PhotoLastUpdated = this.PhotoLastUpdated;
      }
      tmp43.__isset.photoLastUpdated = this.__isset.photoLastUpdated;
      if((MessagingPermit != null) && __isset.messagingPermit)
      {
        tmp43.MessagingPermit = this.MessagingPermit.ToArray();
      }
      tmp43.__isset.messagingPermit = this.__isset.messagingPermit;
      if(__isset.messagingPermitExpires)
      {
        tmp43.MessagingPermitExpires = this.MessagingPermitExpires;
      }
      tmp43.__isset.messagingPermitExpires = this.__isset.messagingPermitExpires;
      return tmp43;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Id = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Type = (global::Evernote.EDAM.Type.ContactType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                PhotoUrl = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                PhotoLastUpdated = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                MessagingPermit = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                MessagingPermitExpires = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp44 = new TStruct("Contact");
        await oprot.WriteStructBeginAsync(tmp44, cancellationToken);
        var tmp45 = new TField();
        if((Name != null) && __isset.name)
        {
          tmp45.Name = "name";
          tmp45.Type = TType.String;
          tmp45.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Id != null) && __isset.id)
        {
          tmp45.Name = "id";
          tmp45.Type = TType.String;
          tmp45.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteStringAsync(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.type)
        {
          tmp45.Name = "type";
          tmp45.Type = TType.I32;
          tmp45.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PhotoUrl != null) && __isset.photoUrl)
        {
          tmp45.Name = "photoUrl";
          tmp45.Type = TType.String;
          tmp45.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteStringAsync(PhotoUrl, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.photoLastUpdated)
        {
          tmp45.Name = "photoLastUpdated";
          tmp45.Type = TType.I64;
          tmp45.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteI64Async(PhotoLastUpdated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MessagingPermit != null) && __isset.messagingPermit)
        {
          tmp45.Name = "messagingPermit";
          tmp45.Type = TType.String;
          tmp45.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteBinaryAsync(MessagingPermit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.messagingPermitExpires)
        {
          tmp45.Name = "messagingPermitExpires";
          tmp45.Type = TType.I64;
          tmp45.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
          await oprot.WriteI64Async(MessagingPermitExpires, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Contact other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
        && ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.photoUrl == other.__isset.photoUrl) && ((!__isset.photoUrl) || (global::System.Object.Equals(PhotoUrl, other.PhotoUrl))))
        && ((__isset.photoLastUpdated == other.__isset.photoLastUpdated) && ((!__isset.photoLastUpdated) || (global::System.Object.Equals(PhotoLastUpdated, other.PhotoLastUpdated))))
        && ((__isset.messagingPermit == other.__isset.messagingPermit) && ((!__isset.messagingPermit) || (TCollections.Equals(MessagingPermit, other.MessagingPermit))))
        && ((__isset.messagingPermitExpires == other.__isset.messagingPermitExpires) && ((!__isset.messagingPermitExpires) || (global::System.Object.Equals(MessagingPermitExpires, other.MessagingPermitExpires))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Id != null) && __isset.id)
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((PhotoUrl != null) && __isset.photoUrl)
        {
          hashcode = (hashcode * 397) + PhotoUrl.GetHashCode();
        }
        if(__isset.photoLastUpdated)
        {
          hashcode = (hashcode * 397) + PhotoLastUpdated.GetHashCode();
        }
        if((MessagingPermit != null) && __isset.messagingPermit)
        {
          hashcode = (hashcode * 397) + MessagingPermit.GetHashCode();
        }
        if(__isset.messagingPermitExpires)
        {
          hashcode = (hashcode * 397) + MessagingPermitExpires.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp46 = new StringBuilder("Contact(");
      int tmp47 = 0;
      if((Name != null) && __isset.name)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("Name: ");
        Name.ToString(tmp46);
      }
      if((Id != null) && __isset.id)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("Id: ");
        Id.ToString(tmp46);
      }
      if(__isset.type)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("Type: ");
        Type.ToString(tmp46);
      }
      if((PhotoUrl != null) && __isset.photoUrl)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("PhotoUrl: ");
        PhotoUrl.ToString(tmp46);
      }
      if(__isset.photoLastUpdated)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("PhotoLastUpdated: ");
        PhotoLastUpdated.ToString(tmp46);
      }
      if((MessagingPermit != null) && __isset.messagingPermit)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("MessagingPermit: ");
        MessagingPermit.ToString(tmp46);
      }
      if(__isset.messagingPermitExpires)
      {
        if(0 < tmp47++) { tmp46.Append(", "); }
        tmp46.Append("MessagingPermitExpires: ");
        MessagingPermitExpires.ToString(tmp46);
      }
      tmp46.Append(')');
      return tmp46.ToString();
    }
  }

}

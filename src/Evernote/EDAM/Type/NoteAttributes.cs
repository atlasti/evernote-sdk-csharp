/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// The list of optional attributes that can be stored on a note.
  /// <dl>
  /// <dt>subjectDate</dt>
  ///   <dd>time that the note refers to
  ///   </dd>
  /// 
  /// <dt>latitude</dt>
  ///   <dd>the latitude where the note was taken
  ///   </dd>
  /// 
  /// <dt>longitude</dt>
  ///   <dd>the longitude where the note was taken
  ///   </dd>
  /// 
  /// <dt>altitude</dt>
  ///   <dd>the altitude where the note was taken
  ///   </dd>
  /// 
  /// <dt>author</dt>
  ///   <dd>the author of the content of the note
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>source</dt>
  ///   <dd>the method that the note was added to the account, if the
  ///   note wasn't directly authored in an Evernote desktop client.
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>sourceURL</dt>
  ///   <dd>the original location where the resource was hosted. For web clips,
  ///   this will be the URL of the page that was clipped.
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>sourceApplication</dt>
  ///   <dd>an identifying string for the application that
  ///   created this note.  This string does not have a guaranteed syntax or
  ///   structure -- it is intended for human inspection and tracking.
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>shareDate</dt>
  ///  <dd>The date and time when this note was directly shared via its own URL.
  ///  This is only set on notes that were individually shared - it is independent
  ///  of any notebook-level sharing of the containing notebook. This field
  ///  is treated as "read-only" for clients; the server will ignore changes
  ///  to this field from an external client.
  ///  </dd>
  /// 
  /// <dt>reminderOrder</dt>
  /// <dd>The set of notes with this parameter set are considered
  /// "reminders" and are to be treated specially by clients to give them
  /// higher UI prominence within a notebook.  The value is used to sort
  /// the reminder notes within the notebook with higher values
  /// representing greater prominence.  Outside of the context of a
  /// notebook, the value of this parameter is undefined.  The value is
  /// not intended to be compared to the values of reminder notes in
  /// other notebooks.  In order to allow clients to place a note at a
  /// higher precedence than other notes, you should never set a value
  /// greater than the current time (as defined for a Timetstamp). To
  /// place a note at higher precedence than existing notes, set the
  /// value to the current time as defined for a timestamp (milliseconds
  /// since the epoch).  Synchronizing clients must remember the time when
  /// the update was performed, using the local clock on the client,
  /// and use that value when they later upload the note to the service.
  /// Clients must not set the reminderOrder to the reminderTime as the
  /// reminderTime could be in the future.  Those two fields are never
  /// intended to be related.  The correct value for reminderOrder field
  /// for new notes is the "current" time when the user indicated that
  /// the note is a reminder.  Clients may implement a separate
  /// "sort by date" feature to show notes ordered by reminderTime.
  /// Whenever a reminderDoneTime or reminderTime is set but a
  /// reminderOrder is not set, the server will fill in the current
  /// server time for the reminderOrder field.</dd>
  /// 
  /// <dt>reminderDoneTime</dt>
  /// <dd>The date and time when a user dismissed/"marked done" the reminder
  /// on the note.  Users typically do not manually set this value directly
  /// as it is set to the time when the user dismissed/"marked done" the
  /// reminder.</dd>
  /// 
  /// <dt>reminderTime</dt>
  /// <dd>The date and time a user has selected to be reminded of the note.
  /// A note with this value set is known as a "reminder" and the user can
  /// be reminded, via e-mail or client-specific notifications, of the note
  /// when the time is reached or about to be reached.  When a user sets
  /// a reminder time on a note that has a reminder done time, and that
  /// reminder time is in the future, then the reminder done time should be
  /// cleared.  This should happen regardless of any existing reminder time
  /// that may have previously existed on the note.</dd>
  /// 
  /// <dt>placeName</dt>
  /// <dd>Allows the user to assign a human-readable location name associated
  /// with a note. Users may assign values like 'Home' and 'Work'. Place
  /// names may also be populated with values from geonames database
  /// (e.g., a restaurant name). Applications are encouraged to normalize values
  /// so that grouping values by place name provides a useful result. Applications
  /// MUST NOT automatically add place name values based on geolocation without
  /// confirmation from the user; that is, the value in this field should be
  /// more useful than a simple automated lookup based on the note's latitude
  /// and longitude.</dd>
  /// 
  /// <dt>contentClass</dt>
  /// <dd>The class (or type) of note. This field is used to indicate to
  /// clients that special structured information is represented within
  /// the note such that special rules apply when making
  /// modifications. If contentClass is set and the client
  /// application does not specifically support the specified class,
  /// the client MUST treat the note as read-only. In this case, the
  /// client MAY modify the note's notebook and tags via the
  /// Note.notebookGuid and Note.tagGuids fields.  The client MAY also
  /// modify the reminderOrder field as well as the reminderTime and
  /// reminderDoneTime fields.
  /// <p>Applications should set contentClass only when they are creating notes
  /// that contain structured information that needs to be maintained in order
  /// for the user to be able to use the note within that application.
  /// Setting contentClass makes a note read-only in other applications, so
  /// there is a trade-off when an application chooses to use contentClass.
  /// Applications that set contentClass when creating notes must use a contentClass
  /// string of the form <i>CompanyName.ApplicationName</i> to ensure uniqueness.</p>
  /// Length restrictions: EDAM_NOTE_CONTENT_CLASS_LEN_MIN, EDAM_NOTE_CONTENT_CLASS_LEN_MAX
  /// <br/>
  /// Regex: EDAM_NOTE_CONTENT_CLASS_REGEX
  /// </dd>
  /// 
  /// <dt>applicationData</dt>
  /// <dd>Provides a location for applications to store a relatively small
  /// (4kb) blob of data that is not meant to be visible to the user and
  /// that is opaque to the Evernote service. A single application may use at most
  /// one entry in this map, using its API consumer key as the map key. See the
  /// documentation for LazyMap for a description of when the actual map values
  /// are returned by the service.
  /// <p>To safely add or modify your application's entry in the map, use
  /// NoteStore.setNoteApplicationDataEntry. To safely remove your application's
  /// entry from the map, use NoteStore.unsetNoteApplicationDataEntry.</p>
  /// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
  /// <br/>
  /// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
  /// <br/>
  /// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
  /// </dd>
  /// 
  /// <dt>creatorId</dt>
  /// <dd>The numeric user ID of the user who originally created the note.</dd>
  /// 
  /// <dt>lastEditedBy</dt>
  /// <dd>An indication of who made the last change to the note.  If you are
  /// accessing the note via a shared notebook to which you have modification
  /// rights, or if you are the owner of the notebook to which the note belongs,
  /// then you have access to the value.  In this case, the value will be
  /// unset if the owner of the notebook containing the note was the last to
  /// make the modification, else it will be a string describing the
  /// guest who made the last edit.  If you do not have access to this value,
  /// it will be left unset.  This field is read-only by clients.  The server
  /// will ignore all values set by clients into this field.</dd>
  /// 
  /// <dt>lastEditorId</dt>
  /// <dd>The numeric user ID of the user described in lastEditedBy.</dd>
  /// 
  /// <dt>classifications</dt>
  /// <dd>A map of classifications applied to the note by clients or by the
  /// Evernote service. The key is the string name of the classification type,
  /// and the value is a constant that begins with CLASSIFICATION_.</dd>
  /// 
  /// <dt>sharedWithBusiness</dt>
  /// <dd>When this flag is set on a business note, any user in that business
  /// may view the note if they request it by GUID. This field is read-only by
  /// clients. The server will ignore all values set by clients into this field.
  /// 
  /// To share a note with the business, use NoteStore.shareNoteWithBusiness and
  /// to stop sharing a note with the business, use NoteStore.stopSharingNoteWithBusiness.
  /// </dd>
  /// 
  /// <dt>conflictSourceNoteGuid</dt>
  /// <dd>If set, this specifies the GUID of a note that caused a sync conflict
  /// resulting in the creation of a duplicate note. The duplicated note contains
  /// the user's changes that could not be applied as a result of the sync conflict,
  /// and uses the conflictSourceNoteGuid field to specify the note that caused the
  /// conflict. This allows clients to provide a customized user experience for note
  /// conflicts.
  /// </dd>
  /// 
  /// <dt>noteTitleQuality</dt>
  /// <dd>If set, this specifies that the note's title was automatically generated
  /// and indicates the likelihood that the generated title is useful for display to
  /// the user. If not set, the note's title was manually entered by the user.
  /// 
  /// Clients MUST set this attribute to one of the following values when the
  /// corresponding note's title was not manually entered by the user:
  /// EDAM_NOTE_TITLE_QUALITY_UNTITLED, EDAM_NOTE_TITLE_QUALITY_LOW,
  /// EDAM_NOTE_TITLE_QUALITY_MEDIUM or EDAM_NOTE_TITLE_QUALITY_HIGH.
  /// 
  /// When a user edits a note's title, clients MUST unset this value.
  /// </dd>
  /// </dl>
  /// </summary>
  public partial class NoteAttributes : TBase
  {
    private long _subjectDate;
    private double _latitude;
    private double _longitude;
    private double _altitude;
    private string _author;
    private string _source;
    private string _sourceURL;
    private string _sourceApplication;
    private long _shareDate;
    private long _reminderOrder;
    private long _reminderDoneTime;
    private long _reminderTime;
    private string _placeName;
    private string _contentClass;
    private global::Evernote.EDAM.Type.LazyMap _applicationData;
    private string _lastEditedBy;
    private Dictionary<string, string> _classifications;
    private int _creatorId;
    private int _lastEditorId;
    private bool _sharedWithBusiness;
    private string _conflictSourceNoteGuid;
    private int _noteTitleQuality;

    public long SubjectDate
    {
      get
      {
        return _subjectDate;
      }
      set
      {
        __isset.subjectDate = true;
        this._subjectDate = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Altitude
    {
      get
      {
        return _altitude;
      }
      set
      {
        __isset.altitude = true;
        this._altitude = value;
      }
    }

    public string Author
    {
      get
      {
        return _author;
      }
      set
      {
        __isset.author = true;
        this._author = value;
      }
    }

    public string Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public string SourceURL
    {
      get
      {
        return _sourceURL;
      }
      set
      {
        __isset.sourceURL = true;
        this._sourceURL = value;
      }
    }

    public string SourceApplication
    {
      get
      {
        return _sourceApplication;
      }
      set
      {
        __isset.sourceApplication = true;
        this._sourceApplication = value;
      }
    }

    public long ShareDate
    {
      get
      {
        return _shareDate;
      }
      set
      {
        __isset.shareDate = true;
        this._shareDate = value;
      }
    }

    public long ReminderOrder
    {
      get
      {
        return _reminderOrder;
      }
      set
      {
        __isset.reminderOrder = true;
        this._reminderOrder = value;
      }
    }

    public long ReminderDoneTime
    {
      get
      {
        return _reminderDoneTime;
      }
      set
      {
        __isset.reminderDoneTime = true;
        this._reminderDoneTime = value;
      }
    }

    public long ReminderTime
    {
      get
      {
        return _reminderTime;
      }
      set
      {
        __isset.reminderTime = true;
        this._reminderTime = value;
      }
    }

    public string PlaceName
    {
      get
      {
        return _placeName;
      }
      set
      {
        __isset.placeName = true;
        this._placeName = value;
      }
    }

    public string ContentClass
    {
      get
      {
        return _contentClass;
      }
      set
      {
        __isset.contentClass = true;
        this._contentClass = value;
      }
    }

    public global::Evernote.EDAM.Type.LazyMap ApplicationData
    {
      get
      {
        return _applicationData;
      }
      set
      {
        __isset.applicationData = true;
        this._applicationData = value;
      }
    }

    public string LastEditedBy
    {
      get
      {
        return _lastEditedBy;
      }
      set
      {
        __isset.lastEditedBy = true;
        this._lastEditedBy = value;
      }
    }

    public Dictionary<string, string> Classifications
    {
      get
      {
        return _classifications;
      }
      set
      {
        __isset.classifications = true;
        this._classifications = value;
      }
    }

    public int CreatorId
    {
      get
      {
        return _creatorId;
      }
      set
      {
        __isset.creatorId = true;
        this._creatorId = value;
      }
    }

    public int LastEditorId
    {
      get
      {
        return _lastEditorId;
      }
      set
      {
        __isset.lastEditorId = true;
        this._lastEditorId = value;
      }
    }

    public bool SharedWithBusiness
    {
      get
      {
        return _sharedWithBusiness;
      }
      set
      {
        __isset.sharedWithBusiness = true;
        this._sharedWithBusiness = value;
      }
    }

    public string ConflictSourceNoteGuid
    {
      get
      {
        return _conflictSourceNoteGuid;
      }
      set
      {
        __isset.conflictSourceNoteGuid = true;
        this._conflictSourceNoteGuid = value;
      }
    }

    public int NoteTitleQuality
    {
      get
      {
        return _noteTitleQuality;
      }
      set
      {
        __isset.noteTitleQuality = true;
        this._noteTitleQuality = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool subjectDate;
      public bool latitude;
      public bool longitude;
      public bool altitude;
      public bool author;
      public bool source;
      public bool sourceURL;
      public bool sourceApplication;
      public bool shareDate;
      public bool reminderOrder;
      public bool reminderDoneTime;
      public bool reminderTime;
      public bool placeName;
      public bool contentClass;
      public bool applicationData;
      public bool lastEditedBy;
      public bool classifications;
      public bool creatorId;
      public bool lastEditorId;
      public bool sharedWithBusiness;
      public bool conflictSourceNoteGuid;
      public bool noteTitleQuality;
    }

    public NoteAttributes()
    {
    }

    public NoteAttributes DeepCopy()
    {
      var tmp82 = new NoteAttributes();
      if(__isset.subjectDate)
      {
        tmp82.SubjectDate = this.SubjectDate;
      }
      tmp82.__isset.subjectDate = this.__isset.subjectDate;
      if(__isset.latitude)
      {
        tmp82.Latitude = this.Latitude;
      }
      tmp82.__isset.latitude = this.__isset.latitude;
      if(__isset.longitude)
      {
        tmp82.Longitude = this.Longitude;
      }
      tmp82.__isset.longitude = this.__isset.longitude;
      if(__isset.altitude)
      {
        tmp82.Altitude = this.Altitude;
      }
      tmp82.__isset.altitude = this.__isset.altitude;
      if((Author != null) && __isset.author)
      {
        tmp82.Author = this.Author;
      }
      tmp82.__isset.author = this.__isset.author;
      if((Source != null) && __isset.source)
      {
        tmp82.Source = this.Source;
      }
      tmp82.__isset.source = this.__isset.source;
      if((SourceURL != null) && __isset.sourceURL)
      {
        tmp82.SourceURL = this.SourceURL;
      }
      tmp82.__isset.sourceURL = this.__isset.sourceURL;
      if((SourceApplication != null) && __isset.sourceApplication)
      {
        tmp82.SourceApplication = this.SourceApplication;
      }
      tmp82.__isset.sourceApplication = this.__isset.sourceApplication;
      if(__isset.shareDate)
      {
        tmp82.ShareDate = this.ShareDate;
      }
      tmp82.__isset.shareDate = this.__isset.shareDate;
      if(__isset.reminderOrder)
      {
        tmp82.ReminderOrder = this.ReminderOrder;
      }
      tmp82.__isset.reminderOrder = this.__isset.reminderOrder;
      if(__isset.reminderDoneTime)
      {
        tmp82.ReminderDoneTime = this.ReminderDoneTime;
      }
      tmp82.__isset.reminderDoneTime = this.__isset.reminderDoneTime;
      if(__isset.reminderTime)
      {
        tmp82.ReminderTime = this.ReminderTime;
      }
      tmp82.__isset.reminderTime = this.__isset.reminderTime;
      if((PlaceName != null) && __isset.placeName)
      {
        tmp82.PlaceName = this.PlaceName;
      }
      tmp82.__isset.placeName = this.__isset.placeName;
      if((ContentClass != null) && __isset.contentClass)
      {
        tmp82.ContentClass = this.ContentClass;
      }
      tmp82.__isset.contentClass = this.__isset.contentClass;
      if((ApplicationData != null) && __isset.applicationData)
      {
        tmp82.ApplicationData = (global::Evernote.EDAM.Type.LazyMap)this.ApplicationData.DeepCopy();
      }
      tmp82.__isset.applicationData = this.__isset.applicationData;
      if((LastEditedBy != null) && __isset.lastEditedBy)
      {
        tmp82.LastEditedBy = this.LastEditedBy;
      }
      tmp82.__isset.lastEditedBy = this.__isset.lastEditedBy;
      if((Classifications != null) && __isset.classifications)
      {
        tmp82.Classifications = this.Classifications.DeepCopy();
      }
      tmp82.__isset.classifications = this.__isset.classifications;
      if(__isset.creatorId)
      {
        tmp82.CreatorId = this.CreatorId;
      }
      tmp82.__isset.creatorId = this.__isset.creatorId;
      if(__isset.lastEditorId)
      {
        tmp82.LastEditorId = this.LastEditorId;
      }
      tmp82.__isset.lastEditorId = this.__isset.lastEditorId;
      if(__isset.sharedWithBusiness)
      {
        tmp82.SharedWithBusiness = this.SharedWithBusiness;
      }
      tmp82.__isset.sharedWithBusiness = this.__isset.sharedWithBusiness;
      if((ConflictSourceNoteGuid != null) && __isset.conflictSourceNoteGuid)
      {
        tmp82.ConflictSourceNoteGuid = this.ConflictSourceNoteGuid;
      }
      tmp82.__isset.conflictSourceNoteGuid = this.__isset.conflictSourceNoteGuid;
      if(__isset.noteTitleQuality)
      {
        tmp82.NoteTitleQuality = this.NoteTitleQuality;
      }
      tmp82.__isset.noteTitleQuality = this.__isset.noteTitleQuality;
      return tmp82;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                SubjectDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Double)
              {
                Latitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Double)
              {
                Longitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Double)
              {
                Altitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                Author = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                Source = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                SourceURL = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.String)
              {
                SourceApplication = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.I64)
              {
                ShareDate = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.I64)
              {
                ReminderOrder = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.I64)
              {
                ReminderDoneTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.I64)
              {
                ReminderTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 21:
              if (field.Type == TType.String)
              {
                PlaceName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 22:
              if (field.Type == TType.String)
              {
                ContentClass = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 23:
              if (field.Type == TType.Struct)
              {
                ApplicationData = new global::Evernote.EDAM.Type.LazyMap();
                await ApplicationData.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 24:
              if (field.Type == TType.String)
              {
                LastEditedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 26:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map83 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Classifications = new Dictionary<string, string>(_map83.Count);
                  for(int _i84 = 0; _i84 < _map83.Count; ++_i84)
                  {
                    string _key85;
                    string _val86;
                    _key85 = await iprot.ReadStringAsync(cancellationToken);
                    _val86 = await iprot.ReadStringAsync(cancellationToken);
                    Classifications[_key85] = _val86;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 27:
              if (field.Type == TType.I32)
              {
                CreatorId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 28:
              if (field.Type == TType.I32)
              {
                LastEditorId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 29:
              if (field.Type == TType.Bool)
              {
                SharedWithBusiness = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 30:
              if (field.Type == TType.String)
              {
                ConflictSourceNoteGuid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 31:
              if (field.Type == TType.I32)
              {
                NoteTitleQuality = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp87 = new TStruct("NoteAttributes");
        await oprot.WriteStructBeginAsync(tmp87, cancellationToken);
        var tmp88 = new TField();
        if(__isset.subjectDate)
        {
          tmp88.Name = "subjectDate";
          tmp88.Type = TType.I64;
          tmp88.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI64Async(SubjectDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.latitude)
        {
          tmp88.Name = "latitude";
          tmp88.Type = TType.Double;
          tmp88.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteDoubleAsync(Latitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.longitude)
        {
          tmp88.Name = "longitude";
          tmp88.Type = TType.Double;
          tmp88.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteDoubleAsync(Longitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.altitude)
        {
          tmp88.Name = "altitude";
          tmp88.Type = TType.Double;
          tmp88.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteDoubleAsync(Altitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Author != null) && __isset.author)
        {
          tmp88.Name = "author";
          tmp88.Type = TType.String;
          tmp88.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(Author, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Source != null) && __isset.source)
        {
          tmp88.Name = "source";
          tmp88.Type = TType.String;
          tmp88.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(Source, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceURL != null) && __isset.sourceURL)
        {
          tmp88.Name = "sourceURL";
          tmp88.Type = TType.String;
          tmp88.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(SourceURL, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SourceApplication != null) && __isset.sourceApplication)
        {
          tmp88.Name = "sourceApplication";
          tmp88.Type = TType.String;
          tmp88.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(SourceApplication, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.shareDate)
        {
          tmp88.Name = "shareDate";
          tmp88.Type = TType.I64;
          tmp88.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI64Async(ShareDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reminderOrder)
        {
          tmp88.Name = "reminderOrder";
          tmp88.Type = TType.I64;
          tmp88.ID = 18;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI64Async(ReminderOrder, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reminderDoneTime)
        {
          tmp88.Name = "reminderDoneTime";
          tmp88.Type = TType.I64;
          tmp88.ID = 19;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI64Async(ReminderDoneTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reminderTime)
        {
          tmp88.Name = "reminderTime";
          tmp88.Type = TType.I64;
          tmp88.ID = 20;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI64Async(ReminderTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PlaceName != null) && __isset.placeName)
        {
          tmp88.Name = "placeName";
          tmp88.Type = TType.String;
          tmp88.ID = 21;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(PlaceName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ContentClass != null) && __isset.contentClass)
        {
          tmp88.Name = "contentClass";
          tmp88.Type = TType.String;
          tmp88.ID = 22;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(ContentClass, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ApplicationData != null) && __isset.applicationData)
        {
          tmp88.Name = "applicationData";
          tmp88.Type = TType.Struct;
          tmp88.ID = 23;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await ApplicationData.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LastEditedBy != null) && __isset.lastEditedBy)
        {
          tmp88.Name = "lastEditedBy";
          tmp88.Type = TType.String;
          tmp88.ID = 24;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(LastEditedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Classifications != null) && __isset.classifications)
        {
          tmp88.Name = "classifications";
          tmp88.Type = TType.Map;
          tmp88.ID = 26;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Classifications.Count), cancellationToken);
            foreach (string _iter89 in Classifications.Keys)
            {
              await oprot.WriteStringAsync(_iter89, cancellationToken);
              await oprot.WriteStringAsync(Classifications[_iter89], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.creatorId)
        {
          tmp88.Name = "creatorId";
          tmp88.Type = TType.I32;
          tmp88.ID = 27;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI32Async(CreatorId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lastEditorId)
        {
          tmp88.Name = "lastEditorId";
          tmp88.Type = TType.I32;
          tmp88.ID = 28;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI32Async(LastEditorId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sharedWithBusiness)
        {
          tmp88.Name = "sharedWithBusiness";
          tmp88.Type = TType.Bool;
          tmp88.ID = 29;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteBoolAsync(SharedWithBusiness, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ConflictSourceNoteGuid != null) && __isset.conflictSourceNoteGuid)
        {
          tmp88.Name = "conflictSourceNoteGuid";
          tmp88.Type = TType.String;
          tmp88.ID = 30;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteStringAsync(ConflictSourceNoteGuid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.noteTitleQuality)
        {
          tmp88.Name = "noteTitleQuality";
          tmp88.Type = TType.I32;
          tmp88.ID = 31;
          await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
          await oprot.WriteI32Async(NoteTitleQuality, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NoteAttributes other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.subjectDate == other.__isset.subjectDate) && ((!__isset.subjectDate) || (global::System.Object.Equals(SubjectDate, other.SubjectDate))))
        && ((__isset.latitude == other.__isset.latitude) && ((!__isset.latitude) || (global::System.Object.Equals(Latitude, other.Latitude))))
        && ((__isset.longitude == other.__isset.longitude) && ((!__isset.longitude) || (global::System.Object.Equals(Longitude, other.Longitude))))
        && ((__isset.altitude == other.__isset.altitude) && ((!__isset.altitude) || (global::System.Object.Equals(Altitude, other.Altitude))))
        && ((__isset.author == other.__isset.author) && ((!__isset.author) || (global::System.Object.Equals(Author, other.Author))))
        && ((__isset.source == other.__isset.source) && ((!__isset.source) || (global::System.Object.Equals(Source, other.Source))))
        && ((__isset.sourceURL == other.__isset.sourceURL) && ((!__isset.sourceURL) || (global::System.Object.Equals(SourceURL, other.SourceURL))))
        && ((__isset.sourceApplication == other.__isset.sourceApplication) && ((!__isset.sourceApplication) || (global::System.Object.Equals(SourceApplication, other.SourceApplication))))
        && ((__isset.shareDate == other.__isset.shareDate) && ((!__isset.shareDate) || (global::System.Object.Equals(ShareDate, other.ShareDate))))
        && ((__isset.reminderOrder == other.__isset.reminderOrder) && ((!__isset.reminderOrder) || (global::System.Object.Equals(ReminderOrder, other.ReminderOrder))))
        && ((__isset.reminderDoneTime == other.__isset.reminderDoneTime) && ((!__isset.reminderDoneTime) || (global::System.Object.Equals(ReminderDoneTime, other.ReminderDoneTime))))
        && ((__isset.reminderTime == other.__isset.reminderTime) && ((!__isset.reminderTime) || (global::System.Object.Equals(ReminderTime, other.ReminderTime))))
        && ((__isset.placeName == other.__isset.placeName) && ((!__isset.placeName) || (global::System.Object.Equals(PlaceName, other.PlaceName))))
        && ((__isset.contentClass == other.__isset.contentClass) && ((!__isset.contentClass) || (global::System.Object.Equals(ContentClass, other.ContentClass))))
        && ((__isset.applicationData == other.__isset.applicationData) && ((!__isset.applicationData) || (global::System.Object.Equals(ApplicationData, other.ApplicationData))))
        && ((__isset.lastEditedBy == other.__isset.lastEditedBy) && ((!__isset.lastEditedBy) || (global::System.Object.Equals(LastEditedBy, other.LastEditedBy))))
        && ((__isset.classifications == other.__isset.classifications) && ((!__isset.classifications) || (TCollections.Equals(Classifications, other.Classifications))))
        && ((__isset.creatorId == other.__isset.creatorId) && ((!__isset.creatorId) || (global::System.Object.Equals(CreatorId, other.CreatorId))))
        && ((__isset.lastEditorId == other.__isset.lastEditorId) && ((!__isset.lastEditorId) || (global::System.Object.Equals(LastEditorId, other.LastEditorId))))
        && ((__isset.sharedWithBusiness == other.__isset.sharedWithBusiness) && ((!__isset.sharedWithBusiness) || (global::System.Object.Equals(SharedWithBusiness, other.SharedWithBusiness))))
        && ((__isset.conflictSourceNoteGuid == other.__isset.conflictSourceNoteGuid) && ((!__isset.conflictSourceNoteGuid) || (global::System.Object.Equals(ConflictSourceNoteGuid, other.ConflictSourceNoteGuid))))
        && ((__isset.noteTitleQuality == other.__isset.noteTitleQuality) && ((!__isset.noteTitleQuality) || (global::System.Object.Equals(NoteTitleQuality, other.NoteTitleQuality))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.subjectDate)
        {
          hashcode = (hashcode * 397) + SubjectDate.GetHashCode();
        }
        if(__isset.latitude)
        {
          hashcode = (hashcode * 397) + Latitude.GetHashCode();
        }
        if(__isset.longitude)
        {
          hashcode = (hashcode * 397) + Longitude.GetHashCode();
        }
        if(__isset.altitude)
        {
          hashcode = (hashcode * 397) + Altitude.GetHashCode();
        }
        if((Author != null) && __isset.author)
        {
          hashcode = (hashcode * 397) + Author.GetHashCode();
        }
        if((Source != null) && __isset.source)
        {
          hashcode = (hashcode * 397) + Source.GetHashCode();
        }
        if((SourceURL != null) && __isset.sourceURL)
        {
          hashcode = (hashcode * 397) + SourceURL.GetHashCode();
        }
        if((SourceApplication != null) && __isset.sourceApplication)
        {
          hashcode = (hashcode * 397) + SourceApplication.GetHashCode();
        }
        if(__isset.shareDate)
        {
          hashcode = (hashcode * 397) + ShareDate.GetHashCode();
        }
        if(__isset.reminderOrder)
        {
          hashcode = (hashcode * 397) + ReminderOrder.GetHashCode();
        }
        if(__isset.reminderDoneTime)
        {
          hashcode = (hashcode * 397) + ReminderDoneTime.GetHashCode();
        }
        if(__isset.reminderTime)
        {
          hashcode = (hashcode * 397) + ReminderTime.GetHashCode();
        }
        if((PlaceName != null) && __isset.placeName)
        {
          hashcode = (hashcode * 397) + PlaceName.GetHashCode();
        }
        if((ContentClass != null) && __isset.contentClass)
        {
          hashcode = (hashcode * 397) + ContentClass.GetHashCode();
        }
        if((ApplicationData != null) && __isset.applicationData)
        {
          hashcode = (hashcode * 397) + ApplicationData.GetHashCode();
        }
        if((LastEditedBy != null) && __isset.lastEditedBy)
        {
          hashcode = (hashcode * 397) + LastEditedBy.GetHashCode();
        }
        if((Classifications != null) && __isset.classifications)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Classifications);
        }
        if(__isset.creatorId)
        {
          hashcode = (hashcode * 397) + CreatorId.GetHashCode();
        }
        if(__isset.lastEditorId)
        {
          hashcode = (hashcode * 397) + LastEditorId.GetHashCode();
        }
        if(__isset.sharedWithBusiness)
        {
          hashcode = (hashcode * 397) + SharedWithBusiness.GetHashCode();
        }
        if((ConflictSourceNoteGuid != null) && __isset.conflictSourceNoteGuid)
        {
          hashcode = (hashcode * 397) + ConflictSourceNoteGuid.GetHashCode();
        }
        if(__isset.noteTitleQuality)
        {
          hashcode = (hashcode * 397) + NoteTitleQuality.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp90 = new StringBuilder("NoteAttributes(");
      int tmp91 = 0;
      if(__isset.subjectDate)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("SubjectDate: ");
        SubjectDate.ToString(tmp90);
      }
      if(__isset.latitude)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Latitude: ");
        Latitude.ToString(tmp90);
      }
      if(__isset.longitude)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Longitude: ");
        Longitude.ToString(tmp90);
      }
      if(__isset.altitude)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Altitude: ");
        Altitude.ToString(tmp90);
      }
      if((Author != null) && __isset.author)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Author: ");
        Author.ToString(tmp90);
      }
      if((Source != null) && __isset.source)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Source: ");
        Source.ToString(tmp90);
      }
      if((SourceURL != null) && __isset.sourceURL)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("SourceURL: ");
        SourceURL.ToString(tmp90);
      }
      if((SourceApplication != null) && __isset.sourceApplication)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("SourceApplication: ");
        SourceApplication.ToString(tmp90);
      }
      if(__isset.shareDate)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ShareDate: ");
        ShareDate.ToString(tmp90);
      }
      if(__isset.reminderOrder)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ReminderOrder: ");
        ReminderOrder.ToString(tmp90);
      }
      if(__isset.reminderDoneTime)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ReminderDoneTime: ");
        ReminderDoneTime.ToString(tmp90);
      }
      if(__isset.reminderTime)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ReminderTime: ");
        ReminderTime.ToString(tmp90);
      }
      if((PlaceName != null) && __isset.placeName)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("PlaceName: ");
        PlaceName.ToString(tmp90);
      }
      if((ContentClass != null) && __isset.contentClass)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ContentClass: ");
        ContentClass.ToString(tmp90);
      }
      if((ApplicationData != null) && __isset.applicationData)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ApplicationData: ");
        ApplicationData.ToString(tmp90);
      }
      if((LastEditedBy != null) && __isset.lastEditedBy)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("LastEditedBy: ");
        LastEditedBy.ToString(tmp90);
      }
      if((Classifications != null) && __isset.classifications)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("Classifications: ");
        Classifications.ToString(tmp90);
      }
      if(__isset.creatorId)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("CreatorId: ");
        CreatorId.ToString(tmp90);
      }
      if(__isset.lastEditorId)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("LastEditorId: ");
        LastEditorId.ToString(tmp90);
      }
      if(__isset.sharedWithBusiness)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("SharedWithBusiness: ");
        SharedWithBusiness.ToString(tmp90);
      }
      if((ConflictSourceNoteGuid != null) && __isset.conflictSourceNoteGuid)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("ConflictSourceNoteGuid: ");
        ConflictSourceNoteGuid.ToString(tmp90);
      }
      if(__isset.noteTitleQuality)
      {
        if(0 < tmp91++) { tmp90.Append(", "); }
        tmp90.Append("NoteTitleQuality: ");
        NoteTitleQuality.ToString(tmp90);
      }
      tmp90.Append(')');
      return tmp90.ToString();
    }
  }

}
